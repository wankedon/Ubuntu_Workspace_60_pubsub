// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcts.proto

#include "dcts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
constexpr TaskId::TaskId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct TaskIdDefaultTypeInternal {
  constexpr TaskIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskIdDefaultTypeInternal() {}
  union {
    TaskId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskIdDefaultTypeInternal _TaskId_default_instance_;
constexpr Timestamp::Timestamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_(0u)
  , nanos_(0u){}
struct TimestampDefaultTypeInternal {
  constexpr TimestampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimestampDefaultTypeInternal _Timestamp_default_instance_;
constexpr TimeSpan::TimeSpan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_time_(nullptr)
  , stop_time_(nullptr){}
struct TimeSpanDefaultTypeInternal {
  constexpr TimeSpanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeSpanDefaultTypeInternal() {}
  union {
    TimeSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeSpanDefaultTypeInternal _TimeSpan_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , altitude_(0){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr Posture::Posture(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : yaw_(0)
  , pitch_(0)
  , roll_(0){}
struct PostureDefaultTypeInternal {
  constexpr PostureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostureDefaultTypeInternal() {}
  union {
    Posture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostureDefaultTypeInternal _Posture_default_instance_;
constexpr Direction::Direction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : azimuth_(0)
  , pitch_(0){}
struct DirectionDefaultTypeInternal {
  constexpr DirectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionDefaultTypeInternal() {}
  union {
    Direction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionDefaultTypeInternal _Direction_default_instance_;
constexpr DRange::DRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(0)
  , stop_(0){}
struct DRangeDefaultTypeInternal {
  constexpr DRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DRangeDefaultTypeInternal() {}
  union {
    DRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DRangeDefaultTypeInternal _DRange_default_instance_;
constexpr IRange::IRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(0)
  , stop_(0){}
struct IRangeDefaultTypeInternal {
  constexpr IRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRangeDefaultTypeInternal() {}
  union {
    IRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRangeDefaultTypeInternal _IRange_default_instance_;
constexpr Physical::Physical(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0)
  , type_(0)
{}
struct PhysicalDefaultTypeInternal {
  constexpr PhysicalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PhysicalDefaultTypeInternal() {}
  union {
    Physical _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PhysicalDefaultTypeInternal _Physical_default_instance_;
constexpr Integer::Integer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(PROTOBUF_LONGLONG(0)){}
struct IntegerDefaultTypeInternal {
  constexpr IntegerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntegerDefaultTypeInternal() {}
  union {
    Integer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntegerDefaultTypeInternal _Integer_default_instance_;
constexpr Boolean::Boolean(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct BooleanDefaultTypeInternal {
  constexpr BooleanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BooleanDefaultTypeInternal() {}
  union {
    Boolean _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BooleanDefaultTypeInternal _Boolean_default_instance_;
constexpr RealNumber::RealNumber(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct RealNumberDefaultTypeInternal {
  constexpr RealNumberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RealNumberDefaultTypeInternal() {}
  union {
    RealNumber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RealNumberDefaultTypeInternal _RealNumber_default_instance_;
constexpr ComplexNumber::ComplexNumber(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : real_(0)
  , image_(0){}
struct ComplexNumberDefaultTypeInternal {
  constexpr ComplexNumberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComplexNumberDefaultTypeInternal() {}
  union {
    ComplexNumber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComplexNumberDefaultTypeInternal _ComplexNumber_default_instance_;
constexpr StatisticVal::StatisticVal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : up_(0)
  , down_(0)
  , cur_(0)
  , mean_(0){}
struct StatisticValDefaultTypeInternal {
  constexpr StatisticValDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatisticValDefaultTypeInternal() {}
  union {
    StatisticVal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatisticValDefaultTypeInternal _StatisticVal_default_instance_;
constexpr HeartbeatCfg::HeartbeatCfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heartbeat_interval_(0)
  , heartbeat_timeout_(0)
  , heartbeat_ttl_(0){}
struct HeartbeatCfgDefaultTypeInternal {
  constexpr HeartbeatCfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartbeatCfgDefaultTypeInternal() {}
  union {
    HeartbeatCfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartbeatCfgDefaultTypeInternal _HeartbeatCfg_default_instance_;
constexpr ReconnectionCfg::ReconnectionCfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reconnect_interval_(0)
  , reconnect_interval_max_(0){}
struct ReconnectionCfgDefaultTypeInternal {
  constexpr ReconnectionCfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReconnectionCfgDefaultTypeInternal() {}
  union {
    ReconnectionCfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReconnectionCfgDefaultTypeInternal _ReconnectionCfg_default_instance_;
constexpr MsgSendOption::MsgSendOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hwm_(0)
  , linger_(0)
  , timeout_(0){}
struct MsgSendOptionDefaultTypeInternal {
  constexpr MsgSendOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgSendOptionDefaultTypeInternal() {}
  union {
    MsgSendOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgSendOptionDefaultTypeInternal _MsgSendOption_default_instance_;
constexpr IPv4Address::IPv4Address(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0){}
struct IPv4AddressDefaultTypeInternal {
  constexpr IPv4AddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPv4AddressDefaultTypeInternal() {}
  union {
    IPv4Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPv4AddressDefaultTypeInternal _IPv4Address_default_instance_;
constexpr ZeromqLinkCfg::ZeromqLinkCfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : link_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(nullptr)
  , heartbeat_cfg_(nullptr)
  , reconnect_cfg_(nullptr)
  , msg_send_cfg_(nullptr){}
struct ZeromqLinkCfgDefaultTypeInternal {
  constexpr ZeromqLinkCfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZeromqLinkCfgDefaultTypeInternal() {}
  union {
    ZeromqLinkCfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZeromqLinkCfgDefaultTypeInternal _ZeromqLinkCfg_default_instance_;
constexpr TimerParam::TimerParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interval_in_ms_(0)
  , times_(0){}
struct TimerParamDefaultTypeInternal {
  constexpr TimerParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimerParamDefaultTypeInternal() {}
  union {
    TimerParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimerParamDefaultTypeInternal _TimerParam_default_instance_;
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dcts_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dcts_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dcts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dcts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TaskId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TaskId, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Timestamp, seconds_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Timestamp, nanos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimeSpan, start_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimeSpan, stop_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Position, latitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Position, longitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Position, altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Posture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Posture, yaw_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Posture, pitch_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Posture, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Direction, azimuth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Direction, pitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::DRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::DRange, start_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::DRange, stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IRange, start_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IRange, stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Physical, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Physical, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Physical, value_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Physical, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Integer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Integer, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Boolean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Boolean, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RealNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RealNumber, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ComplexNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ComplexNumber, real_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ComplexNumber, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, up_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, down_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, cur_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, mean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::HeartbeatCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::HeartbeatCfg, heartbeat_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::HeartbeatCfg, heartbeat_timeout_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::HeartbeatCfg, heartbeat_ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ReconnectionCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ReconnectionCfg, reconnect_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ReconnectionCfg, reconnect_interval_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::MsgSendOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::MsgSendOption, hwm_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::MsgSendOption, linger_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::MsgSendOption, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IPv4Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IPv4Address, ip_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IPv4Address, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, address_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, link_name_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, heartbeat_cfg_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, reconnect_cfg_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, msg_send_cfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimerParam, interval_in_ms_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimerParam, times_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::TaskId)},
  { 6, -1, sizeof(::zb::dcts::Timestamp)},
  { 13, -1, sizeof(::zb::dcts::TimeSpan)},
  { 20, -1, sizeof(::zb::dcts::Position)},
  { 28, -1, sizeof(::zb::dcts::Posture)},
  { 36, -1, sizeof(::zb::dcts::Direction)},
  { 43, -1, sizeof(::zb::dcts::DRange)},
  { 50, -1, sizeof(::zb::dcts::IRange)},
  { 57, -1, sizeof(::zb::dcts::Physical)},
  { 65, -1, sizeof(::zb::dcts::Integer)},
  { 71, -1, sizeof(::zb::dcts::Boolean)},
  { 77, -1, sizeof(::zb::dcts::RealNumber)},
  { 83, -1, sizeof(::zb::dcts::ComplexNumber)},
  { 90, -1, sizeof(::zb::dcts::StatisticVal)},
  { 99, -1, sizeof(::zb::dcts::HeartbeatCfg)},
  { 107, -1, sizeof(::zb::dcts::ReconnectionCfg)},
  { 114, -1, sizeof(::zb::dcts::MsgSendOption)},
  { 122, -1, sizeof(::zb::dcts::IPv4Address)},
  { 129, -1, sizeof(::zb::dcts::ZeromqLinkCfg)},
  { 139, -1, sizeof(::zb::dcts::TimerParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_TaskId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_TimeSpan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Posture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Direction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_DRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_IRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Physical_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Integer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Boolean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_RealNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_ComplexNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_StatisticVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_HeartbeatCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_ReconnectionCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_MsgSendOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_IPv4Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_ZeromqLinkCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_TimerParam_default_instance_),
};

const char descriptor_table_protodef_dcts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndcts.proto\022\007zb.dcts\"\027\n\006TaskId\022\r\n\005value"
  "\030\001 \001(\r\"+\n\tTimestamp\022\017\n\007seconds\030\001 \001(\r\022\r\n\005"
  "nanos\030\002 \001(\r\"Y\n\010TimeSpan\022&\n\nstart_time\030\001 "
  "\001(\0132\022.zb.dcts.Timestamp\022%\n\tstop_time\030\002 \001"
  "(\0132\022.zb.dcts.Timestamp\"A\n\010Position\022\020\n\010la"
  "titude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010altit"
  "ude\030\003 \001(\001\"3\n\007Posture\022\013\n\003yaw\030\001 \001(\001\022\r\n\005pit"
  "ch\030\002 \001(\001\022\014\n\004roll\030\003 \001(\001\"+\n\tDirection\022\017\n\007a"
  "zimuth\030\001 \001(\001\022\r\n\005pitch\030\002 \001(\001\"%\n\006DRange\022\r\n"
  "\005start\030\001 \001(\001\022\014\n\004stop\030\002 \001(\001\"%\n\006IRange\022\r\n\005"
  "start\030\001 \001(\005\022\014\n\004stop\030\002 \001(\005\"\326\001\n\010Physical\022$"
  "\n\004type\030\001 \001(\0162\026.zb.dcts.Physical.Type\022\r\n\005"
  "value\030\002 \001(\001\022\014\n\004unit\030\003 \001(\t\"\206\001\n\004Type\022\017\n\013TE"
  "MPERATURE\020\000\022\014\n\010HUMIDITY\020\001\022\t\n\005ANGLE\020\002\022\014\n\010"
  "DISTANCE\020\003\022\014\n\010VELOCITY\020\004\022\024\n\020ANGULAR_VELO"
  "CITY\020\005\022\n\n\006VOTAGE\020\006\022\t\n\005POWER\020\007\022\013\n\007CURRENT"
  "\020\010\"\030\n\007Integer\022\r\n\005value\030\001 \001(\003\"\030\n\007Boolean\022"
  "\r\n\005value\030\001 \001(\010\"\033\n\nRealNumber\022\r\n\005value\030\001 "
  "\001(\001\",\n\rComplexNumber\022\014\n\004real\030\001 \001(\001\022\r\n\005im"
  "age\030\002 \001(\001\"C\n\014StatisticVal\022\n\n\002up\030\001 \001(\001\022\014\n"
  "\004down\030\002 \001(\001\022\013\n\003cur\030\003 \001(\001\022\014\n\004mean\030\004 \001(\001\"\\"
  "\n\014HeartbeatCfg\022\032\n\022heartbeat_interval\030\001 \001"
  "(\005\022\031\n\021heartbeat_timeout\030\002 \001(\005\022\025\n\rheartbe"
  "at_ttl\030\003 \001(\005\"M\n\017ReconnectionCfg\022\032\n\022recon"
  "nect_interval\030\001 \001(\005\022\036\n\026reconnect_interva"
  "l_max\030\002 \001(\005\"=\n\rMsgSendOption\022\013\n\003hwm\030\001 \001("
  "\005\022\016\n\006linger\030\002 \001(\005\022\017\n\007timeout\030\003 \001(\005\"\'\n\013IP"
  "v4Address\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"\326\001\n\r"
  "ZeromqLinkCfg\022%\n\007address\030\001 \001(\0132\024.zb.dcts"
  ".IPv4Address\022\021\n\tlink_name\030\002 \001(\t\022,\n\rheart"
  "beat_cfg\030\004 \001(\0132\025.zb.dcts.HeartbeatCfg\022/\n"
  "\rreconnect_cfg\030\005 \001(\0132\030.zb.dcts.Reconnect"
  "ionCfg\022,\n\014msg_send_cfg\030\006 \001(\0132\026.zb.dcts.M"
  "sgSendOption\"3\n\nTimerParam\022\026\n\016interval_i"
  "n_ms\030\001 \001(\005\022\r\n\005times\030\002 \001(\005B\025\n\013com.zb.dcts"
  "B\004dctsP\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dcts_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dcts_2eproto = {
  false, false, 1416, descriptor_table_protodef_dcts_2eproto, "dcts.proto", 
  &descriptor_table_dcts_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_dcts_2eproto::offsets,
  file_level_metadata_dcts_2eproto, file_level_enum_descriptors_dcts_2eproto, file_level_service_descriptors_dcts_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dcts_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dcts_2eproto);
  return descriptor_table_dcts_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dcts_2eproto(&descriptor_table_dcts_2eproto);
namespace zb {
namespace dcts {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Physical_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dcts_2eproto);
  return file_level_enum_descriptors_dcts_2eproto[0];
}
bool Physical_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Physical_Type Physical::TEMPERATURE;
constexpr Physical_Type Physical::HUMIDITY;
constexpr Physical_Type Physical::ANGLE;
constexpr Physical_Type Physical::DISTANCE;
constexpr Physical_Type Physical::VELOCITY;
constexpr Physical_Type Physical::ANGULAR_VELOCITY;
constexpr Physical_Type Physical::VOTAGE;
constexpr Physical_Type Physical::POWER;
constexpr Physical_Type Physical::CURRENT;
constexpr Physical_Type Physical::Type_MIN;
constexpr Physical_Type Physical::Type_MAX;
constexpr int Physical::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TaskId::_Internal {
 public:
};

TaskId::TaskId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.TaskId)
}
TaskId::TaskId(const TaskId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.TaskId)
}

void TaskId::SharedCtor() {
value_ = 0u;
}

TaskId::~TaskId() {
  // @@protoc_insertion_point(destructor:zb.dcts.TaskId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskId::ArenaDtor(void* object) {
  TaskId* _this = reinterpret_cast< TaskId* >(object);
  (void)_this;
}
void TaskId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.TaskId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.TaskId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.TaskId)
  return target;
}

size_t TaskId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.TaskId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.TaskId)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.TaskId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.TaskId)
    MergeFrom(*source);
  }
}

void TaskId::MergeFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.TaskId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void TaskId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.TaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskId::CopyFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.TaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskId::IsInitialized() const {
  return true;
}

void TaskId::InternalSwap(TaskId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Timestamp)
}

void Timestamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:zb.dcts.Timestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Timestamp::ArenaDtor(void* object) {
  Timestamp* _this = reinterpret_cast< Timestamp* >(object);
  (void)_this;
}
void Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanos_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds = 1;
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seconds(), target);
  }

  // uint32 nanos = 2;
  if (this->nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 seconds = 1;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seconds());
  }

  // uint32 nanos = 2;
  if (this->nanos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nanos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.nanos() != 0) {
    _internal_set_nanos(from._internal_nanos());
  }
}

void Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, nanos_)
      + sizeof(Timestamp::nanos_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeSpan::_Internal {
 public:
  static const ::zb::dcts::Timestamp& start_time(const TimeSpan* msg);
  static const ::zb::dcts::Timestamp& stop_time(const TimeSpan* msg);
};

const ::zb::dcts::Timestamp&
TimeSpan::_Internal::start_time(const TimeSpan* msg) {
  return *msg->start_time_;
}
const ::zb::dcts::Timestamp&
TimeSpan::_Internal::stop_time(const TimeSpan* msg) {
  return *msg->stop_time_;
}
TimeSpan::TimeSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.TimeSpan)
}
TimeSpan::TimeSpan(const TimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new ::zb::dcts::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_stop_time()) {
    stop_time_ = new ::zb::dcts::Timestamp(*from.stop_time_);
  } else {
    stop_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.TimeSpan)
}

void TimeSpan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(stop_time_));
}

TimeSpan::~TimeSpan() {
  // @@protoc_insertion_point(destructor:zb.dcts.TimeSpan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete stop_time_;
}

void TimeSpan::ArenaDtor(void* object) {
  TimeSpan* _this = reinterpret_cast< TimeSpan* >(object);
  (void)_this;
}
void TimeSpan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.TimeSpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && stop_time_ != nullptr) {
    delete stop_time_;
  }
  stop_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSpan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp stop_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSpan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.TimeSpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.Timestamp start_time = 1;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_time(this), target, stream);
  }

  // .zb.dcts.Timestamp stop_time = 2;
  if (this->has_stop_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stop_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.TimeSpan)
  return target;
}

size_t TimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.TimeSpan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.Timestamp start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .zb.dcts.Timestamp stop_time = 2;
  if (this->has_stop_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSpan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.TimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSpan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSpan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.TimeSpan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.TimeSpan)
    MergeFrom(*source);
  }
}

void TimeSpan::MergeFrom(const TimeSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.TimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time()) {
    _internal_mutable_start_time()->::zb::dcts::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_stop_time()) {
    _internal_mutable_stop_time()->::zb::dcts::Timestamp::MergeFrom(from._internal_stop_time());
  }
}

void TimeSpan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.TimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSpan::CopyFrom(const TimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.TimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSpan::IsInitialized() const {
  return true;
}

void TimeSpan::InternalSwap(TimeSpan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSpan, stop_time_)
      + sizeof(TimeSpan::stop_time_)
      - PROTOBUF_FIELD_OFFSET(TimeSpan, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSpan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Position)
}

void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:zb.dcts.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, altitude_)
      + sizeof(Position::altitude_)
      - PROTOBUF_FIELD_OFFSET(Position, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Posture::_Internal {
 public:
};

Posture::Posture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Posture)
}
Posture::Posture(const Posture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Posture)
}

void Posture::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&yaw_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
}

Posture::~Posture() {
  // @@protoc_insertion_point(destructor:zb.dcts.Posture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Posture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Posture::ArenaDtor(void* object) {
  Posture* _this = reinterpret_cast< Posture* >(object);
  (void)_this;
}
void Posture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Posture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Posture::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Posture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Posture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Posture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Posture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double yaw = 1;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_yaw(), target);
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pitch(), target);
  }

  // double roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Posture)
  return target;
}

size_t Posture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Posture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double yaw = 1;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Posture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Posture)
  GOOGLE_DCHECK_NE(&from, this);
  const Posture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Posture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Posture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Posture)
    MergeFrom(*source);
  }
}

void Posture::MergeFrom(const Posture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Posture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
}

void Posture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Posture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Posture::CopyFrom(const Posture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Posture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Posture::IsInitialized() const {
  return true;
}

void Posture::InternalSwap(Posture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Posture, roll_)
      + sizeof(Posture::roll_)
      - PROTOBUF_FIELD_OFFSET(Posture, yaw_)>(
          reinterpret_cast<char*>(&yaw_),
          reinterpret_cast<char*>(&other->yaw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Posture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Direction::_Internal {
 public:
};

Direction::Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Direction)
}
Direction::Direction(const Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&azimuth_, &from.azimuth_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&azimuth_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Direction)
}

void Direction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&azimuth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&azimuth_)) + sizeof(pitch_));
}

Direction::~Direction() {
  // @@protoc_insertion_point(destructor:zb.dcts.Direction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Direction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Direction::ArenaDtor(void* object) {
  Direction* _this = reinterpret_cast< Direction* >(object);
  (void)_this;
}
void Direction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(pitch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Direction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double azimuth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Direction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_azimuth(), target);
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Direction)
  return target;
}

size_t Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Direction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Direction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  const Direction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Direction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Direction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Direction)
    MergeFrom(*source);
  }
}

void Direction::MergeFrom(const Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.azimuth() <= 0 && from.azimuth() >= 0)) {
    _internal_set_azimuth(from._internal_azimuth());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
}

void Direction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Direction::CopyFrom(const Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Direction::IsInitialized() const {
  return true;
}

void Direction::InternalSwap(Direction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Direction, pitch_)
      + sizeof(Direction::pitch_)
      - PROTOBUF_FIELD_OFFSET(Direction, azimuth_)>(
          reinterpret_cast<char*>(&azimuth_),
          reinterpret_cast<char*>(&other->azimuth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Direction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DRange::_Internal {
 public:
};

DRange::DRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.DRange)
}
DRange::DRange(const DRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.DRange)
}

void DRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
}

DRange::~DRange() {
  // @@protoc_insertion_point(destructor:zb.dcts.DRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DRange::ArenaDtor(void* object) {
  DRange* _this = reinterpret_cast< DRange* >(object);
  (void)_this;
}
void DRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DRange::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.DRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.DRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 1;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start(), target);
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.DRange)
  return target;
}

size_t DRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.DRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start = 1;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.DRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.DRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.DRange)
    MergeFrom(*source);
  }
}

void DRange::MergeFrom(const DRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.DRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.start() <= 0 && from.start() >= 0)) {
    _internal_set_start(from._internal_start());
  }
  if (!(from.stop() <= 0 && from.stop() >= 0)) {
    _internal_set_stop(from._internal_stop());
  }
}

void DRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.DRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DRange::CopyFrom(const DRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.DRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DRange::IsInitialized() const {
  return true;
}

void DRange::InternalSwap(DRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DRange, stop_)
      + sizeof(DRange::stop_)
      - PROTOBUF_FIELD_OFFSET(DRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IRange::_Internal {
 public:
};

IRange::IRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.IRange)
}
IRange::IRange(const IRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.IRange)
}

void IRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
}

IRange::~IRange() {
  // @@protoc_insertion_point(destructor:zb.dcts.IRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRange::ArenaDtor(void* object) {
  IRange* _this = reinterpret_cast< IRange* >(object);
  (void)_this;
}
void IRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRange::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.IRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.IRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 stop = 2;
  if (this->stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.IRange)
  return target;
}

size_t IRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.IRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 stop = 2;
  if (this->stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.IRange)
  GOOGLE_DCHECK_NE(&from, this);
  const IRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.IRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.IRange)
    MergeFrom(*source);
  }
}

void IRange::MergeFrom(const IRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.IRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.stop() != 0) {
    _internal_set_stop(from._internal_stop());
  }
}

void IRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.IRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRange::CopyFrom(const IRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.IRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRange::IsInitialized() const {
  return true;
}

void IRange::InternalSwap(IRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRange, stop_)
      + sizeof(IRange::stop_)
      - PROTOBUF_FIELD_OFFSET(IRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Physical::_Internal {
 public:
};

Physical::Physical(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Physical)
}
Physical::Physical(const Physical& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Physical)
}

void Physical::SharedCtor() {
unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

Physical::~Physical() {
  // @@protoc_insertion_point(destructor:zb.dcts.Physical)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Physical::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Physical::ArenaDtor(void* object) {
  Physical* _this = reinterpret_cast< Physical* >(object);
  (void)_this;
}
void Physical::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Physical::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Physical::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Physical)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_.ClearToEmpty();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Physical::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.Physical.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::Physical_Type>(val));
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.Physical.unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Physical::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Physical)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.Physical.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.Physical.unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Physical)
  return target;
}

size_t Physical::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Physical)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.Physical.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Physical::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Physical)
  GOOGLE_DCHECK_NE(&from, this);
  const Physical* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Physical>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Physical)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Physical)
    MergeFrom(*source);
  }
}

void Physical::MergeFrom(const Physical& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Physical)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit().size() > 0) {
    _internal_set_unit(from._internal_unit());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Physical::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Physical)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Physical::CopyFrom(const Physical& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Physical)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Physical::IsInitialized() const {
  return true;
}

void Physical::InternalSwap(Physical* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Physical, type_)
      + sizeof(Physical::type_)
      - PROTOBUF_FIELD_OFFSET(Physical, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Physical::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Integer::_Internal {
 public:
};

Integer::Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Integer)
}
Integer::Integer(const Integer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Integer)
}

void Integer::SharedCtor() {
value_ = PROTOBUF_LONGLONG(0);
}

Integer::~Integer() {
  // @@protoc_insertion_point(destructor:zb.dcts.Integer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Integer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Integer::ArenaDtor(void* object) {
  Integer* _this = reinterpret_cast< Integer* >(object);
  (void)_this;
}
void Integer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Integer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Integer::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Integer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Integer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Integer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Integer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Integer)
  return target;
}

size_t Integer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Integer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Integer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  const Integer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Integer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Integer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Integer)
    MergeFrom(*source);
  }
}

void Integer::MergeFrom(const Integer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Integer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Integer::CopyFrom(const Integer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Integer::IsInitialized() const {
  return true;
}

void Integer::InternalSwap(Integer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Integer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Boolean::_Internal {
 public:
};

Boolean::Boolean(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Boolean)
}
Boolean::Boolean(const Boolean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Boolean)
}

void Boolean::SharedCtor() {
value_ = false;
}

Boolean::~Boolean() {
  // @@protoc_insertion_point(destructor:zb.dcts.Boolean)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Boolean::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Boolean::ArenaDtor(void* object) {
  Boolean* _this = reinterpret_cast< Boolean* >(object);
  (void)_this;
}
void Boolean::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Boolean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Boolean::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Boolean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Boolean::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Boolean)
  return target;
}

size_t Boolean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Boolean)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Boolean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  const Boolean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Boolean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Boolean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Boolean)
    MergeFrom(*source);
  }
}

void Boolean::MergeFrom(const Boolean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Boolean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boolean::CopyFrom(const Boolean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boolean::IsInitialized() const {
  return true;
}

void Boolean::InternalSwap(Boolean* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Boolean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RealNumber::_Internal {
 public:
};

RealNumber::RealNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.RealNumber)
}
RealNumber::RealNumber(const RealNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.RealNumber)
}

void RealNumber::SharedCtor() {
value_ = 0;
}

RealNumber::~RealNumber() {
  // @@protoc_insertion_point(destructor:zb.dcts.RealNumber)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RealNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RealNumber::ArenaDtor(void* object) {
  RealNumber* _this = reinterpret_cast< RealNumber* >(object);
  (void)_this;
}
void RealNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RealNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RealNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.RealNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RealNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RealNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.RealNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.RealNumber)
  return target;
}

size_t RealNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.RealNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.RealNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const RealNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RealNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.RealNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.RealNumber)
    MergeFrom(*source);
  }
}

void RealNumber::MergeFrom(const RealNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.RealNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void RealNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.RealNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealNumber::CopyFrom(const RealNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.RealNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealNumber::IsInitialized() const {
  return true;
}

void RealNumber::InternalSwap(RealNumber* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RealNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ComplexNumber::_Internal {
 public:
};

ComplexNumber::ComplexNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.ComplexNumber)
}
ComplexNumber::ComplexNumber(const ComplexNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&real_, &from.real_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&real_)) + sizeof(image_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.ComplexNumber)
}

void ComplexNumber::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&real_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&real_)) + sizeof(image_));
}

ComplexNumber::~ComplexNumber() {
  // @@protoc_insertion_point(destructor:zb.dcts.ComplexNumber)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComplexNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComplexNumber::ArenaDtor(void* object) {
  ComplexNumber* _this = reinterpret_cast< ComplexNumber* >(object);
  (void)_this;
}
void ComplexNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComplexNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComplexNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.ComplexNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&real_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_) -
      reinterpret_cast<char*>(&real_)) + sizeof(image_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double real = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          real_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComplexNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.ComplexNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double real = 1;
  if (!(this->real() <= 0 && this->real() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_real(), target);
  }

  // double image = 2;
  if (!(this->image() <= 0 && this->image() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.ComplexNumber)
  return target;
}

size_t ComplexNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.ComplexNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double real = 1;
  if (!(this->real() <= 0 && this->real() >= 0)) {
    total_size += 1 + 8;
  }

  // double image = 2;
  if (!(this->image() <= 0 && this->image() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComplexNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.ComplexNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComplexNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.ComplexNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.ComplexNumber)
    MergeFrom(*source);
  }
}

void ComplexNumber::MergeFrom(const ComplexNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.ComplexNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.real() <= 0 && from.real() >= 0)) {
    _internal_set_real(from._internal_real());
  }
  if (!(from.image() <= 0 && from.image() >= 0)) {
    _internal_set_image(from._internal_image());
  }
}

void ComplexNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.ComplexNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexNumber::CopyFrom(const ComplexNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.ComplexNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexNumber::IsInitialized() const {
  return true;
}

void ComplexNumber::InternalSwap(ComplexNumber* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexNumber, image_)
      + sizeof(ComplexNumber::image_)
      - PROTOBUF_FIELD_OFFSET(ComplexNumber, real_)>(
          reinterpret_cast<char*>(&real_),
          reinterpret_cast<char*>(&other->real_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatisticVal::_Internal {
 public:
};

StatisticVal::StatisticVal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.StatisticVal)
}
StatisticVal::StatisticVal(const StatisticVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_) -
    reinterpret_cast<char*>(&up_)) + sizeof(mean_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.StatisticVal)
}

void StatisticVal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&up_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mean_) -
    reinterpret_cast<char*>(&up_)) + sizeof(mean_));
}

StatisticVal::~StatisticVal() {
  // @@protoc_insertion_point(destructor:zb.dcts.StatisticVal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatisticVal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatisticVal::ArenaDtor(void* object) {
  StatisticVal* _this = reinterpret_cast< StatisticVal* >(object);
  (void)_this;
}
void StatisticVal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatisticVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatisticVal::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.StatisticVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_) -
      reinterpret_cast<char*>(&up_)) + sizeof(mean_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cur = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cur_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mean = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatisticVal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.StatisticVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double up = 1;
  if (!(this->up() <= 0 && this->up() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_up(), target);
  }

  // double down = 2;
  if (!(this->down() <= 0 && this->down() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_down(), target);
  }

  // double cur = 3;
  if (!(this->cur() <= 0 && this->cur() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cur(), target);
  }

  // double mean = 4;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_mean(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.StatisticVal)
  return target;
}

size_t StatisticVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.StatisticVal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double up = 1;
  if (!(this->up() <= 0 && this->up() >= 0)) {
    total_size += 1 + 8;
  }

  // double down = 2;
  if (!(this->down() <= 0 && this->down() >= 0)) {
    total_size += 1 + 8;
  }

  // double cur = 3;
  if (!(this->cur() <= 0 && this->cur() >= 0)) {
    total_size += 1 + 8;
  }

  // double mean = 4;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.StatisticVal)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatisticVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.StatisticVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.StatisticVal)
    MergeFrom(*source);
  }
}

void StatisticVal::MergeFrom(const StatisticVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.StatisticVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.up() <= 0 && from.up() >= 0)) {
    _internal_set_up(from._internal_up());
  }
  if (!(from.down() <= 0 && from.down() >= 0)) {
    _internal_set_down(from._internal_down());
  }
  if (!(from.cur() <= 0 && from.cur() >= 0)) {
    _internal_set_cur(from._internal_cur());
  }
  if (!(from.mean() <= 0 && from.mean() >= 0)) {
    _internal_set_mean(from._internal_mean());
  }
}

void StatisticVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.StatisticVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticVal::CopyFrom(const StatisticVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.StatisticVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticVal::IsInitialized() const {
  return true;
}

void StatisticVal::InternalSwap(StatisticVal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatisticVal, mean_)
      + sizeof(StatisticVal::mean_)
      - PROTOBUF_FIELD_OFFSET(StatisticVal, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HeartbeatCfg::_Internal {
 public:
};

HeartbeatCfg::HeartbeatCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.HeartbeatCfg)
}
HeartbeatCfg::HeartbeatCfg(const HeartbeatCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heartbeat_interval_, &from.heartbeat_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_ttl_) -
    reinterpret_cast<char*>(&heartbeat_interval_)) + sizeof(heartbeat_ttl_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.HeartbeatCfg)
}

void HeartbeatCfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&heartbeat_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_ttl_) -
    reinterpret_cast<char*>(&heartbeat_interval_)) + sizeof(heartbeat_ttl_));
}

HeartbeatCfg::~HeartbeatCfg() {
  // @@protoc_insertion_point(destructor:zb.dcts.HeartbeatCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartbeatCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartbeatCfg::ArenaDtor(void* object) {
  HeartbeatCfg* _this = reinterpret_cast< HeartbeatCfg* >(object);
  (void)_this;
}
void HeartbeatCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartbeatCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.HeartbeatCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heartbeat_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_ttl_) -
      reinterpret_cast<char*>(&heartbeat_interval_)) + sizeof(heartbeat_ttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 heartbeat_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          heartbeat_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 heartbeat_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          heartbeat_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 heartbeat_ttl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heartbeat_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.HeartbeatCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 heartbeat_interval = 1;
  if (this->heartbeat_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_heartbeat_interval(), target);
  }

  // int32 heartbeat_timeout = 2;
  if (this->heartbeat_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_heartbeat_timeout(), target);
  }

  // int32 heartbeat_ttl = 3;
  if (this->heartbeat_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_heartbeat_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.HeartbeatCfg)
  return target;
}

size_t HeartbeatCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.HeartbeatCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 heartbeat_interval = 1;
  if (this->heartbeat_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heartbeat_interval());
  }

  // int32 heartbeat_timeout = 2;
  if (this->heartbeat_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heartbeat_timeout());
  }

  // int32 heartbeat_ttl = 3;
  if (this->heartbeat_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heartbeat_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.HeartbeatCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartbeatCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.HeartbeatCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.HeartbeatCfg)
    MergeFrom(*source);
  }
}

void HeartbeatCfg::MergeFrom(const HeartbeatCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.HeartbeatCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.heartbeat_interval() != 0) {
    _internal_set_heartbeat_interval(from._internal_heartbeat_interval());
  }
  if (from.heartbeat_timeout() != 0) {
    _internal_set_heartbeat_timeout(from._internal_heartbeat_timeout());
  }
  if (from.heartbeat_ttl() != 0) {
    _internal_set_heartbeat_ttl(from._internal_heartbeat_ttl());
  }
}

void HeartbeatCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.HeartbeatCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatCfg::CopyFrom(const HeartbeatCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.HeartbeatCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatCfg::IsInitialized() const {
  return true;
}

void HeartbeatCfg::InternalSwap(HeartbeatCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartbeatCfg, heartbeat_ttl_)
      + sizeof(HeartbeatCfg::heartbeat_ttl_)
      - PROTOBUF_FIELD_OFFSET(HeartbeatCfg, heartbeat_interval_)>(
          reinterpret_cast<char*>(&heartbeat_interval_),
          reinterpret_cast<char*>(&other->heartbeat_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReconnectionCfg::_Internal {
 public:
};

ReconnectionCfg::ReconnectionCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.ReconnectionCfg)
}
ReconnectionCfg::ReconnectionCfg(const ReconnectionCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reconnect_interval_, &from.reconnect_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&reconnect_interval_max_) -
    reinterpret_cast<char*>(&reconnect_interval_)) + sizeof(reconnect_interval_max_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.ReconnectionCfg)
}

void ReconnectionCfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reconnect_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reconnect_interval_max_) -
    reinterpret_cast<char*>(&reconnect_interval_)) + sizeof(reconnect_interval_max_));
}

ReconnectionCfg::~ReconnectionCfg() {
  // @@protoc_insertion_point(destructor:zb.dcts.ReconnectionCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReconnectionCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReconnectionCfg::ArenaDtor(void* object) {
  ReconnectionCfg* _this = reinterpret_cast< ReconnectionCfg* >(object);
  (void)_this;
}
void ReconnectionCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReconnectionCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReconnectionCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.ReconnectionCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reconnect_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reconnect_interval_max_) -
      reinterpret_cast<char*>(&reconnect_interval_)) + sizeof(reconnect_interval_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconnectionCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reconnect_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reconnect_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reconnect_interval_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reconnect_interval_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReconnectionCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.ReconnectionCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reconnect_interval = 1;
  if (this->reconnect_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reconnect_interval(), target);
  }

  // int32 reconnect_interval_max = 2;
  if (this->reconnect_interval_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reconnect_interval_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.ReconnectionCfg)
  return target;
}

size_t ReconnectionCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.ReconnectionCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 reconnect_interval = 1;
  if (this->reconnect_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reconnect_interval());
  }

  // int32 reconnect_interval_max = 2;
  if (this->reconnect_interval_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reconnect_interval_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReconnectionCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.ReconnectionCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconnectionCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReconnectionCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.ReconnectionCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.ReconnectionCfg)
    MergeFrom(*source);
  }
}

void ReconnectionCfg::MergeFrom(const ReconnectionCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.ReconnectionCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconnect_interval() != 0) {
    _internal_set_reconnect_interval(from._internal_reconnect_interval());
  }
  if (from.reconnect_interval_max() != 0) {
    _internal_set_reconnect_interval_max(from._internal_reconnect_interval_max());
  }
}

void ReconnectionCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.ReconnectionCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectionCfg::CopyFrom(const ReconnectionCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.ReconnectionCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectionCfg::IsInitialized() const {
  return true;
}

void ReconnectionCfg::InternalSwap(ReconnectionCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReconnectionCfg, reconnect_interval_max_)
      + sizeof(ReconnectionCfg::reconnect_interval_max_)
      - PROTOBUF_FIELD_OFFSET(ReconnectionCfg, reconnect_interval_)>(
          reinterpret_cast<char*>(&reconnect_interval_),
          reinterpret_cast<char*>(&other->reconnect_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconnectionCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSendOption::_Internal {
 public:
};

MsgSendOption::MsgSendOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.MsgSendOption)
}
MsgSendOption::MsgSendOption(const MsgSendOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hwm_, &from.hwm_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&hwm_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.MsgSendOption)
}

void MsgSendOption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hwm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&hwm_)) + sizeof(timeout_));
}

MsgSendOption::~MsgSendOption() {
  // @@protoc_insertion_point(destructor:zb.dcts.MsgSendOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSendOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgSendOption::ArenaDtor(void* object) {
  MsgSendOption* _this = reinterpret_cast< MsgSendOption* >(object);
  (void)_this;
}
void MsgSendOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSendOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgSendOption::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.MsgSendOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hwm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&hwm_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSendOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 hwm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hwm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 linger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          linger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSendOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.MsgSendOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hwm = 1;
  if (this->hwm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hwm(), target);
  }

  // int32 linger = 2;
  if (this->linger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_linger(), target);
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.MsgSendOption)
  return target;
}

size_t MsgSendOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.MsgSendOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hwm = 1;
  if (this->hwm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hwm());
  }

  // int32 linger = 2;
  if (this->linger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_linger());
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSendOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.MsgSendOption)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSendOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSendOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.MsgSendOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.MsgSendOption)
    MergeFrom(*source);
  }
}

void MsgSendOption::MergeFrom(const MsgSendOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.MsgSendOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hwm() != 0) {
    _internal_set_hwm(from._internal_hwm());
  }
  if (from.linger() != 0) {
    _internal_set_linger(from._internal_linger());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void MsgSendOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.MsgSendOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendOption::CopyFrom(const MsgSendOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.MsgSendOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendOption::IsInitialized() const {
  return true;
}

void MsgSendOption::InternalSwap(MsgSendOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSendOption, timeout_)
      + sizeof(MsgSendOption::timeout_)
      - PROTOBUF_FIELD_OFFSET(MsgSendOption, hwm_)>(
          reinterpret_cast<char*>(&hwm_),
          reinterpret_cast<char*>(&other->hwm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSendOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IPv4Address::_Internal {
 public:
};

IPv4Address::IPv4Address(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.IPv4Address)
}
IPv4Address::IPv4Address(const IPv4Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.IPv4Address)
}

void IPv4Address::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0;
}

IPv4Address::~IPv4Address() {
  // @@protoc_insertion_point(destructor:zb.dcts.IPv4Address)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPv4Address::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPv4Address::ArenaDtor(void* object) {
  IPv4Address* _this = reinterpret_cast< IPv4Address* >(object);
  (void)_this;
}
void IPv4Address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPv4Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPv4Address::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.IPv4Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPv4Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.IPv4Address.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPv4Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.IPv4Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.IPv4Address.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.IPv4Address)
  return target;
}

size_t IPv4Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.IPv4Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPv4Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.IPv4Address)
  GOOGLE_DCHECK_NE(&from, this);
  const IPv4Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPv4Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.IPv4Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.IPv4Address)
    MergeFrom(*source);
  }
}

void IPv4Address::MergeFrom(const IPv4Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.IPv4Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void IPv4Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.IPv4Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPv4Address::CopyFrom(const IPv4Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.IPv4Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv4Address::IsInitialized() const {
  return true;
}

void IPv4Address::InternalSwap(IPv4Address* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv4Address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ZeromqLinkCfg::_Internal {
 public:
  static const ::zb::dcts::IPv4Address& address(const ZeromqLinkCfg* msg);
  static const ::zb::dcts::HeartbeatCfg& heartbeat_cfg(const ZeromqLinkCfg* msg);
  static const ::zb::dcts::ReconnectionCfg& reconnect_cfg(const ZeromqLinkCfg* msg);
  static const ::zb::dcts::MsgSendOption& msg_send_cfg(const ZeromqLinkCfg* msg);
};

const ::zb::dcts::IPv4Address&
ZeromqLinkCfg::_Internal::address(const ZeromqLinkCfg* msg) {
  return *msg->address_;
}
const ::zb::dcts::HeartbeatCfg&
ZeromqLinkCfg::_Internal::heartbeat_cfg(const ZeromqLinkCfg* msg) {
  return *msg->heartbeat_cfg_;
}
const ::zb::dcts::ReconnectionCfg&
ZeromqLinkCfg::_Internal::reconnect_cfg(const ZeromqLinkCfg* msg) {
  return *msg->reconnect_cfg_;
}
const ::zb::dcts::MsgSendOption&
ZeromqLinkCfg::_Internal::msg_send_cfg(const ZeromqLinkCfg* msg) {
  return *msg->msg_send_cfg_;
}
ZeromqLinkCfg::ZeromqLinkCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.ZeromqLinkCfg)
}
ZeromqLinkCfg::ZeromqLinkCfg(const ZeromqLinkCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_link_name().empty()) {
    link_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link_name(), 
      GetArena());
  }
  if (from._internal_has_address()) {
    address_ = new ::zb::dcts::IPv4Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_heartbeat_cfg()) {
    heartbeat_cfg_ = new ::zb::dcts::HeartbeatCfg(*from.heartbeat_cfg_);
  } else {
    heartbeat_cfg_ = nullptr;
  }
  if (from._internal_has_reconnect_cfg()) {
    reconnect_cfg_ = new ::zb::dcts::ReconnectionCfg(*from.reconnect_cfg_);
  } else {
    reconnect_cfg_ = nullptr;
  }
  if (from._internal_has_msg_send_cfg()) {
    msg_send_cfg_ = new ::zb::dcts::MsgSendOption(*from.msg_send_cfg_);
  } else {
    msg_send_cfg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.ZeromqLinkCfg)
}

void ZeromqLinkCfg::SharedCtor() {
link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_send_cfg_) -
    reinterpret_cast<char*>(&address_)) + sizeof(msg_send_cfg_));
}

ZeromqLinkCfg::~ZeromqLinkCfg() {
  // @@protoc_insertion_point(destructor:zb.dcts.ZeromqLinkCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZeromqLinkCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  link_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete heartbeat_cfg_;
  if (this != internal_default_instance()) delete reconnect_cfg_;
  if (this != internal_default_instance()) delete msg_send_cfg_;
}

void ZeromqLinkCfg::ArenaDtor(void* object) {
  ZeromqLinkCfg* _this = reinterpret_cast< ZeromqLinkCfg* >(object);
  (void)_this;
}
void ZeromqLinkCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZeromqLinkCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZeromqLinkCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.ZeromqLinkCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_name_.ClearToEmpty();
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArena() == nullptr && heartbeat_cfg_ != nullptr) {
    delete heartbeat_cfg_;
  }
  heartbeat_cfg_ = nullptr;
  if (GetArena() == nullptr && reconnect_cfg_ != nullptr) {
    delete reconnect_cfg_;
  }
  reconnect_cfg_ = nullptr;
  if (GetArena() == nullptr && msg_send_cfg_ != nullptr) {
    delete msg_send_cfg_;
  }
  msg_send_cfg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZeromqLinkCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.IPv4Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string link_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_link_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.ZeromqLinkCfg.link_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.HeartbeatCfg heartbeat_cfg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ReconnectionCfg reconnect_cfg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnect_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.MsgSendOption msg_send_cfg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_send_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZeromqLinkCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.ZeromqLinkCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.IPv4Address address = 1;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::address(this), target, stream);
  }

  // string link_name = 2;
  if (this->link_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link_name().data(), static_cast<int>(this->_internal_link_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.ZeromqLinkCfg.link_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_link_name(), target);
  }

  // .zb.dcts.HeartbeatCfg heartbeat_cfg = 4;
  if (this->has_heartbeat_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::heartbeat_cfg(this), target, stream);
  }

  // .zb.dcts.ReconnectionCfg reconnect_cfg = 5;
  if (this->has_reconnect_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reconnect_cfg(this), target, stream);
  }

  // .zb.dcts.MsgSendOption msg_send_cfg = 6;
  if (this->has_msg_send_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::msg_send_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.ZeromqLinkCfg)
  return target;
}

size_t ZeromqLinkCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.ZeromqLinkCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string link_name = 2;
  if (this->link_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link_name());
  }

  // .zb.dcts.IPv4Address address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .zb.dcts.HeartbeatCfg heartbeat_cfg = 4;
  if (this->has_heartbeat_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartbeat_cfg_);
  }

  // .zb.dcts.ReconnectionCfg reconnect_cfg = 5;
  if (this->has_reconnect_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reconnect_cfg_);
  }

  // .zb.dcts.MsgSendOption msg_send_cfg = 6;
  if (this->has_msg_send_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_send_cfg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZeromqLinkCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.ZeromqLinkCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const ZeromqLinkCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZeromqLinkCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.ZeromqLinkCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.ZeromqLinkCfg)
    MergeFrom(*source);
  }
}

void ZeromqLinkCfg::MergeFrom(const ZeromqLinkCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.ZeromqLinkCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.link_name().size() > 0) {
    _internal_set_link_name(from._internal_link_name());
  }
  if (from.has_address()) {
    _internal_mutable_address()->::zb::dcts::IPv4Address::MergeFrom(from._internal_address());
  }
  if (from.has_heartbeat_cfg()) {
    _internal_mutable_heartbeat_cfg()->::zb::dcts::HeartbeatCfg::MergeFrom(from._internal_heartbeat_cfg());
  }
  if (from.has_reconnect_cfg()) {
    _internal_mutable_reconnect_cfg()->::zb::dcts::ReconnectionCfg::MergeFrom(from._internal_reconnect_cfg());
  }
  if (from.has_msg_send_cfg()) {
    _internal_mutable_msg_send_cfg()->::zb::dcts::MsgSendOption::MergeFrom(from._internal_msg_send_cfg());
  }
}

void ZeromqLinkCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.ZeromqLinkCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZeromqLinkCfg::CopyFrom(const ZeromqLinkCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.ZeromqLinkCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeromqLinkCfg::IsInitialized() const {
  return true;
}

void ZeromqLinkCfg::InternalSwap(ZeromqLinkCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  link_name_.Swap(&other->link_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZeromqLinkCfg, msg_send_cfg_)
      + sizeof(ZeromqLinkCfg::msg_send_cfg_)
      - PROTOBUF_FIELD_OFFSET(ZeromqLinkCfg, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeromqLinkCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimerParam::_Internal {
 public:
};

TimerParam::TimerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.TimerParam)
}
TimerParam::TimerParam(const TimerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interval_in_ms_, &from.interval_in_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&interval_in_ms_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.TimerParam)
}

void TimerParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interval_in_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&interval_in_ms_)) + sizeof(times_));
}

TimerParam::~TimerParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.TimerParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimerParam::ArenaDtor(void* object) {
  TimerParam* _this = reinterpret_cast< TimerParam* >(object);
  (void)_this;
}
void TimerParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.TimerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interval_in_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&interval_in_ms_)) + sizeof(times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 interval_in_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          interval_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimerParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.TimerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 interval_in_ms = 1;
  if (this->interval_in_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_interval_in_ms(), target);
  }

  // int32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.TimerParam)
  return target;
}

size_t TimerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.TimerParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 interval_in_ms = 1;
  if (this->interval_in_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_interval_in_ms());
  }

  // int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.TimerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TimerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.TimerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.TimerParam)
    MergeFrom(*source);
  }
}

void TimerParam::MergeFrom(const TimerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.TimerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interval_in_ms() != 0) {
    _internal_set_interval_in_ms(from._internal_interval_in_ms());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void TimerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.TimerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerParam::CopyFrom(const TimerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.TimerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerParam::IsInitialized() const {
  return true;
}

void TimerParam::InternalSwap(TimerParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimerParam, times_)
      + sizeof(TimerParam::times_)
      - PROTOBUF_FIELD_OFFSET(TimerParam, interval_in_ms_)>(
          reinterpret_cast<char*>(&interval_in_ms_),
          reinterpret_cast<char*>(&other->interval_in_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::TaskId* Arena::CreateMaybeMessage< ::zb::dcts::TaskId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::TaskId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Timestamp* Arena::CreateMaybeMessage< ::zb::dcts::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::TimeSpan* Arena::CreateMaybeMessage< ::zb::dcts::TimeSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::TimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Position* Arena::CreateMaybeMessage< ::zb::dcts::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Posture* Arena::CreateMaybeMessage< ::zb::dcts::Posture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Posture >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Direction* Arena::CreateMaybeMessage< ::zb::dcts::Direction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::DRange* Arena::CreateMaybeMessage< ::zb::dcts::DRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::DRange >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::IRange* Arena::CreateMaybeMessage< ::zb::dcts::IRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::IRange >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Physical* Arena::CreateMaybeMessage< ::zb::dcts::Physical >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Physical >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Integer* Arena::CreateMaybeMessage< ::zb::dcts::Integer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Integer >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Boolean* Arena::CreateMaybeMessage< ::zb::dcts::Boolean >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Boolean >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::RealNumber* Arena::CreateMaybeMessage< ::zb::dcts::RealNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::RealNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::ComplexNumber* Arena::CreateMaybeMessage< ::zb::dcts::ComplexNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::ComplexNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::StatisticVal* Arena::CreateMaybeMessage< ::zb::dcts::StatisticVal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::StatisticVal >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::HeartbeatCfg* Arena::CreateMaybeMessage< ::zb::dcts::HeartbeatCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::HeartbeatCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::ReconnectionCfg* Arena::CreateMaybeMessage< ::zb::dcts::ReconnectionCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::ReconnectionCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::MsgSendOption* Arena::CreateMaybeMessage< ::zb::dcts::MsgSendOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::MsgSendOption >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::IPv4Address* Arena::CreateMaybeMessage< ::zb::dcts::IPv4Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::IPv4Address >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::ZeromqLinkCfg* Arena::CreateMaybeMessage< ::zb::dcts::ZeromqLinkCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::ZeromqLinkCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::TimerParam* Arena::CreateMaybeMessage< ::zb::dcts::TimerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::TimerParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
