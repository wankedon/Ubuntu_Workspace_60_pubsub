// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/spectrum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fspectrum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fspectrum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/node.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fspectrum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fspectrum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fspectrum_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fspectrum_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace spectrum {
class BaseBand;
struct BaseBandDefaultTypeInternal;
extern BaseBandDefaultTypeInternal _BaseBand_default_instance_;
class DataHoldRequest;
struct DataHoldRequestDefaultTypeInternal;
extern DataHoldRequestDefaultTypeInternal _DataHoldRequest_default_instance_;
class FrequencyBand;
struct FrequencyBandDefaultTypeInternal;
extern FrequencyBandDefaultTypeInternal _FrequencyBand_default_instance_;
class FrequencyPos;
struct FrequencyPosDefaultTypeInternal;
extern FrequencyPosDefaultTypeInternal _FrequencyPos_default_instance_;
class FrequencyRange;
struct FrequencyRangeDefaultTypeInternal;
extern FrequencyRangeDefaultTypeInternal _FrequencyRange_default_instance_;
class FrequencySegment;
struct FrequencySegmentDefaultTypeInternal;
extern FrequencySegmentDefaultTypeInternal _FrequencySegment_default_instance_;
class FrequencySpan;
struct FrequencySpanDefaultTypeInternal;
extern FrequencySpanDefaultTypeInternal _FrequencySpan_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class SignalBand;
struct SignalBandDefaultTypeInternal;
extern SignalBandDefaultTypeInternal _SignalBand_default_instance_;
class View;
struct ViewDefaultTypeInternal;
extern ViewDefaultTypeInternal _View_default_instance_;
class ZoomInRequest;
struct ZoomInRequestDefaultTypeInternal;
extern ZoomInRequestDefaultTypeInternal _ZoomInRequest_default_instance_;
}  // namespace spectrum
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::spectrum::BaseBand* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::BaseBand>(Arena*);
template<> ::zb::dcts::node::spectrum::DataHoldRequest* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::DataHoldRequest>(Arena*);
template<> ::zb::dcts::node::spectrum::FrequencyBand* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencyBand>(Arena*);
template<> ::zb::dcts::node::spectrum::FrequencyPos* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencyPos>(Arena*);
template<> ::zb::dcts::node::spectrum::FrequencyRange* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencyRange>(Arena*);
template<> ::zb::dcts::node::spectrum::FrequencySegment* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySegment>(Arena*);
template<> ::zb::dcts::node::spectrum::FrequencySpan* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(Arena*);
template<> ::zb::dcts::node::spectrum::Header* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::Header>(Arena*);
template<> ::zb::dcts::node::spectrum::SignalBand* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::SignalBand>(Arena*);
template<> ::zb::dcts::node::spectrum::View* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::View>(Arena*);
template<> ::zb::dcts::node::spectrum::ZoomInRequest* Arena::CreateMaybeMessage<::zb::dcts::node::spectrum::ZoomInRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace spectrum {

enum DataHoldType : int {
  NO_HOLD = 0,
  MAX_HOLD = 1,
  MIN_HOLD = 2,
  RMS_HOLD = 3,
  AVG_HOLD = 4,
  DataHoldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataHoldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataHoldType_IsValid(int value);
constexpr DataHoldType DataHoldType_MIN = NO_HOLD;
constexpr DataHoldType DataHoldType_MAX = AVG_HOLD;
constexpr int DataHoldType_ARRAYSIZE = DataHoldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataHoldType_descriptor();
template<typename T>
inline const std::string& DataHoldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataHoldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataHoldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataHoldType_descriptor(), enum_t_value);
}
inline bool DataHoldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataHoldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataHoldType>(
    DataHoldType_descriptor(), name, value);
}
// ===================================================================

class FrequencySpan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.FrequencySpan) */ {
 public:
  inline FrequencySpan() : FrequencySpan(nullptr) {}
  virtual ~FrequencySpan();
  explicit constexpr FrequencySpan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrequencySpan(const FrequencySpan& from);
  FrequencySpan(FrequencySpan&& from) noexcept
    : FrequencySpan() {
    *this = ::std::move(from);
  }

  inline FrequencySpan& operator=(const FrequencySpan& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencySpan& operator=(FrequencySpan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencySpan& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrequencySpan* internal_default_instance() {
    return reinterpret_cast<const FrequencySpan*>(
               &_FrequencySpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrequencySpan& a, FrequencySpan& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencySpan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencySpan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencySpan* New() const final {
    return CreateMaybeMessage<FrequencySpan>(nullptr);
  }

  FrequencySpan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencySpan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencySpan& from);
  void MergeFrom(const FrequencySpan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencySpan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.FrequencySpan";
  }
  protected:
  explicit FrequencySpan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFreqFieldNumber = 1,
    kStopFreqFieldNumber = 2,
  };
  // double start_freq = 1;
  void clear_start_freq();
  double start_freq() const;
  void set_start_freq(double value);
  private:
  double _internal_start_freq() const;
  void _internal_set_start_freq(double value);
  public:

  // double stop_freq = 2;
  void clear_stop_freq();
  double stop_freq() const;
  void set_stop_freq(double value);
  private:
  double _internal_stop_freq() const;
  void _internal_set_stop_freq(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.FrequencySpan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double start_freq_;
  double stop_freq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class FrequencySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.FrequencySegment) */ {
 public:
  inline FrequencySegment() : FrequencySegment(nullptr) {}
  virtual ~FrequencySegment();
  explicit constexpr FrequencySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrequencySegment(const FrequencySegment& from);
  FrequencySegment(FrequencySegment&& from) noexcept
    : FrequencySegment() {
    *this = ::std::move(from);
  }

  inline FrequencySegment& operator=(const FrequencySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencySegment& operator=(FrequencySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrequencySegment* internal_default_instance() {
    return reinterpret_cast<const FrequencySegment*>(
               &_FrequencySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrequencySegment& a, FrequencySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencySegment* New() const final {
    return CreateMaybeMessage<FrequencySegment>(nullptr);
  }

  FrequencySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencySegment& from);
  void MergeFrom(const FrequencySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.FrequencySegment";
  }
  protected:
  explicit FrequencySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreqSpanFieldNumber = 1,
    kPointsFieldNumber = 2,
  };
  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // int32 points = 2;
  void clear_points();
  ::PROTOBUF_NAMESPACE_ID::int32 points() const;
  void set_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points() const;
  void _internal_set_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.FrequencySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::spectrum::FrequencySpan* freq_span_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class FrequencyPos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.FrequencyPos) */ {
 public:
  inline FrequencyPos() : FrequencyPos(nullptr) {}
  virtual ~FrequencyPos();
  explicit constexpr FrequencyPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrequencyPos(const FrequencyPos& from);
  FrequencyPos(FrequencyPos&& from) noexcept
    : FrequencyPos() {
    *this = ::std::move(from);
  }

  inline FrequencyPos& operator=(const FrequencyPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencyPos& operator=(FrequencyPos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencyPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrequencyPos* internal_default_instance() {
    return reinterpret_cast<const FrequencyPos*>(
               &_FrequencyPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrequencyPos& a, FrequencyPos& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencyPos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencyPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencyPos* New() const final {
    return CreateMaybeMessage<FrequencyPos>(nullptr);
  }

  FrequencyPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencyPos& from);
  void MergeFrom(const FrequencyPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.FrequencyPos";
  }
  protected:
  explicit FrequencyPos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIdxFieldNumber = 1,
    kSegInternalOffsetFieldNumber = 2,
  };
  // int32 segment_idx = 1;
  void clear_segment_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 segment_idx() const;
  void set_segment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_segment_idx() const;
  void _internal_set_segment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seg_internal_offset = 2;
  void clear_seg_internal_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 seg_internal_offset() const;
  void set_seg_internal_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seg_internal_offset() const;
  void _internal_set_seg_internal_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.FrequencyPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 segment_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 seg_internal_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class FrequencyBand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.FrequencyBand) */ {
 public:
  inline FrequencyBand() : FrequencyBand(nullptr) {}
  virtual ~FrequencyBand();
  explicit constexpr FrequencyBand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrequencyBand(const FrequencyBand& from);
  FrequencyBand(FrequencyBand&& from) noexcept
    : FrequencyBand() {
    *this = ::std::move(from);
  }

  inline FrequencyBand& operator=(const FrequencyBand& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencyBand& operator=(FrequencyBand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencyBand& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrequencyBand* internal_default_instance() {
    return reinterpret_cast<const FrequencyBand*>(
               &_FrequencyBand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrequencyBand& a, FrequencyBand& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencyBand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencyBand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencyBand* New() const final {
    return CreateMaybeMessage<FrequencyBand>(nullptr);
  }

  FrequencyBand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyBand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencyBand& from);
  void MergeFrom(const FrequencyBand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyBand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.FrequencyBand";
  }
  protected:
  explicit FrequencyBand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .zb.dcts.node.spectrum.FrequencySegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::zb::dcts::node::spectrum::FrequencySegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::FrequencySegment >*
      mutable_segments();
  private:
  const ::zb::dcts::node::spectrum::FrequencySegment& _internal_segments(int index) const;
  ::zb::dcts::node::spectrum::FrequencySegment* _internal_add_segments();
  public:
  const ::zb::dcts::node::spectrum::FrequencySegment& segments(int index) const;
  ::zb::dcts::node::spectrum::FrequencySegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::FrequencySegment >&
      segments() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.FrequencyBand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::FrequencySegment > segments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class FrequencyRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.FrequencyRange) */ {
 public:
  inline FrequencyRange() : FrequencyRange(nullptr) {}
  virtual ~FrequencyRange();
  explicit constexpr FrequencyRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrequencyRange(const FrequencyRange& from);
  FrequencyRange(FrequencyRange&& from) noexcept
    : FrequencyRange() {
    *this = ::std::move(from);
  }

  inline FrequencyRange& operator=(const FrequencyRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencyRange& operator=(FrequencyRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencyRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrequencyRange* internal_default_instance() {
    return reinterpret_cast<const FrequencyRange*>(
               &_FrequencyRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FrequencyRange& a, FrequencyRange& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencyRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencyRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencyRange* New() const final {
    return CreateMaybeMessage<FrequencyRange>(nullptr);
  }

  FrequencyRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencyRange& from);
  void MergeFrom(const FrequencyRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.FrequencyRange";
  }
  protected:
  explicit FrequencyRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPosFieldNumber = 1,
    kStopPosFieldNumber = 2,
  };
  // .zb.dcts.node.spectrum.FrequencyPos start_pos = 1;
  bool has_start_pos() const;
  private:
  bool _internal_has_start_pos() const;
  public:
  void clear_start_pos();
  const ::zb::dcts::node::spectrum::FrequencyPos& start_pos() const;
  ::zb::dcts::node::spectrum::FrequencyPos* release_start_pos();
  ::zb::dcts::node::spectrum::FrequencyPos* mutable_start_pos();
  void set_allocated_start_pos(::zb::dcts::node::spectrum::FrequencyPos* start_pos);
  private:
  const ::zb::dcts::node::spectrum::FrequencyPos& _internal_start_pos() const;
  ::zb::dcts::node::spectrum::FrequencyPos* _internal_mutable_start_pos();
  public:
  void unsafe_arena_set_allocated_start_pos(
      ::zb::dcts::node::spectrum::FrequencyPos* start_pos);
  ::zb::dcts::node::spectrum::FrequencyPos* unsafe_arena_release_start_pos();

  // .zb.dcts.node.spectrum.FrequencyPos stop_pos = 2;
  bool has_stop_pos() const;
  private:
  bool _internal_has_stop_pos() const;
  public:
  void clear_stop_pos();
  const ::zb::dcts::node::spectrum::FrequencyPos& stop_pos() const;
  ::zb::dcts::node::spectrum::FrequencyPos* release_stop_pos();
  ::zb::dcts::node::spectrum::FrequencyPos* mutable_stop_pos();
  void set_allocated_stop_pos(::zb::dcts::node::spectrum::FrequencyPos* stop_pos);
  private:
  const ::zb::dcts::node::spectrum::FrequencyPos& _internal_stop_pos() const;
  ::zb::dcts::node::spectrum::FrequencyPos* _internal_mutable_stop_pos();
  public:
  void unsafe_arena_set_allocated_stop_pos(
      ::zb::dcts::node::spectrum::FrequencyPos* stop_pos);
  ::zb::dcts::node::spectrum::FrequencyPos* unsafe_arena_release_stop_pos();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.FrequencyRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::spectrum::FrequencyPos* start_pos_;
  ::zb::dcts::node::spectrum::FrequencyPos* stop_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class SignalBand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.SignalBand) */ {
 public:
  inline SignalBand() : SignalBand(nullptr) {}
  virtual ~SignalBand();
  explicit constexpr SignalBand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalBand(const SignalBand& from);
  SignalBand(SignalBand&& from) noexcept
    : SignalBand() {
    *this = ::std::move(from);
  }

  inline SignalBand& operator=(const SignalBand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalBand& operator=(SignalBand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalBand& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalBand* internal_default_instance() {
    return reinterpret_cast<const SignalBand*>(
               &_SignalBand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SignalBand& a, SignalBand& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalBand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalBand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalBand* New() const final {
    return CreateMaybeMessage<SignalBand>(nullptr);
  }

  SignalBand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalBand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalBand& from);
  void MergeFrom(const SignalBand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalBand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.SignalBand";
  }
  protected:
  explicit SignalBand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFrequencyFieldNumber = 1,
    kBandWidthFieldNumber = 2,
  };
  // double center_frequency = 1;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // double band_width = 2;
  void clear_band_width();
  double band_width() const;
  void set_band_width(double value);
  private:
  double _internal_band_width() const;
  void _internal_set_band_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.SignalBand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double center_frequency_;
  double band_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class BaseBand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.BaseBand) */ {
 public:
  inline BaseBand() : BaseBand(nullptr) {}
  virtual ~BaseBand();
  explicit constexpr BaseBand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseBand(const BaseBand& from);
  BaseBand(BaseBand&& from) noexcept
    : BaseBand() {
    *this = ::std::move(from);
  }

  inline BaseBand& operator=(const BaseBand& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseBand& operator=(BaseBand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseBand& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseBand* internal_default_instance() {
    return reinterpret_cast<const BaseBand*>(
               &_BaseBand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BaseBand& a, BaseBand& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseBand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseBand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseBand* New() const final {
    return CreateMaybeMessage<BaseBand>(nullptr);
  }

  BaseBand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseBand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseBand& from);
  void MergeFrom(const BaseBand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseBand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.BaseBand";
  }
  protected:
  explicit BaseBand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFrequencyFieldNumber = 1,
    kSampleRateFieldNumber = 2,
  };
  // double center_frequency = 1;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // double sample_rate = 2;
  void clear_sample_rate();
  double sample_rate() const;
  void set_sample_rate(double value);
  private:
  double _internal_sample_rate() const;
  void _internal_set_sample_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.BaseBand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double center_frequency_;
  double sample_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class DataHoldRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.DataHoldRequest) */ {
 public:
  inline DataHoldRequest() : DataHoldRequest(nullptr) {}
  virtual ~DataHoldRequest();
  explicit constexpr DataHoldRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataHoldRequest(const DataHoldRequest& from);
  DataHoldRequest(DataHoldRequest&& from) noexcept
    : DataHoldRequest() {
    *this = ::std::move(from);
  }

  inline DataHoldRequest& operator=(const DataHoldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataHoldRequest& operator=(DataHoldRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataHoldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataHoldRequest* internal_default_instance() {
    return reinterpret_cast<const DataHoldRequest*>(
               &_DataHoldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DataHoldRequest& a, DataHoldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataHoldRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataHoldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataHoldRequest* New() const final {
    return CreateMaybeMessage<DataHoldRequest>(nullptr);
  }

  DataHoldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataHoldRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataHoldRequest& from);
  void MergeFrom(const DataHoldRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataHoldRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.DataHoldRequest";
  }
  protected:
  explicit DataHoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskAccountFieldNumber = 1,
    kDataHoldTypeFieldNumber = 2,
  };
  // .zb.dcts.node.TaskAccount task_account = 1;
  bool has_task_account() const;
  private:
  bool _internal_has_task_account() const;
  public:
  void clear_task_account();
  const ::zb::dcts::node::TaskAccount& task_account() const;
  ::zb::dcts::node::TaskAccount* release_task_account();
  ::zb::dcts::node::TaskAccount* mutable_task_account();
  void set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account);
  private:
  const ::zb::dcts::node::TaskAccount& _internal_task_account() const;
  ::zb::dcts::node::TaskAccount* _internal_mutable_task_account();
  public:
  void unsafe_arena_set_allocated_task_account(
      ::zb::dcts::node::TaskAccount* task_account);
  ::zb::dcts::node::TaskAccount* unsafe_arena_release_task_account();

  // .zb.dcts.node.spectrum.DataHoldType data_hold_type = 2;
  void clear_data_hold_type();
  ::zb::dcts::node::spectrum::DataHoldType data_hold_type() const;
  void set_data_hold_type(::zb::dcts::node::spectrum::DataHoldType value);
  private:
  ::zb::dcts::node::spectrum::DataHoldType _internal_data_hold_type() const;
  void _internal_set_data_hold_type(::zb::dcts::node::spectrum::DataHoldType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.DataHoldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::TaskAccount* task_account_;
  int data_hold_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class ZoomInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.ZoomInRequest) */ {
 public:
  inline ZoomInRequest() : ZoomInRequest(nullptr) {}
  virtual ~ZoomInRequest();
  explicit constexpr ZoomInRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomInRequest(const ZoomInRequest& from);
  ZoomInRequest(ZoomInRequest&& from) noexcept
    : ZoomInRequest() {
    *this = ::std::move(from);
  }

  inline ZoomInRequest& operator=(const ZoomInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomInRequest& operator=(ZoomInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZoomInRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomInRequest* internal_default_instance() {
    return reinterpret_cast<const ZoomInRequest*>(
               &_ZoomInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ZoomInRequest& a, ZoomInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZoomInRequest* New() const final {
    return CreateMaybeMessage<ZoomInRequest>(nullptr);
  }

  ZoomInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZoomInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZoomInRequest& from);
  void MergeFrom(const ZoomInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.ZoomInRequest";
  }
  protected:
  explicit ZoomInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskAccountFieldNumber = 1,
    kZoomInPartFieldNumber = 2,
  };
  // .zb.dcts.node.TaskAccount task_account = 1;
  bool has_task_account() const;
  private:
  bool _internal_has_task_account() const;
  public:
  void clear_task_account();
  const ::zb::dcts::node::TaskAccount& task_account() const;
  ::zb::dcts::node::TaskAccount* release_task_account();
  ::zb::dcts::node::TaskAccount* mutable_task_account();
  void set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account);
  private:
  const ::zb::dcts::node::TaskAccount& _internal_task_account() const;
  ::zb::dcts::node::TaskAccount* _internal_mutable_task_account();
  public:
  void unsafe_arena_set_allocated_task_account(
      ::zb::dcts::node::TaskAccount* task_account);
  ::zb::dcts::node::TaskAccount* unsafe_arena_release_task_account();

  // .zb.dcts.node.spectrum.FrequencySegment zoom_in_part = 2;
  bool has_zoom_in_part() const;
  private:
  bool _internal_has_zoom_in_part() const;
  public:
  void clear_zoom_in_part();
  const ::zb::dcts::node::spectrum::FrequencySegment& zoom_in_part() const;
  ::zb::dcts::node::spectrum::FrequencySegment* release_zoom_in_part();
  ::zb::dcts::node::spectrum::FrequencySegment* mutable_zoom_in_part();
  void set_allocated_zoom_in_part(::zb::dcts::node::spectrum::FrequencySegment* zoom_in_part);
  private:
  const ::zb::dcts::node::spectrum::FrequencySegment& _internal_zoom_in_part() const;
  ::zb::dcts::node::spectrum::FrequencySegment* _internal_mutable_zoom_in_part();
  public:
  void unsafe_arena_set_allocated_zoom_in_part(
      ::zb::dcts::node::spectrum::FrequencySegment* zoom_in_part);
  ::zb::dcts::node::spectrum::FrequencySegment* unsafe_arena_release_zoom_in_part();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.ZoomInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::TaskAccount* task_account_;
  ::zb::dcts::node::spectrum::FrequencySegment* zoom_in_part_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class View PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.View) */ {
 public:
  inline View() : View(nullptr) {}
  virtual ~View();
  explicit constexpr View(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  View(const View& from);
  View(View&& from) noexcept
    : View() {
    *this = ::std::move(from);
  }

  inline View& operator=(const View& from) {
    CopyFrom(from);
    return *this;
  }
  inline View& operator=(View&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const View& default_instance() {
    return *internal_default_instance();
  }
  static inline const View* internal_default_instance() {
    return reinterpret_cast<const View*>(
               &_View_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(View& a, View& b) {
    a.Swap(&b);
  }
  inline void Swap(View* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(View* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline View* New() const final {
    return CreateMaybeMessage<View>(nullptr);
  }

  View* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<View>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const View& from);
  void MergeFrom(const View& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(View* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.View";
  }
  protected:
  explicit View(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurTraceFieldNumber = 2,
    kMinholdTraceFieldNumber = 3,
    kMaxholdTraceFieldNumber = 4,
    kOverThresholdHitsFieldNumber = 5,
    kFreqSpanFieldNumber = 1,
  };
  // repeated float cur_trace = 2;
  int cur_trace_size() const;
  private:
  int _internal_cur_trace_size() const;
  public:
  void clear_cur_trace();
  private:
  float _internal_cur_trace(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cur_trace() const;
  void _internal_add_cur_trace(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cur_trace();
  public:
  float cur_trace(int index) const;
  void set_cur_trace(int index, float value);
  void add_cur_trace(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cur_trace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cur_trace();

  // repeated float minhold_trace = 3;
  int minhold_trace_size() const;
  private:
  int _internal_minhold_trace_size() const;
  public:
  void clear_minhold_trace();
  private:
  float _internal_minhold_trace(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_minhold_trace() const;
  void _internal_add_minhold_trace(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_minhold_trace();
  public:
  float minhold_trace(int index) const;
  void set_minhold_trace(int index, float value);
  void add_minhold_trace(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      minhold_trace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_minhold_trace();

  // repeated float maxhold_trace = 4;
  int maxhold_trace_size() const;
  private:
  int _internal_maxhold_trace_size() const;
  public:
  void clear_maxhold_trace();
  private:
  float _internal_maxhold_trace(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_maxhold_trace() const;
  void _internal_add_maxhold_trace(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_maxhold_trace();
  public:
  float maxhold_trace(int index) const;
  void set_maxhold_trace(int index, float value);
  void add_maxhold_trace(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      maxhold_trace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_maxhold_trace();

  // repeated float over_threshold_hits = 5;
  int over_threshold_hits_size() const;
  private:
  int _internal_over_threshold_hits_size() const;
  public:
  void clear_over_threshold_hits();
  private:
  float _internal_over_threshold_hits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_over_threshold_hits() const;
  void _internal_add_over_threshold_hits(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_over_threshold_hits();
  public:
  float over_threshold_hits(int index) const;
  void set_over_threshold_hits(int index, float value);
  void add_over_threshold_hits(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      over_threshold_hits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_over_threshold_hits();

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.View)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cur_trace_;
  mutable std::atomic<int> _cur_trace_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > minhold_trace_;
  mutable std::atomic<int> _minhold_trace_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > maxhold_trace_;
  mutable std::atomic<int> _maxhold_trace_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > over_threshold_hits_;
  mutable std::atomic<int> _over_threshold_hits_cached_byte_size_;
  ::zb::dcts::node::spectrum::FrequencySpan* freq_span_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.spectrum.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.spectrum.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fspectrum_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 2,
    kResultFromFieldNumber = 1,
    kTimeSpanFieldNumber = 5,
    kDevicePositionFieldNumber = 6,
    kSequenceNumberFieldNumber = 3,
    kSweepCountFieldNumber = 4,
  };
  // string record_id = 2;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.node.NodeDevice result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::node::NodeDevice& result_from() const;
  ::zb::dcts::node::NodeDevice* release_result_from();
  ::zb::dcts::node::NodeDevice* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::node::NodeDevice* result_from);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_result_from() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::node::NodeDevice* result_from);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_result_from();

  // .zb.dcts.TimeSpan time_span = 5;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.Position device_position = 6;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // uint32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sweep_count = 4;
  void clear_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count() const;
  void set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweep_count() const;
  void _internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.spectrum.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::node::NodeDevice* result_from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::Position* device_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fspectrum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrequencySpan

// double start_freq = 1;
inline void FrequencySpan::clear_start_freq() {
  start_freq_ = 0;
}
inline double FrequencySpan::_internal_start_freq() const {
  return start_freq_;
}
inline double FrequencySpan::start_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.FrequencySpan.start_freq)
  return _internal_start_freq();
}
inline void FrequencySpan::_internal_set_start_freq(double value) {
  
  start_freq_ = value;
}
inline void FrequencySpan::set_start_freq(double value) {
  _internal_set_start_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.FrequencySpan.start_freq)
}

// double stop_freq = 2;
inline void FrequencySpan::clear_stop_freq() {
  stop_freq_ = 0;
}
inline double FrequencySpan::_internal_stop_freq() const {
  return stop_freq_;
}
inline double FrequencySpan::stop_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.FrequencySpan.stop_freq)
  return _internal_stop_freq();
}
inline void FrequencySpan::_internal_set_stop_freq(double value) {
  
  stop_freq_ = value;
}
inline void FrequencySpan::set_stop_freq(double value) {
  _internal_set_stop_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.FrequencySpan.stop_freq)
}

// -------------------------------------------------------------------

// FrequencySegment

// .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
inline bool FrequencySegment::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool FrequencySegment::has_freq_span() const {
  return _internal_has_freq_span();
}
inline void FrequencySegment::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& FrequencySegment::_internal_freq_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& FrequencySegment::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.FrequencySegment.freq_span)
  return _internal_freq_span();
}
inline void FrequencySegment::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.FrequencySegment.freq_span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* FrequencySegment::release_freq_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* FrequencySegment::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.FrequencySegment.freq_span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* FrequencySegment::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* FrequencySegment::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.FrequencySegment.freq_span)
  return _internal_mutable_freq_span();
}
inline void FrequencySegment::set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete freq_span_;
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(freq_span);
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.FrequencySegment.freq_span)
}

// int32 points = 2;
inline void FrequencySegment::clear_points() {
  points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencySegment::_internal_points() const {
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencySegment::points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.FrequencySegment.points)
  return _internal_points();
}
inline void FrequencySegment::_internal_set_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_ = value;
}
inline void FrequencySegment::set_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.FrequencySegment.points)
}

// -------------------------------------------------------------------

// FrequencyPos

// int32 segment_idx = 1;
inline void FrequencyPos::clear_segment_idx() {
  segment_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencyPos::_internal_segment_idx() const {
  return segment_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencyPos::segment_idx() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.FrequencyPos.segment_idx)
  return _internal_segment_idx();
}
inline void FrequencyPos::_internal_set_segment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  segment_idx_ = value;
}
inline void FrequencyPos::set_segment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_segment_idx(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.FrequencyPos.segment_idx)
}

// int32 seg_internal_offset = 2;
inline void FrequencyPos::clear_seg_internal_offset() {
  seg_internal_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencyPos::_internal_seg_internal_offset() const {
  return seg_internal_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencyPos::seg_internal_offset() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.FrequencyPos.seg_internal_offset)
  return _internal_seg_internal_offset();
}
inline void FrequencyPos::_internal_set_seg_internal_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seg_internal_offset_ = value;
}
inline void FrequencyPos::set_seg_internal_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seg_internal_offset(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.FrequencyPos.seg_internal_offset)
}

// -------------------------------------------------------------------

// FrequencyBand

// repeated .zb.dcts.node.spectrum.FrequencySegment segments = 1;
inline int FrequencyBand::_internal_segments_size() const {
  return segments_.size();
}
inline int FrequencyBand::segments_size() const {
  return _internal_segments_size();
}
inline void FrequencyBand::clear_segments() {
  segments_.Clear();
}
inline ::zb::dcts::node::spectrum::FrequencySegment* FrequencyBand::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.FrequencyBand.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::FrequencySegment >*
FrequencyBand::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.spectrum.FrequencyBand.segments)
  return &segments_;
}
inline const ::zb::dcts::node::spectrum::FrequencySegment& FrequencyBand::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::zb::dcts::node::spectrum::FrequencySegment& FrequencyBand::segments(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.FrequencyBand.segments)
  return _internal_segments(index);
}
inline ::zb::dcts::node::spectrum::FrequencySegment* FrequencyBand::_internal_add_segments() {
  return segments_.Add();
}
inline ::zb::dcts::node::spectrum::FrequencySegment* FrequencyBand::add_segments() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.spectrum.FrequencyBand.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::FrequencySegment >&
FrequencyBand::segments() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.spectrum.FrequencyBand.segments)
  return segments_;
}

// -------------------------------------------------------------------

// FrequencyRange

// .zb.dcts.node.spectrum.FrequencyPos start_pos = 1;
inline bool FrequencyRange::_internal_has_start_pos() const {
  return this != internal_default_instance() && start_pos_ != nullptr;
}
inline bool FrequencyRange::has_start_pos() const {
  return _internal_has_start_pos();
}
inline void FrequencyRange::clear_start_pos() {
  if (GetArena() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
}
inline const ::zb::dcts::node::spectrum::FrequencyPos& FrequencyRange::_internal_start_pos() const {
  const ::zb::dcts::node::spectrum::FrequencyPos* p = start_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencyPos&>(
      ::zb::dcts::node::spectrum::_FrequencyPos_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencyPos& FrequencyRange::start_pos() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.FrequencyRange.start_pos)
  return _internal_start_pos();
}
inline void FrequencyRange::unsafe_arena_set_allocated_start_pos(
    ::zb::dcts::node::spectrum::FrequencyPos* start_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_pos_);
  }
  start_pos_ = start_pos;
  if (start_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.FrequencyRange.start_pos)
}
inline ::zb::dcts::node::spectrum::FrequencyPos* FrequencyRange::release_start_pos() {
  
  ::zb::dcts::node::spectrum::FrequencyPos* temp = start_pos_;
  start_pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencyPos* FrequencyRange::unsafe_arena_release_start_pos() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.FrequencyRange.start_pos)
  
  ::zb::dcts::node::spectrum::FrequencyPos* temp = start_pos_;
  start_pos_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencyPos* FrequencyRange::_internal_mutable_start_pos() {
  
  if (start_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencyPos>(GetArena());
    start_pos_ = p;
  }
  return start_pos_;
}
inline ::zb::dcts::node::spectrum::FrequencyPos* FrequencyRange::mutable_start_pos() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.FrequencyRange.start_pos)
  return _internal_mutable_start_pos();
}
inline void FrequencyRange::set_allocated_start_pos(::zb::dcts::node::spectrum::FrequencyPos* start_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_pos_;
  }
  if (start_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_pos);
    if (message_arena != submessage_arena) {
      start_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pos, submessage_arena);
    }
    
  } else {
    
  }
  start_pos_ = start_pos;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.FrequencyRange.start_pos)
}

// .zb.dcts.node.spectrum.FrequencyPos stop_pos = 2;
inline bool FrequencyRange::_internal_has_stop_pos() const {
  return this != internal_default_instance() && stop_pos_ != nullptr;
}
inline bool FrequencyRange::has_stop_pos() const {
  return _internal_has_stop_pos();
}
inline void FrequencyRange::clear_stop_pos() {
  if (GetArena() == nullptr && stop_pos_ != nullptr) {
    delete stop_pos_;
  }
  stop_pos_ = nullptr;
}
inline const ::zb::dcts::node::spectrum::FrequencyPos& FrequencyRange::_internal_stop_pos() const {
  const ::zb::dcts::node::spectrum::FrequencyPos* p = stop_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencyPos&>(
      ::zb::dcts::node::spectrum::_FrequencyPos_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencyPos& FrequencyRange::stop_pos() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.FrequencyRange.stop_pos)
  return _internal_stop_pos();
}
inline void FrequencyRange::unsafe_arena_set_allocated_stop_pos(
    ::zb::dcts::node::spectrum::FrequencyPos* stop_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_pos_);
  }
  stop_pos_ = stop_pos;
  if (stop_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.FrequencyRange.stop_pos)
}
inline ::zb::dcts::node::spectrum::FrequencyPos* FrequencyRange::release_stop_pos() {
  
  ::zb::dcts::node::spectrum::FrequencyPos* temp = stop_pos_;
  stop_pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencyPos* FrequencyRange::unsafe_arena_release_stop_pos() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.FrequencyRange.stop_pos)
  
  ::zb::dcts::node::spectrum::FrequencyPos* temp = stop_pos_;
  stop_pos_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencyPos* FrequencyRange::_internal_mutable_stop_pos() {
  
  if (stop_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencyPos>(GetArena());
    stop_pos_ = p;
  }
  return stop_pos_;
}
inline ::zb::dcts::node::spectrum::FrequencyPos* FrequencyRange::mutable_stop_pos() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.FrequencyRange.stop_pos)
  return _internal_mutable_stop_pos();
}
inline void FrequencyRange::set_allocated_stop_pos(::zb::dcts::node::spectrum::FrequencyPos* stop_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_pos_;
  }
  if (stop_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_pos);
    if (message_arena != submessage_arena) {
      stop_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_pos, submessage_arena);
    }
    
  } else {
    
  }
  stop_pos_ = stop_pos;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.FrequencyRange.stop_pos)
}

// -------------------------------------------------------------------

// SignalBand

// double center_frequency = 1;
inline void SignalBand::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double SignalBand::_internal_center_frequency() const {
  return center_frequency_;
}
inline double SignalBand::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.SignalBand.center_frequency)
  return _internal_center_frequency();
}
inline void SignalBand::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void SignalBand::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.SignalBand.center_frequency)
}

// double band_width = 2;
inline void SignalBand::clear_band_width() {
  band_width_ = 0;
}
inline double SignalBand::_internal_band_width() const {
  return band_width_;
}
inline double SignalBand::band_width() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.SignalBand.band_width)
  return _internal_band_width();
}
inline void SignalBand::_internal_set_band_width(double value) {
  
  band_width_ = value;
}
inline void SignalBand::set_band_width(double value) {
  _internal_set_band_width(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.SignalBand.band_width)
}

// -------------------------------------------------------------------

// BaseBand

// double center_frequency = 1;
inline void BaseBand::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double BaseBand::_internal_center_frequency() const {
  return center_frequency_;
}
inline double BaseBand::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.BaseBand.center_frequency)
  return _internal_center_frequency();
}
inline void BaseBand::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void BaseBand::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.BaseBand.center_frequency)
}

// double sample_rate = 2;
inline void BaseBand::clear_sample_rate() {
  sample_rate_ = 0;
}
inline double BaseBand::_internal_sample_rate() const {
  return sample_rate_;
}
inline double BaseBand::sample_rate() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.BaseBand.sample_rate)
  return _internal_sample_rate();
}
inline void BaseBand::_internal_set_sample_rate(double value) {
  
  sample_rate_ = value;
}
inline void BaseBand::set_sample_rate(double value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.BaseBand.sample_rate)
}

// -------------------------------------------------------------------

// DataHoldRequest

// .zb.dcts.node.TaskAccount task_account = 1;
inline bool DataHoldRequest::_internal_has_task_account() const {
  return this != internal_default_instance() && task_account_ != nullptr;
}
inline bool DataHoldRequest::has_task_account() const {
  return _internal_has_task_account();
}
inline const ::zb::dcts::node::TaskAccount& DataHoldRequest::_internal_task_account() const {
  const ::zb::dcts::node::TaskAccount* p = task_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::TaskAccount&>(
      ::zb::dcts::node::_TaskAccount_default_instance_);
}
inline const ::zb::dcts::node::TaskAccount& DataHoldRequest::task_account() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.DataHoldRequest.task_account)
  return _internal_task_account();
}
inline void DataHoldRequest::unsafe_arena_set_allocated_task_account(
    ::zb::dcts::node::TaskAccount* task_account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  task_account_ = task_account;
  if (task_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.DataHoldRequest.task_account)
}
inline ::zb::dcts::node::TaskAccount* DataHoldRequest::release_task_account() {
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::TaskAccount* DataHoldRequest::unsafe_arena_release_task_account() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.DataHoldRequest.task_account)
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::TaskAccount* DataHoldRequest::_internal_mutable_task_account() {
  
  if (task_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::TaskAccount>(GetArena());
    task_account_ = p;
  }
  return task_account_;
}
inline ::zb::dcts::node::TaskAccount* DataHoldRequest::mutable_task_account() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.DataHoldRequest.task_account)
  return _internal_mutable_task_account();
}
inline void DataHoldRequest::set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  if (task_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account)->GetArena();
    if (message_arena != submessage_arena) {
      task_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_account, submessage_arena);
    }
    
  } else {
    
  }
  task_account_ = task_account;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.DataHoldRequest.task_account)
}

// .zb.dcts.node.spectrum.DataHoldType data_hold_type = 2;
inline void DataHoldRequest::clear_data_hold_type() {
  data_hold_type_ = 0;
}
inline ::zb::dcts::node::spectrum::DataHoldType DataHoldRequest::_internal_data_hold_type() const {
  return static_cast< ::zb::dcts::node::spectrum::DataHoldType >(data_hold_type_);
}
inline ::zb::dcts::node::spectrum::DataHoldType DataHoldRequest::data_hold_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.DataHoldRequest.data_hold_type)
  return _internal_data_hold_type();
}
inline void DataHoldRequest::_internal_set_data_hold_type(::zb::dcts::node::spectrum::DataHoldType value) {
  
  data_hold_type_ = value;
}
inline void DataHoldRequest::set_data_hold_type(::zb::dcts::node::spectrum::DataHoldType value) {
  _internal_set_data_hold_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.DataHoldRequest.data_hold_type)
}

// -------------------------------------------------------------------

// ZoomInRequest

// .zb.dcts.node.TaskAccount task_account = 1;
inline bool ZoomInRequest::_internal_has_task_account() const {
  return this != internal_default_instance() && task_account_ != nullptr;
}
inline bool ZoomInRequest::has_task_account() const {
  return _internal_has_task_account();
}
inline const ::zb::dcts::node::TaskAccount& ZoomInRequest::_internal_task_account() const {
  const ::zb::dcts::node::TaskAccount* p = task_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::TaskAccount&>(
      ::zb::dcts::node::_TaskAccount_default_instance_);
}
inline const ::zb::dcts::node::TaskAccount& ZoomInRequest::task_account() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.ZoomInRequest.task_account)
  return _internal_task_account();
}
inline void ZoomInRequest::unsafe_arena_set_allocated_task_account(
    ::zb::dcts::node::TaskAccount* task_account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  task_account_ = task_account;
  if (task_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.ZoomInRequest.task_account)
}
inline ::zb::dcts::node::TaskAccount* ZoomInRequest::release_task_account() {
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::TaskAccount* ZoomInRequest::unsafe_arena_release_task_account() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.ZoomInRequest.task_account)
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::TaskAccount* ZoomInRequest::_internal_mutable_task_account() {
  
  if (task_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::TaskAccount>(GetArena());
    task_account_ = p;
  }
  return task_account_;
}
inline ::zb::dcts::node::TaskAccount* ZoomInRequest::mutable_task_account() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.ZoomInRequest.task_account)
  return _internal_mutable_task_account();
}
inline void ZoomInRequest::set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  if (task_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account)->GetArena();
    if (message_arena != submessage_arena) {
      task_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_account, submessage_arena);
    }
    
  } else {
    
  }
  task_account_ = task_account;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.ZoomInRequest.task_account)
}

// .zb.dcts.node.spectrum.FrequencySegment zoom_in_part = 2;
inline bool ZoomInRequest::_internal_has_zoom_in_part() const {
  return this != internal_default_instance() && zoom_in_part_ != nullptr;
}
inline bool ZoomInRequest::has_zoom_in_part() const {
  return _internal_has_zoom_in_part();
}
inline void ZoomInRequest::clear_zoom_in_part() {
  if (GetArena() == nullptr && zoom_in_part_ != nullptr) {
    delete zoom_in_part_;
  }
  zoom_in_part_ = nullptr;
}
inline const ::zb::dcts::node::spectrum::FrequencySegment& ZoomInRequest::_internal_zoom_in_part() const {
  const ::zb::dcts::node::spectrum::FrequencySegment* p = zoom_in_part_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySegment&>(
      ::zb::dcts::node::spectrum::_FrequencySegment_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySegment& ZoomInRequest::zoom_in_part() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.ZoomInRequest.zoom_in_part)
  return _internal_zoom_in_part();
}
inline void ZoomInRequest::unsafe_arena_set_allocated_zoom_in_part(
    ::zb::dcts::node::spectrum::FrequencySegment* zoom_in_part) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zoom_in_part_);
  }
  zoom_in_part_ = zoom_in_part;
  if (zoom_in_part) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.ZoomInRequest.zoom_in_part)
}
inline ::zb::dcts::node::spectrum::FrequencySegment* ZoomInRequest::release_zoom_in_part() {
  
  ::zb::dcts::node::spectrum::FrequencySegment* temp = zoom_in_part_;
  zoom_in_part_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySegment* ZoomInRequest::unsafe_arena_release_zoom_in_part() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.ZoomInRequest.zoom_in_part)
  
  ::zb::dcts::node::spectrum::FrequencySegment* temp = zoom_in_part_;
  zoom_in_part_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySegment* ZoomInRequest::_internal_mutable_zoom_in_part() {
  
  if (zoom_in_part_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySegment>(GetArena());
    zoom_in_part_ = p;
  }
  return zoom_in_part_;
}
inline ::zb::dcts::node::spectrum::FrequencySegment* ZoomInRequest::mutable_zoom_in_part() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.ZoomInRequest.zoom_in_part)
  return _internal_mutable_zoom_in_part();
}
inline void ZoomInRequest::set_allocated_zoom_in_part(::zb::dcts::node::spectrum::FrequencySegment* zoom_in_part) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete zoom_in_part_;
  }
  if (zoom_in_part) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(zoom_in_part);
    if (message_arena != submessage_arena) {
      zoom_in_part = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zoom_in_part, submessage_arena);
    }
    
  } else {
    
  }
  zoom_in_part_ = zoom_in_part;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.ZoomInRequest.zoom_in_part)
}

// -------------------------------------------------------------------

// View

// .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
inline bool View::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool View::has_freq_span() const {
  return _internal_has_freq_span();
}
inline void View::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& View::_internal_freq_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& View::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.View.freq_span)
  return _internal_freq_span();
}
inline void View::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.View.freq_span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* View::release_freq_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* View::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.View.freq_span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* View::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* View::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.View.freq_span)
  return _internal_mutable_freq_span();
}
inline void View::set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete freq_span_;
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(freq_span);
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.View.freq_span)
}

// repeated float cur_trace = 2;
inline int View::_internal_cur_trace_size() const {
  return cur_trace_.size();
}
inline int View::cur_trace_size() const {
  return _internal_cur_trace_size();
}
inline void View::clear_cur_trace() {
  cur_trace_.Clear();
}
inline float View::_internal_cur_trace(int index) const {
  return cur_trace_.Get(index);
}
inline float View::cur_trace(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.View.cur_trace)
  return _internal_cur_trace(index);
}
inline void View::set_cur_trace(int index, float value) {
  cur_trace_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.View.cur_trace)
}
inline void View::_internal_add_cur_trace(float value) {
  cur_trace_.Add(value);
}
inline void View::add_cur_trace(float value) {
  _internal_add_cur_trace(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.spectrum.View.cur_trace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
View::_internal_cur_trace() const {
  return cur_trace_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
View::cur_trace() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.spectrum.View.cur_trace)
  return _internal_cur_trace();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
View::_internal_mutable_cur_trace() {
  return &cur_trace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
View::mutable_cur_trace() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.spectrum.View.cur_trace)
  return _internal_mutable_cur_trace();
}

// repeated float minhold_trace = 3;
inline int View::_internal_minhold_trace_size() const {
  return minhold_trace_.size();
}
inline int View::minhold_trace_size() const {
  return _internal_minhold_trace_size();
}
inline void View::clear_minhold_trace() {
  minhold_trace_.Clear();
}
inline float View::_internal_minhold_trace(int index) const {
  return minhold_trace_.Get(index);
}
inline float View::minhold_trace(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.View.minhold_trace)
  return _internal_minhold_trace(index);
}
inline void View::set_minhold_trace(int index, float value) {
  minhold_trace_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.View.minhold_trace)
}
inline void View::_internal_add_minhold_trace(float value) {
  minhold_trace_.Add(value);
}
inline void View::add_minhold_trace(float value) {
  _internal_add_minhold_trace(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.spectrum.View.minhold_trace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
View::_internal_minhold_trace() const {
  return minhold_trace_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
View::minhold_trace() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.spectrum.View.minhold_trace)
  return _internal_minhold_trace();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
View::_internal_mutable_minhold_trace() {
  return &minhold_trace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
View::mutable_minhold_trace() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.spectrum.View.minhold_trace)
  return _internal_mutable_minhold_trace();
}

// repeated float maxhold_trace = 4;
inline int View::_internal_maxhold_trace_size() const {
  return maxhold_trace_.size();
}
inline int View::maxhold_trace_size() const {
  return _internal_maxhold_trace_size();
}
inline void View::clear_maxhold_trace() {
  maxhold_trace_.Clear();
}
inline float View::_internal_maxhold_trace(int index) const {
  return maxhold_trace_.Get(index);
}
inline float View::maxhold_trace(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.View.maxhold_trace)
  return _internal_maxhold_trace(index);
}
inline void View::set_maxhold_trace(int index, float value) {
  maxhold_trace_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.View.maxhold_trace)
}
inline void View::_internal_add_maxhold_trace(float value) {
  maxhold_trace_.Add(value);
}
inline void View::add_maxhold_trace(float value) {
  _internal_add_maxhold_trace(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.spectrum.View.maxhold_trace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
View::_internal_maxhold_trace() const {
  return maxhold_trace_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
View::maxhold_trace() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.spectrum.View.maxhold_trace)
  return _internal_maxhold_trace();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
View::_internal_mutable_maxhold_trace() {
  return &maxhold_trace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
View::mutable_maxhold_trace() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.spectrum.View.maxhold_trace)
  return _internal_mutable_maxhold_trace();
}

// repeated float over_threshold_hits = 5;
inline int View::_internal_over_threshold_hits_size() const {
  return over_threshold_hits_.size();
}
inline int View::over_threshold_hits_size() const {
  return _internal_over_threshold_hits_size();
}
inline void View::clear_over_threshold_hits() {
  over_threshold_hits_.Clear();
}
inline float View::_internal_over_threshold_hits(int index) const {
  return over_threshold_hits_.Get(index);
}
inline float View::over_threshold_hits(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.View.over_threshold_hits)
  return _internal_over_threshold_hits(index);
}
inline void View::set_over_threshold_hits(int index, float value) {
  over_threshold_hits_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.View.over_threshold_hits)
}
inline void View::_internal_add_over_threshold_hits(float value) {
  over_threshold_hits_.Add(value);
}
inline void View::add_over_threshold_hits(float value) {
  _internal_add_over_threshold_hits(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.spectrum.View.over_threshold_hits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
View::_internal_over_threshold_hits() const {
  return over_threshold_hits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
View::over_threshold_hits() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.spectrum.View.over_threshold_hits)
  return _internal_over_threshold_hits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
View::_internal_mutable_over_threshold_hits() {
  return &over_threshold_hits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
View::mutable_over_threshold_hits() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.spectrum.View.over_threshold_hits)
  return _internal_mutable_over_threshold_hits();
}

// -------------------------------------------------------------------

// Header

// .zb.dcts.node.NodeDevice result_from = 1;
inline bool Header::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool Header::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::node::NodeDevice& Header::_internal_result_from() const {
  const ::zb::dcts::node::NodeDevice* p = result_from_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& Header::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.Header.result_from)
  return _internal_result_from();
}
inline void Header::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::node::NodeDevice* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.Header.result_from)
}
inline ::zb::dcts::node::NodeDevice* Header::release_result_from() {
  
  ::zb::dcts::node::NodeDevice* temp = result_from_;
  result_from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* Header::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.Header.result_from)
  
  ::zb::dcts::node::NodeDevice* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* Header::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::node::NodeDevice* Header::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.Header.result_from)
  return _internal_mutable_result_from();
}
inline void Header::set_allocated_result_from(::zb::dcts::node::NodeDevice* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.Header.result_from)
}

// string record_id = 2;
inline void Header::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& Header::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.Header.record_id)
  return _internal_record_id();
}
inline void Header::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.Header.record_id)
}
inline std::string* Header::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.Header.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& Header::_internal_record_id() const {
  return record_id_.Get();
}
inline void Header::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Header::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.spectrum.Header.record_id)
}
inline void Header::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.spectrum.Header.record_id)
}
inline void Header::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.spectrum.Header.record_id)
}
inline std::string* Header::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Header::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.Header.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.Header.record_id)
}

// uint32 sequence_number = 3;
inline void Header::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.Header.sequence_number)
  return _internal_sequence_number();
}
inline void Header::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void Header::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.Header.sequence_number)
}

// uint32 sweep_count = 4;
inline void Header::clear_sweep_count() {
  sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_sweep_count() const {
  return sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.Header.sweep_count)
  return _internal_sweep_count();
}
inline void Header::_internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sweep_count_ = value;
}
inline void Header::set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.spectrum.Header.sweep_count)
}

// .zb.dcts.TimeSpan time_span = 5;
inline bool Header::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool Header::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& Header::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& Header::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.Header.time_span)
  return _internal_time_span();
}
inline void Header::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.Header.time_span)
}
inline ::zb::dcts::TimeSpan* Header::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* Header::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.Header.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* Header::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* Header::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.Header.time_span)
  return _internal_mutable_time_span();
}
inline void Header::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.Header.time_span)
}

// .zb.dcts.Position device_position = 6;
inline bool Header::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool Header::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& Header::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Position&>(
      ::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& Header::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.spectrum.Header.device_position)
  return _internal_device_position();
}
inline void Header::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.spectrum.Header.device_position)
}
inline ::zb::dcts::Position* Header::release_device_position() {
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* Header::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.spectrum.Header.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* Header::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* Header::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.spectrum.Header.device_position)
  return _internal_mutable_device_position();
}
inline void Header::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.spectrum.Header.device_position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spectrum
}  // namespace node
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::node::spectrum::DataHoldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::spectrum::DataHoldType>() {
  return ::zb::dcts::node::spectrum::DataHoldType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fspectrum_2eproto
