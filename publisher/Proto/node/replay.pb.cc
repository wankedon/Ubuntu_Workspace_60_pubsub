// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/replay.proto

#include "node/replay.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace replay {
constexpr ReplayId::ReplayId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_id_(nullptr)
  , node_id_(nullptr){}
struct ReplayIdDefaultTypeInternal {
  constexpr ReplayIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplayIdDefaultTypeInternal() {}
  union {
    ReplayId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplayIdDefaultTypeInternal _ReplayId_default_instance_;
constexpr CreateReplayTaskRequest::CreateReplayTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_runner_(){}
struct CreateReplayTaskRequestDefaultTypeInternal {
  constexpr CreateReplayTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateReplayTaskRequestDefaultTypeInternal() {}
  union {
    CreateReplayTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateReplayTaskRequestDefaultTypeInternal _CreateReplayTaskRequest_default_instance_;
constexpr AdjustOption::AdjustOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AdjustOptionDefaultTypeInternal {
  constexpr AdjustOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdjustOptionDefaultTypeInternal() {}
  union {
    AdjustOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdjustOptionDefaultTypeInternal _AdjustOption_default_instance_;
constexpr AdjustRequest::AdjustRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replay_id_(nullptr)
  , option_(nullptr){}
struct AdjustRequestDefaultTypeInternal {
  constexpr AdjustRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdjustRequestDefaultTypeInternal() {}
  union {
    AdjustRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdjustRequestDefaultTypeInternal _AdjustRequest_default_instance_;
}  // namespace replay
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2freplay_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_node_2freplay_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2freplay_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2freplay_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::ReplayId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::ReplayId, task_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::ReplayId, node_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::ReplayId, record_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::CreateReplayTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::CreateReplayTaskRequest, task_runner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::AdjustOption, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::AdjustOption, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::AdjustOption, Option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::AdjustRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::AdjustRequest, replay_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::replay::AdjustRequest, option_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::replay::ReplayId)},
  { 8, -1, sizeof(::zb::dcts::node::replay::CreateReplayTaskRequest)},
  { 14, -1, sizeof(::zb::dcts::node::replay::AdjustOption)},
  { 23, -1, sizeof(::zb::dcts::node::replay::AdjustRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::replay::_ReplayId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::replay::_CreateReplayTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::replay::_AdjustOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::replay::_AdjustRequest_default_instance_),
};

const char descriptor_table_protodef_node_2freplay_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021node/replay.proto\022\023zb.dcts.node.replay"
  "\032\ndcts.proto\032\017node/node.proto\"f\n\010ReplayI"
  "d\022 \n\007task_id\030\001 \001(\0132\017.zb.dcts.TaskId\022%\n\007n"
  "ode_id\030\002 \001(\0132\024.zb.dcts.node.NodeId\022\021\n\tre"
  "cord_id\030\003 \001(\t\"H\n\027CreateReplayTaskRequest"
  "\022-\n\013task_runner\030\001 \003(\0132\030.zb.dcts.node.Nod"
  "eDevice\"\233\001\n\014AdjustOption\022\'\n\010progress\030\001 \001"
  "(\0132\023.zb.dcts.RealNumberH\000\022.\n\017interval_fa"
  "ctor\030\002 \001(\0132\023.zb.dcts.RealNumberH\000\022(\n\014pau"
  "se_resume\030\003 \001(\0132\020.zb.dcts.BooleanH\000B\010\n\006O"
  "ption\"t\n\rAdjustRequest\0220\n\treplay_id\030\001 \001("
  "\0132\035.zb.dcts.node.replay.ReplayId\0221\n\006opti"
  "on\030\002 \001(\0132!.zb.dcts.node.replay.AdjustOpt"
  "ionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2freplay_2eproto_deps[2] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_node_2fnode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2freplay_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2freplay_2eproto = {
  false, false, 531, descriptor_table_protodef_node_2freplay_2eproto, "node/replay.proto", 
  &descriptor_table_node_2freplay_2eproto_once, descriptor_table_node_2freplay_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_node_2freplay_2eproto::offsets,
  file_level_metadata_node_2freplay_2eproto, file_level_enum_descriptors_node_2freplay_2eproto, file_level_service_descriptors_node_2freplay_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2freplay_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2freplay_2eproto);
  return descriptor_table_node_2freplay_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2freplay_2eproto(&descriptor_table_node_2freplay_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace replay {

// ===================================================================

class ReplayId::_Internal {
 public:
  static const ::zb::dcts::TaskId& task_id(const ReplayId* msg);
  static const ::zb::dcts::node::NodeId& node_id(const ReplayId* msg);
};

const ::zb::dcts::TaskId&
ReplayId::_Internal::task_id(const ReplayId* msg) {
  return *msg->task_id_;
}
const ::zb::dcts::node::NodeId&
ReplayId::_Internal::node_id(const ReplayId* msg) {
  return *msg->node_id_;
}
void ReplayId::clear_task_id() {
  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
}
void ReplayId::clear_node_id() {
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
}
ReplayId::ReplayId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.replay.ReplayId)
}
ReplayId::ReplayId(const ReplayId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  if (from._internal_has_task_id()) {
    task_id_ = new ::zb::dcts::TaskId(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  if (from._internal_has_node_id()) {
    node_id_ = new ::zb::dcts::node::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.replay.ReplayId)
}

void ReplayId::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(node_id_));
}

ReplayId::~ReplayId() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.replay.ReplayId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete node_id_;
}

void ReplayId::ArenaDtor(void* object) {
  ReplayId* _this = reinterpret_cast< ReplayId* >(object);
  (void)_this;
}
void ReplayId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplayId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.replay.ReplayId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty();
  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TaskId task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.NodeId node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string record_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.replay.ReplayId.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.replay.ReplayId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TaskId task_id = 1;
  if (this->has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_id(this), target, stream);
  }

  // .zb.dcts.node.NodeId node_id = 2;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::node_id(this), target, stream);
  }

  // string record_id = 3;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.replay.ReplayId.record_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_record_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.replay.ReplayId)
  return target;
}

size_t ReplayId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.replay.ReplayId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 3;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.TaskId task_id = 1;
  if (this->has_task_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_id_);
  }

  // .zb.dcts.node.NodeId node_id = 2;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.replay.ReplayId)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.replay.ReplayId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.replay.ReplayId)
    MergeFrom(*source);
  }
}

void ReplayId::MergeFrom(const ReplayId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.replay.ReplayId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_task_id()) {
    _internal_mutable_task_id()->::zb::dcts::TaskId::MergeFrom(from._internal_task_id());
  }
  if (from.has_node_id()) {
    _internal_mutable_node_id()->::zb::dcts::node::NodeId::MergeFrom(from._internal_node_id());
  }
}

void ReplayId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.replay.ReplayId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayId::CopyFrom(const ReplayId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.replay.ReplayId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayId::IsInitialized() const {
  return true;
}

void ReplayId::InternalSwap(ReplayId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayId, node_id_)
      + sizeof(ReplayId::node_id_)
      - PROTOBUF_FIELD_OFFSET(ReplayId, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateReplayTaskRequest::_Internal {
 public:
};

void CreateReplayTaskRequest::clear_task_runner() {
  task_runner_.Clear();
}
CreateReplayTaskRequest::CreateReplayTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_runner_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.replay.CreateReplayTaskRequest)
}
CreateReplayTaskRequest::CreateReplayTaskRequest(const CreateReplayTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_runner_(from.task_runner_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.replay.CreateReplayTaskRequest)
}

void CreateReplayTaskRequest::SharedCtor() {
}

CreateReplayTaskRequest::~CreateReplayTaskRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.replay.CreateReplayTaskRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReplayTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateReplayTaskRequest::ArenaDtor(void* object) {
  CreateReplayTaskRequest* _this = reinterpret_cast< CreateReplayTaskRequest* >(object);
  (void)_this;
}
void CreateReplayTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReplayTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateReplayTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.replay.CreateReplayTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_runner_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReplayTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.NodeDevice task_runner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_runner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReplayTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.replay.CreateReplayTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_runner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_task_runner(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.replay.CreateReplayTaskRequest)
  return target;
}

size_t CreateReplayTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.replay.CreateReplayTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  total_size += 1UL * this->_internal_task_runner_size();
  for (const auto& msg : this->task_runner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReplayTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.replay.CreateReplayTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReplayTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReplayTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.replay.CreateReplayTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.replay.CreateReplayTaskRequest)
    MergeFrom(*source);
  }
}

void CreateReplayTaskRequest::MergeFrom(const CreateReplayTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.replay.CreateReplayTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_runner_.MergeFrom(from.task_runner_);
}

void CreateReplayTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.replay.CreateReplayTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReplayTaskRequest::CopyFrom(const CreateReplayTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.replay.CreateReplayTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReplayTaskRequest::IsInitialized() const {
  return true;
}

void CreateReplayTaskRequest::InternalSwap(CreateReplayTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_runner_.InternalSwap(&other->task_runner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReplayTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdjustOption::_Internal {
 public:
  static const ::zb::dcts::RealNumber& progress(const AdjustOption* msg);
  static const ::zb::dcts::RealNumber& interval_factor(const AdjustOption* msg);
  static const ::zb::dcts::Boolean& pause_resume(const AdjustOption* msg);
};

const ::zb::dcts::RealNumber&
AdjustOption::_Internal::progress(const AdjustOption* msg) {
  return *msg->Option_.progress_;
}
const ::zb::dcts::RealNumber&
AdjustOption::_Internal::interval_factor(const AdjustOption* msg) {
  return *msg->Option_.interval_factor_;
}
const ::zb::dcts::Boolean&
AdjustOption::_Internal::pause_resume(const AdjustOption* msg) {
  return *msg->Option_.pause_resume_;
}
void AdjustOption::set_allocated_progress(::zb::dcts::RealNumber* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Option();
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress)->GetArena();
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    set_has_progress();
    Option_.progress_ = progress;
  }
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.replay.AdjustOption.progress)
}
void AdjustOption::clear_progress() {
  if (_internal_has_progress()) {
    if (GetArena() == nullptr) {
      delete Option_.progress_;
    }
    clear_has_Option();
  }
}
void AdjustOption::set_allocated_interval_factor(::zb::dcts::RealNumber* interval_factor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Option();
  if (interval_factor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_factor)->GetArena();
    if (message_arena != submessage_arena) {
      interval_factor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_factor, submessage_arena);
    }
    set_has_interval_factor();
    Option_.interval_factor_ = interval_factor;
  }
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.replay.AdjustOption.interval_factor)
}
void AdjustOption::clear_interval_factor() {
  if (_internal_has_interval_factor()) {
    if (GetArena() == nullptr) {
      delete Option_.interval_factor_;
    }
    clear_has_Option();
  }
}
void AdjustOption::set_allocated_pause_resume(::zb::dcts::Boolean* pause_resume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Option();
  if (pause_resume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pause_resume)->GetArena();
    if (message_arena != submessage_arena) {
      pause_resume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pause_resume, submessage_arena);
    }
    set_has_pause_resume();
    Option_.pause_resume_ = pause_resume;
  }
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.replay.AdjustOption.pause_resume)
}
void AdjustOption::clear_pause_resume() {
  if (_internal_has_pause_resume()) {
    if (GetArena() == nullptr) {
      delete Option_.pause_resume_;
    }
    clear_has_Option();
  }
}
AdjustOption::AdjustOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.replay.AdjustOption)
}
AdjustOption::AdjustOption(const AdjustOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Option();
  switch (from.Option_case()) {
    case kProgress: {
      _internal_mutable_progress()->::zb::dcts::RealNumber::MergeFrom(from._internal_progress());
      break;
    }
    case kIntervalFactor: {
      _internal_mutable_interval_factor()->::zb::dcts::RealNumber::MergeFrom(from._internal_interval_factor());
      break;
    }
    case kPauseResume: {
      _internal_mutable_pause_resume()->::zb::dcts::Boolean::MergeFrom(from._internal_pause_resume());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.replay.AdjustOption)
}

void AdjustOption::SharedCtor() {
clear_has_Option();
}

AdjustOption::~AdjustOption() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.replay.AdjustOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdjustOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Option()) {
    clear_Option();
  }
}

void AdjustOption::ArenaDtor(void* object) {
  AdjustOption* _this = reinterpret_cast< AdjustOption* >(object);
  (void)_this;
}
void AdjustOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdjustOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdjustOption::clear_Option() {
// @@protoc_insertion_point(one_of_clear_start:zb.dcts.node.replay.AdjustOption)
  switch (Option_case()) {
    case kProgress: {
      if (GetArena() == nullptr) {
        delete Option_.progress_;
      }
      break;
    }
    case kIntervalFactor: {
      if (GetArena() == nullptr) {
        delete Option_.interval_factor_;
      }
      break;
    }
    case kPauseResume: {
      if (GetArena() == nullptr) {
        delete Option_.pause_resume_;
      }
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void AdjustOption::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.replay.AdjustOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdjustOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.RealNumber progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.RealNumber interval_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_factor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Boolean pause_resume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_resume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdjustOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.replay.AdjustOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.RealNumber progress = 1;
  if (_internal_has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::progress(this), target, stream);
  }

  // .zb.dcts.RealNumber interval_factor = 2;
  if (_internal_has_interval_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::interval_factor(this), target, stream);
  }

  // .zb.dcts.Boolean pause_resume = 3;
  if (_internal_has_pause_resume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pause_resume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.replay.AdjustOption)
  return target;
}

size_t AdjustOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.replay.AdjustOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Option_case()) {
    // .zb.dcts.RealNumber progress = 1;
    case kProgress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.progress_);
      break;
    }
    // .zb.dcts.RealNumber interval_factor = 2;
    case kIntervalFactor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.interval_factor_);
      break;
    }
    // .zb.dcts.Boolean pause_resume = 3;
    case kPauseResume: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.pause_resume_);
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdjustOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.replay.AdjustOption)
  GOOGLE_DCHECK_NE(&from, this);
  const AdjustOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdjustOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.replay.AdjustOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.replay.AdjustOption)
    MergeFrom(*source);
  }
}

void AdjustOption::MergeFrom(const AdjustOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.replay.AdjustOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Option_case()) {
    case kProgress: {
      _internal_mutable_progress()->::zb::dcts::RealNumber::MergeFrom(from._internal_progress());
      break;
    }
    case kIntervalFactor: {
      _internal_mutable_interval_factor()->::zb::dcts::RealNumber::MergeFrom(from._internal_interval_factor());
      break;
    }
    case kPauseResume: {
      _internal_mutable_pause_resume()->::zb::dcts::Boolean::MergeFrom(from._internal_pause_resume());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void AdjustOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.replay.AdjustOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjustOption::CopyFrom(const AdjustOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.replay.AdjustOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjustOption::IsInitialized() const {
  return true;
}

void AdjustOption::InternalSwap(AdjustOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Option_, other->Option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdjustOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdjustRequest::_Internal {
 public:
  static const ::zb::dcts::node::replay::ReplayId& replay_id(const AdjustRequest* msg);
  static const ::zb::dcts::node::replay::AdjustOption& option(const AdjustRequest* msg);
};

const ::zb::dcts::node::replay::ReplayId&
AdjustRequest::_Internal::replay_id(const AdjustRequest* msg) {
  return *msg->replay_id_;
}
const ::zb::dcts::node::replay::AdjustOption&
AdjustRequest::_Internal::option(const AdjustRequest* msg) {
  return *msg->option_;
}
AdjustRequest::AdjustRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.replay.AdjustRequest)
}
AdjustRequest::AdjustRequest(const AdjustRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::zb::dcts::node::replay::ReplayId(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  if (from._internal_has_option()) {
    option_ = new ::zb::dcts::node::replay::AdjustOption(*from.option_);
  } else {
    option_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.replay.AdjustRequest)
}

void AdjustRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&replay_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&option_) -
    reinterpret_cast<char*>(&replay_id_)) + sizeof(option_));
}

AdjustRequest::~AdjustRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.replay.AdjustRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdjustRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete replay_id_;
  if (this != internal_default_instance()) delete option_;
}

void AdjustRequest::ArenaDtor(void* object) {
  AdjustRequest* _this = reinterpret_cast< AdjustRequest* >(object);
  (void)_this;
}
void AdjustRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdjustRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdjustRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.replay.AdjustRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  if (GetArena() == nullptr && option_ != nullptr) {
    delete option_;
  }
  option_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdjustRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.replay.ReplayId replay_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.replay.AdjustOption option = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_option(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdjustRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.replay.AdjustRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::replay_id(this), target, stream);
  }

  // .zb.dcts.node.replay.AdjustOption option = 2;
  if (this->has_option()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::option(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.replay.AdjustRequest)
  return target;
}

size_t AdjustRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.replay.AdjustRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  // .zb.dcts.node.replay.AdjustOption option = 2;
  if (this->has_option()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *option_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdjustRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.replay.AdjustRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdjustRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdjustRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.replay.AdjustRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.replay.AdjustRequest)
    MergeFrom(*source);
  }
}

void AdjustRequest::MergeFrom(const AdjustRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.replay.AdjustRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::zb::dcts::node::replay::ReplayId::MergeFrom(from._internal_replay_id());
  }
  if (from.has_option()) {
    _internal_mutable_option()->::zb::dcts::node::replay::AdjustOption::MergeFrom(from._internal_option());
  }
}

void AdjustRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.replay.AdjustRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjustRequest::CopyFrom(const AdjustRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.replay.AdjustRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjustRequest::IsInitialized() const {
  return true;
}

void AdjustRequest::InternalSwap(AdjustRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdjustRequest, option_)
      + sizeof(AdjustRequest::option_)
      - PROTOBUF_FIELD_OFFSET(AdjustRequest, replay_id_)>(
          reinterpret_cast<char*>(&replay_id_),
          reinterpret_cast<char*>(&other->replay_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdjustRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace replay
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::replay::ReplayId* Arena::CreateMaybeMessage< ::zb::dcts::node::replay::ReplayId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::replay::ReplayId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::replay::CreateReplayTaskRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::replay::CreateReplayTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::replay::CreateReplayTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::replay::AdjustOption* Arena::CreateMaybeMessage< ::zb::dcts::node::replay::AdjustOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::replay::AdjustOption >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::replay::AdjustRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::replay::AdjustRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::replay::AdjustRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
