// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/detectionInternal.proto

#include "node/detectionInternal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace detection {
constexpr RawHeader::RawHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_span_(nullptr)
  , device_position_(nullptr)
  , sweep_count_(0u){}
struct RawHeaderDefaultTypeInternal {
  constexpr RawHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RawHeaderDefaultTypeInternal() {}
  union {
    RawHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RawHeaderDefaultTypeInternal _RawHeader_default_instance_;
constexpr RawBody::RawBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cur_trace_()
  , _cur_trace_cached_byte_size_()
  , over_threshold_hits_()
  , _over_threshold_hits_cached_byte_size_()
  , freq_span_(nullptr){}
struct RawBodyDefaultTypeInternal {
  constexpr RawBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RawBodyDefaultTypeInternal() {}
  union {
    RawBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RawBodyDefaultTypeInternal _RawBody_default_instance_;
constexpr RawData::RawData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signal_segments_()
  , header_(nullptr)
  , body_(nullptr){}
struct RawDataDefaultTypeInternal {
  constexpr RawDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RawDataDefaultTypeInternal() {}
  union {
    RawData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RawDataDefaultTypeInternal _RawData_default_instance_;
}  // namespace detection
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fdetectionInternal_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_node_2fdetectionInternal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fdetectionInternal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fdetectionInternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawHeader, sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawHeader, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawHeader, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawBody, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawBody, cur_trace_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawBody, over_threshold_hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawData, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawData, body_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::RawData, signal_segments_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::detection::RawHeader)},
  { 8, -1, sizeof(::zb::dcts::node::detection::RawBody)},
  { 16, -1, sizeof(::zb::dcts::node::detection::RawData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_RawHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_RawBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_RawData_default_instance_),
};

const char descriptor_table_protodef_node_2fdetectionInternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034node/detectionInternal.proto\022\026zb.dcts."
  "node.detection\032\ndcts.proto\032\023node/spectru"
  "m.proto\"r\n\tRawHeader\022\023\n\013sweep_count\030\001 \001("
  "\r\022$\n\ttime_span\030\002 \001(\0132\021.zb.dcts.TimeSpan\022"
  "*\n\017device_position\030\003 \001(\0132\021.zb.dcts.Posit"
  "ion\"r\n\007RawBody\0227\n\tfreq_span\030\001 \001(\0132$.zb.d"
  "cts.node.spectrum.FrequencySpan\022\021\n\tcur_t"
  "race\030\002 \003(\002\022\033\n\023over_threshold_hits\030\003 \003(\002\""
  "\225\001\n\007RawData\0221\n\006header\030\001 \001(\0132!.zb.dcts.no"
  "de.detection.RawHeader\022-\n\004body\030\002 \001(\0132\037.z"
  "b.dcts.node.detection.RawBody\022(\n\017signal_"
  "segments\030\003 \003(\0132\017.zb.dcts.IRangeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fdetectionInternal_2eproto_deps[2] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_node_2fspectrum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fdetectionInternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fdetectionInternal_2eproto = {
  false, false, 479, descriptor_table_protodef_node_2fdetectionInternal_2eproto, "node/detectionInternal.proto", 
  &descriptor_table_node_2fdetectionInternal_2eproto_once, descriptor_table_node_2fdetectionInternal_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_node_2fdetectionInternal_2eproto::offsets,
  file_level_metadata_node_2fdetectionInternal_2eproto, file_level_enum_descriptors_node_2fdetectionInternal_2eproto, file_level_service_descriptors_node_2fdetectionInternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fdetectionInternal_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fdetectionInternal_2eproto);
  return descriptor_table_node_2fdetectionInternal_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fdetectionInternal_2eproto(&descriptor_table_node_2fdetectionInternal_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace detection {

// ===================================================================

class RawHeader::_Internal {
 public:
  static const ::zb::dcts::TimeSpan& time_span(const RawHeader* msg);
  static const ::zb::dcts::Position& device_position(const RawHeader* msg);
};

const ::zb::dcts::TimeSpan&
RawHeader::_Internal::time_span(const RawHeader* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
RawHeader::_Internal::device_position(const RawHeader* msg) {
  return *msg->device_position_;
}
void RawHeader::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void RawHeader::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
RawHeader::RawHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.RawHeader)
}
RawHeader::RawHeader(const RawHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  sweep_count_ = from.sweep_count_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.RawHeader)
}

void RawHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&time_span_)) + sizeof(sweep_count_));
}

RawHeader::~RawHeader() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.RawHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void RawHeader::ArenaDtor(void* object) {
  RawHeader* _this = reinterpret_cast< RawHeader* >(object);
  (void)_this;
}
void RawHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.RawHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  sweep_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sweep_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.RawHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sweep_count = 1;
  if (this->sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sweep_count(), target);
  }

  // .zb.dcts.TimeSpan time_span = 2;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 3;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.RawHeader)
  return target;
}

size_t RawHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.RawHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan time_span = 2;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 3;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sweep_count = 1;
  if (this->sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.RawHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RawHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.RawHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.RawHeader)
    MergeFrom(*source);
  }
}

void RawHeader::MergeFrom(const RawHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.RawHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sweep_count() != 0) {
    _internal_set_sweep_count(from._internal_sweep_count());
  }
}

void RawHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.RawHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawHeader::CopyFrom(const RawHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.RawHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawHeader::IsInitialized() const {
  return true;
}

void RawHeader::InternalSwap(RawHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawHeader, sweep_count_)
      + sizeof(RawHeader::sweep_count_)
      - PROTOBUF_FIELD_OFFSET(RawHeader, time_span_)>(
          reinterpret_cast<char*>(&time_span_),
          reinterpret_cast<char*>(&other->time_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawBody::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& freq_span(const RawBody* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
RawBody::_Internal::freq_span(const RawBody* msg) {
  return *msg->freq_span_;
}
void RawBody::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
RawBody::RawBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cur_trace_(arena),
  over_threshold_hits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.RawBody)
}
RawBody::RawBody(const RawBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cur_trace_(from.cur_trace_),
      over_threshold_hits_(from.over_threshold_hits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.RawBody)
}

void RawBody::SharedCtor() {
freq_span_ = nullptr;
}

RawBody::~RawBody() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.RawBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
}

void RawBody::ArenaDtor(void* object) {
  RawBody* _this = reinterpret_cast< RawBody* >(object);
  (void)_this;
}
void RawBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawBody::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.RawBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cur_trace_.Clear();
  over_threshold_hits_.Clear();
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float cur_trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_cur_trace(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_cur_trace(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float over_threshold_hits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_over_threshold_hits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_over_threshold_hits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.RawBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_span(this), target, stream);
  }

  // repeated float cur_trace = 2;
  if (this->_internal_cur_trace_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_cur_trace(), target);
  }

  // repeated float over_threshold_hits = 3;
  if (this->_internal_over_threshold_hits_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_over_threshold_hits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.RawBody)
  return target;
}

size_t RawBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.RawBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float cur_trace = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cur_trace_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cur_trace_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float over_threshold_hits = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_over_threshold_hits_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _over_threshold_hits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.RawBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RawBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.RawBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.RawBody)
    MergeFrom(*source);
  }
}

void RawBody::MergeFrom(const RawBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.RawBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cur_trace_.MergeFrom(from.cur_trace_);
  over_threshold_hits_.MergeFrom(from.over_threshold_hits_);
  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
}

void RawBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.RawBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBody::CopyFrom(const RawBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.RawBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawBody::IsInitialized() const {
  return true;
}

void RawBody::InternalSwap(RawBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cur_trace_.InternalSwap(&other->cur_trace_);
  over_threshold_hits_.InternalSwap(&other->over_threshold_hits_);
  swap(freq_span_, other->freq_span_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawData::_Internal {
 public:
  static const ::zb::dcts::node::detection::RawHeader& header(const RawData* msg);
  static const ::zb::dcts::node::detection::RawBody& body(const RawData* msg);
};

const ::zb::dcts::node::detection::RawHeader&
RawData::_Internal::header(const RawData* msg) {
  return *msg->header_;
}
const ::zb::dcts::node::detection::RawBody&
RawData::_Internal::body(const RawData* msg) {
  return *msg->body_;
}
void RawData::clear_signal_segments() {
  signal_segments_.Clear();
}
RawData::RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signal_segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.RawData)
}
RawData::RawData(const RawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signal_segments_(from.signal_segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::node::detection::RawHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::zb::dcts::node::detection::RawBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.RawData)
}

void RawData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_) -
    reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

RawData::~RawData() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.RawData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void RawData::ArenaDtor(void* object) {
  RawData* _this = reinterpret_cast< RawData* >(object);
  (void)_this;
}
void RawData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawData::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.RawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_segments_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.detection.RawHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.RawBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.IRange signal_segments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.RawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.detection.RawHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.node.detection.RawBody body = 2;
  if (this->has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  // repeated .zb.dcts.IRange signal_segments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_signal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.RawData)
  return target;
}

size_t RawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.RawData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.IRange signal_segments = 3;
  total_size += 1UL * this->_internal_signal_segments_size();
  for (const auto& msg : this->signal_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.detection.RawHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.node.detection.RawBody body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  const RawData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.RawData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.RawData)
    MergeFrom(*source);
  }
}

void RawData::MergeFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_segments_.MergeFrom(from.signal_segments_);
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::node::detection::RawHeader::MergeFrom(from._internal_header());
  }
  if (from.has_body()) {
    _internal_mutable_body()->::zb::dcts::node::detection::RawBody::MergeFrom(from._internal_body());
  }
}

void RawData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawData::CopyFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawData::IsInitialized() const {
  return true;
}

void RawData::InternalSwap(RawData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signal_segments_.InternalSwap(&other->signal_segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawData, body_)
      + sizeof(RawData::body_)
      - PROTOBUF_FIELD_OFFSET(RawData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace detection
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::RawHeader* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::RawHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::RawHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::RawBody* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::RawBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::RawBody >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::RawData* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::RawData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::RawData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
