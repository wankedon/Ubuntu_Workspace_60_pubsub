// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/nodeServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fnodeServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fnodeServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/node.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fnodeServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fnodeServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fnodeServer_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fnodeServer_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace server {
class NodeControl;
struct NodeControlDefaultTypeInternal;
extern NodeControlDefaultTypeInternal _NodeControl_default_instance_;
class ServerTaskElapsedTime;
struct ServerTaskElapsedTimeDefaultTypeInternal;
extern ServerTaskElapsedTimeDefaultTypeInternal _ServerTaskElapsedTime_default_instance_;
class ServerTaskSummary;
struct ServerTaskSummaryDefaultTypeInternal;
extern ServerTaskSummaryDefaultTypeInternal _ServerTaskSummary_default_instance_;
class ServerTasksInfo;
struct ServerTasksInfoDefaultTypeInternal;
extern ServerTasksInfoDefaultTypeInternal _ServerTasksInfo_default_instance_;
}  // namespace server
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::server::NodeControl* Arena::CreateMaybeMessage<::zb::dcts::node::server::NodeControl>(Arena*);
template<> ::zb::dcts::node::server::ServerTaskElapsedTime* Arena::CreateMaybeMessage<::zb::dcts::node::server::ServerTaskElapsedTime>(Arena*);
template<> ::zb::dcts::node::server::ServerTaskSummary* Arena::CreateMaybeMessage<::zb::dcts::node::server::ServerTaskSummary>(Arena*);
template<> ::zb::dcts::node::server::ServerTasksInfo* Arena::CreateMaybeMessage<::zb::dcts::node::server::ServerTasksInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace server {

enum NodeControlType : int {
  REBOOT_NODE = 0,
  SHUTDOWN_NODE = 1,
  ABORT_ALL = 2,
  SELF_TEST = 3,
  RENAME = 4,
  NodeControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NodeControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NodeControlType_IsValid(int value);
constexpr NodeControlType NodeControlType_MIN = REBOOT_NODE;
constexpr NodeControlType NodeControlType_MAX = RENAME;
constexpr int NodeControlType_ARRAYSIZE = NodeControlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeControlType_descriptor();
template<typename T>
inline const std::string& NodeControlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeControlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeControlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeControlType_descriptor(), enum_t_value);
}
inline bool NodeControlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeControlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeControlType>(
    NodeControlType_descriptor(), name, value);
}
// ===================================================================

class ServerTaskElapsedTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.server.ServerTaskElapsedTime) */ {
 public:
  inline ServerTaskElapsedTime() : ServerTaskElapsedTime(nullptr) {}
  virtual ~ServerTaskElapsedTime();
  explicit constexpr ServerTaskElapsedTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerTaskElapsedTime(const ServerTaskElapsedTime& from);
  ServerTaskElapsedTime(ServerTaskElapsedTime&& from) noexcept
    : ServerTaskElapsedTime() {
    *this = ::std::move(from);
  }

  inline ServerTaskElapsedTime& operator=(const ServerTaskElapsedTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerTaskElapsedTime& operator=(ServerTaskElapsedTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerTaskElapsedTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerTaskElapsedTime* internal_default_instance() {
    return reinterpret_cast<const ServerTaskElapsedTime*>(
               &_ServerTaskElapsedTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerTaskElapsedTime& a, ServerTaskElapsedTime& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerTaskElapsedTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerTaskElapsedTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerTaskElapsedTime* New() const final {
    return CreateMaybeMessage<ServerTaskElapsedTime>(nullptr);
  }

  ServerTaskElapsedTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerTaskElapsedTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerTaskElapsedTime& from);
  void MergeFrom(const ServerTaskElapsedTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerTaskElapsedTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.server.ServerTaskElapsedTime";
  }
  protected:
  explicit ServerTaskElapsedTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeServer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFromLastConsumeFieldNumber = 7,
    kTimeFromCreatedFieldNumber = 4,
    kTimeFromLastProductFieldNumber = 6,
  };
  // int32 time_from_last_consume = 7;
  void clear_time_from_last_consume();
  ::PROTOBUF_NAMESPACE_ID::int32 time_from_last_consume() const;
  void set_time_from_last_consume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_from_last_consume() const;
  void _internal_set_time_from_last_consume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_from_created = 4;
  void clear_time_from_created();
  ::PROTOBUF_NAMESPACE_ID::int32 time_from_created() const;
  void set_time_from_created(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_from_created() const;
  void _internal_set_time_from_created(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_from_last_product = 6;
  void clear_time_from_last_product();
  ::PROTOBUF_NAMESPACE_ID::int32 time_from_last_product() const;
  void set_time_from_last_product(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_from_last_product() const;
  void _internal_set_time_from_last_product(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.server.ServerTaskElapsedTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_from_last_consume_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_from_created_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_from_last_product_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeServer_2eproto;
};
// -------------------------------------------------------------------

class ServerTaskSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.server.ServerTaskSummary) */ {
 public:
  inline ServerTaskSummary() : ServerTaskSummary(nullptr) {}
  virtual ~ServerTaskSummary();
  explicit constexpr ServerTaskSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerTaskSummary(const ServerTaskSummary& from);
  ServerTaskSummary(ServerTaskSummary&& from) noexcept
    : ServerTaskSummary() {
    *this = ::std::move(from);
  }

  inline ServerTaskSummary& operator=(const ServerTaskSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerTaskSummary& operator=(ServerTaskSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerTaskSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerTaskSummary* internal_default_instance() {
    return reinterpret_cast<const ServerTaskSummary*>(
               &_ServerTaskSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerTaskSummary& a, ServerTaskSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerTaskSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerTaskSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerTaskSummary* New() const final {
    return CreateMaybeMessage<ServerTaskSummary>(nullptr);
  }

  ServerTaskSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerTaskSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerTaskSummary& from);
  void MergeFrom(const ServerTaskSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerTaskSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.server.ServerTaskSummary";
  }
  protected:
  explicit ServerTaskSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeServer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunnerFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTimeMeasumentFieldNumber = 5,
    kBufferSizeFieldNumber = 4,
  };
  // repeated .zb.dcts.node.NodeDevice task_runner = 3;
  int task_runner_size() const;
  private:
  int _internal_task_runner_size() const;
  public:
  void clear_task_runner();
  ::zb::dcts::node::NodeDevice* mutable_task_runner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
      mutable_task_runner();
  private:
  const ::zb::dcts::node::NodeDevice& _internal_task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* _internal_add_task_runner();
  public:
  const ::zb::dcts::node::NodeDevice& task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* add_task_runner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
      task_runner() const;

  // .zb.dcts.TaskId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::TaskId& id() const;
  ::zb::dcts::TaskId* release_id();
  ::zb::dcts::TaskId* mutable_id();
  void set_allocated_id(::zb::dcts::TaskId* id);
  private:
  const ::zb::dcts::TaskId& _internal_id() const;
  ::zb::dcts::TaskId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::TaskId* id);
  ::zb::dcts::TaskId* unsafe_arena_release_id();

  // .zb.dcts.node.TaskType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zb::dcts::node::TaskType& type() const;
  ::zb::dcts::node::TaskType* release_type();
  ::zb::dcts::node::TaskType* mutable_type();
  void set_allocated_type(::zb::dcts::node::TaskType* type);
  private:
  const ::zb::dcts::node::TaskType& _internal_type() const;
  ::zb::dcts::node::TaskType* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zb::dcts::node::TaskType* type);
  ::zb::dcts::node::TaskType* unsafe_arena_release_type();

  // .zb.dcts.node.server.ServerTaskElapsedTime time_measument = 5;
  bool has_time_measument() const;
  private:
  bool _internal_has_time_measument() const;
  public:
  void clear_time_measument();
  const ::zb::dcts::node::server::ServerTaskElapsedTime& time_measument() const;
  ::zb::dcts::node::server::ServerTaskElapsedTime* release_time_measument();
  ::zb::dcts::node::server::ServerTaskElapsedTime* mutable_time_measument();
  void set_allocated_time_measument(::zb::dcts::node::server::ServerTaskElapsedTime* time_measument);
  private:
  const ::zb::dcts::node::server::ServerTaskElapsedTime& _internal_time_measument() const;
  ::zb::dcts::node::server::ServerTaskElapsedTime* _internal_mutable_time_measument();
  public:
  void unsafe_arena_set_allocated_time_measument(
      ::zb::dcts::node::server::ServerTaskElapsedTime* time_measument);
  ::zb::dcts::node::server::ServerTaskElapsedTime* unsafe_arena_release_time_measument();

  // int32 buffer_size = 4;
  void clear_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size() const;
  void set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffer_size() const;
  void _internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.server.ServerTaskSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice > task_runner_;
  ::zb::dcts::TaskId* id_;
  ::zb::dcts::node::TaskType* type_;
  ::zb::dcts::node::server::ServerTaskElapsedTime* time_measument_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeServer_2eproto;
};
// -------------------------------------------------------------------

class ServerTasksInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.server.ServerTasksInfo) */ {
 public:
  inline ServerTasksInfo() : ServerTasksInfo(nullptr) {}
  virtual ~ServerTasksInfo();
  explicit constexpr ServerTasksInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerTasksInfo(const ServerTasksInfo& from);
  ServerTasksInfo(ServerTasksInfo&& from) noexcept
    : ServerTasksInfo() {
    *this = ::std::move(from);
  }

  inline ServerTasksInfo& operator=(const ServerTasksInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerTasksInfo& operator=(ServerTasksInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerTasksInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerTasksInfo* internal_default_instance() {
    return reinterpret_cast<const ServerTasksInfo*>(
               &_ServerTasksInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerTasksInfo& a, ServerTasksInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerTasksInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerTasksInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerTasksInfo* New() const final {
    return CreateMaybeMessage<ServerTasksInfo>(nullptr);
  }

  ServerTasksInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerTasksInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerTasksInfo& from);
  void MergeFrom(const ServerTasksInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerTasksInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.server.ServerTasksInfo";
  }
  protected:
  explicit ServerTasksInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeServer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
  };
  // repeated .zb.dcts.node.server.ServerTaskSummary tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::zb::dcts::node::server::ServerTaskSummary* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::server::ServerTaskSummary >*
      mutable_tasks();
  private:
  const ::zb::dcts::node::server::ServerTaskSummary& _internal_tasks(int index) const;
  ::zb::dcts::node::server::ServerTaskSummary* _internal_add_tasks();
  public:
  const ::zb::dcts::node::server::ServerTaskSummary& tasks(int index) const;
  ::zb::dcts::node::server::ServerTaskSummary* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::server::ServerTaskSummary >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.node.server.ServerTasksInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::server::ServerTaskSummary > tasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeServer_2eproto;
};
// -------------------------------------------------------------------

class NodeControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.server.NodeControl) */ {
 public:
  inline NodeControl() : NodeControl(nullptr) {}
  virtual ~NodeControl();
  explicit constexpr NodeControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeControl(const NodeControl& from);
  NodeControl(NodeControl&& from) noexcept
    : NodeControl() {
    *this = ::std::move(from);
  }

  inline NodeControl& operator=(const NodeControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeControl& operator=(NodeControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeControl* internal_default_instance() {
    return reinterpret_cast<const NodeControl*>(
               &_NodeControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NodeControl& a, NodeControl& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeControl* New() const final {
    return CreateMaybeMessage<NodeControl>(nullptr);
  }

  NodeControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeControl& from);
  void MergeFrom(const NodeControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.server.NodeControl";
  }
  protected:
  explicit NodeControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeServer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 3,
    kNodeIdFieldNumber = 1,
    kControlTypeFieldNumber = 2,
  };
  // string detail = 3;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // .zb.dcts.node.NodeId node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  const ::zb::dcts::node::NodeId& node_id() const;
  ::zb::dcts::node::NodeId* release_node_id();
  ::zb::dcts::node::NodeId* mutable_node_id();
  void set_allocated_node_id(::zb::dcts::node::NodeId* node_id);
  private:
  const ::zb::dcts::node::NodeId& _internal_node_id() const;
  ::zb::dcts::node::NodeId* _internal_mutable_node_id();
  public:
  void unsafe_arena_set_allocated_node_id(
      ::zb::dcts::node::NodeId* node_id);
  ::zb::dcts::node::NodeId* unsafe_arena_release_node_id();

  // .zb.dcts.node.server.NodeControlType control_type = 2;
  void clear_control_type();
  ::zb::dcts::node::server::NodeControlType control_type() const;
  void set_control_type(::zb::dcts::node::server::NodeControlType value);
  private:
  ::zb::dcts::node::server::NodeControlType _internal_control_type() const;
  void _internal_set_control_type(::zb::dcts::node::server::NodeControlType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.server.NodeControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  ::zb::dcts::node::NodeId* node_id_;
  int control_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerTaskElapsedTime

// int32 time_from_created = 4;
inline void ServerTaskElapsedTime::clear_time_from_created() {
  time_from_created_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerTaskElapsedTime::_internal_time_from_created() const {
  return time_from_created_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerTaskElapsedTime::time_from_created() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.ServerTaskElapsedTime.time_from_created)
  return _internal_time_from_created();
}
inline void ServerTaskElapsedTime::_internal_set_time_from_created(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_from_created_ = value;
}
inline void ServerTaskElapsedTime::set_time_from_created(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_from_created(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.server.ServerTaskElapsedTime.time_from_created)
}

// int32 time_from_last_product = 6;
inline void ServerTaskElapsedTime::clear_time_from_last_product() {
  time_from_last_product_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerTaskElapsedTime::_internal_time_from_last_product() const {
  return time_from_last_product_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerTaskElapsedTime::time_from_last_product() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.ServerTaskElapsedTime.time_from_last_product)
  return _internal_time_from_last_product();
}
inline void ServerTaskElapsedTime::_internal_set_time_from_last_product(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_from_last_product_ = value;
}
inline void ServerTaskElapsedTime::set_time_from_last_product(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_from_last_product(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.server.ServerTaskElapsedTime.time_from_last_product)
}

// int32 time_from_last_consume = 7;
inline void ServerTaskElapsedTime::clear_time_from_last_consume() {
  time_from_last_consume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerTaskElapsedTime::_internal_time_from_last_consume() const {
  return time_from_last_consume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerTaskElapsedTime::time_from_last_consume() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.ServerTaskElapsedTime.time_from_last_consume)
  return _internal_time_from_last_consume();
}
inline void ServerTaskElapsedTime::_internal_set_time_from_last_consume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_from_last_consume_ = value;
}
inline void ServerTaskElapsedTime::set_time_from_last_consume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_from_last_consume(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.server.ServerTaskElapsedTime.time_from_last_consume)
}

// -------------------------------------------------------------------

// ServerTaskSummary

// .zb.dcts.TaskId id = 1;
inline bool ServerTaskSummary::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ServerTaskSummary::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::TaskId& ServerTaskSummary::_internal_id() const {
  const ::zb::dcts::TaskId* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TaskId&>(
      ::zb::dcts::_TaskId_default_instance_);
}
inline const ::zb::dcts::TaskId& ServerTaskSummary::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.ServerTaskSummary.id)
  return _internal_id();
}
inline void ServerTaskSummary::unsafe_arena_set_allocated_id(
    ::zb::dcts::TaskId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.server.ServerTaskSummary.id)
}
inline ::zb::dcts::TaskId* ServerTaskSummary::release_id() {
  
  ::zb::dcts::TaskId* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TaskId* ServerTaskSummary::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.server.ServerTaskSummary.id)
  
  ::zb::dcts::TaskId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::TaskId* ServerTaskSummary::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TaskId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::TaskId* ServerTaskSummary::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.server.ServerTaskSummary.id)
  return _internal_mutable_id();
}
inline void ServerTaskSummary::set_allocated_id(::zb::dcts::TaskId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.server.ServerTaskSummary.id)
}

// .zb.dcts.node.TaskType type = 2;
inline bool ServerTaskSummary::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool ServerTaskSummary::has_type() const {
  return _internal_has_type();
}
inline const ::zb::dcts::node::TaskType& ServerTaskSummary::_internal_type() const {
  const ::zb::dcts::node::TaskType* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::TaskType&>(
      ::zb::dcts::node::_TaskType_default_instance_);
}
inline const ::zb::dcts::node::TaskType& ServerTaskSummary::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.ServerTaskSummary.type)
  return _internal_type();
}
inline void ServerTaskSummary::unsafe_arena_set_allocated_type(
    ::zb::dcts::node::TaskType* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.server.ServerTaskSummary.type)
}
inline ::zb::dcts::node::TaskType* ServerTaskSummary::release_type() {
  
  ::zb::dcts::node::TaskType* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::TaskType* ServerTaskSummary::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.server.ServerTaskSummary.type)
  
  ::zb::dcts::node::TaskType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::TaskType* ServerTaskSummary::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::TaskType>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::zb::dcts::node::TaskType* ServerTaskSummary::mutable_type() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.server.ServerTaskSummary.type)
  return _internal_mutable_type();
}
inline void ServerTaskSummary::set_allocated_type(::zb::dcts::node::TaskType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.server.ServerTaskSummary.type)
}

// repeated .zb.dcts.node.NodeDevice task_runner = 3;
inline int ServerTaskSummary::_internal_task_runner_size() const {
  return task_runner_.size();
}
inline int ServerTaskSummary::task_runner_size() const {
  return _internal_task_runner_size();
}
inline ::zb::dcts::node::NodeDevice* ServerTaskSummary::mutable_task_runner(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.server.ServerTaskSummary.task_runner)
  return task_runner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
ServerTaskSummary::mutable_task_runner() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.server.ServerTaskSummary.task_runner)
  return &task_runner_;
}
inline const ::zb::dcts::node::NodeDevice& ServerTaskSummary::_internal_task_runner(int index) const {
  return task_runner_.Get(index);
}
inline const ::zb::dcts::node::NodeDevice& ServerTaskSummary::task_runner(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.ServerTaskSummary.task_runner)
  return _internal_task_runner(index);
}
inline ::zb::dcts::node::NodeDevice* ServerTaskSummary::_internal_add_task_runner() {
  return task_runner_.Add();
}
inline ::zb::dcts::node::NodeDevice* ServerTaskSummary::add_task_runner() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.server.ServerTaskSummary.task_runner)
  return _internal_add_task_runner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
ServerTaskSummary::task_runner() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.server.ServerTaskSummary.task_runner)
  return task_runner_;
}

// int32 buffer_size = 4;
inline void ServerTaskSummary::clear_buffer_size() {
  buffer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerTaskSummary::_internal_buffer_size() const {
  return buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerTaskSummary::buffer_size() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.ServerTaskSummary.buffer_size)
  return _internal_buffer_size();
}
inline void ServerTaskSummary::_internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffer_size_ = value;
}
inline void ServerTaskSummary::set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffer_size(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.server.ServerTaskSummary.buffer_size)
}

// .zb.dcts.node.server.ServerTaskElapsedTime time_measument = 5;
inline bool ServerTaskSummary::_internal_has_time_measument() const {
  return this != internal_default_instance() && time_measument_ != nullptr;
}
inline bool ServerTaskSummary::has_time_measument() const {
  return _internal_has_time_measument();
}
inline void ServerTaskSummary::clear_time_measument() {
  if (GetArena() == nullptr && time_measument_ != nullptr) {
    delete time_measument_;
  }
  time_measument_ = nullptr;
}
inline const ::zb::dcts::node::server::ServerTaskElapsedTime& ServerTaskSummary::_internal_time_measument() const {
  const ::zb::dcts::node::server::ServerTaskElapsedTime* p = time_measument_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::server::ServerTaskElapsedTime&>(
      ::zb::dcts::node::server::_ServerTaskElapsedTime_default_instance_);
}
inline const ::zb::dcts::node::server::ServerTaskElapsedTime& ServerTaskSummary::time_measument() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.ServerTaskSummary.time_measument)
  return _internal_time_measument();
}
inline void ServerTaskSummary::unsafe_arena_set_allocated_time_measument(
    ::zb::dcts::node::server::ServerTaskElapsedTime* time_measument) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_measument_);
  }
  time_measument_ = time_measument;
  if (time_measument) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.server.ServerTaskSummary.time_measument)
}
inline ::zb::dcts::node::server::ServerTaskElapsedTime* ServerTaskSummary::release_time_measument() {
  
  ::zb::dcts::node::server::ServerTaskElapsedTime* temp = time_measument_;
  time_measument_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::server::ServerTaskElapsedTime* ServerTaskSummary::unsafe_arena_release_time_measument() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.server.ServerTaskSummary.time_measument)
  
  ::zb::dcts::node::server::ServerTaskElapsedTime* temp = time_measument_;
  time_measument_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::server::ServerTaskElapsedTime* ServerTaskSummary::_internal_mutable_time_measument() {
  
  if (time_measument_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::server::ServerTaskElapsedTime>(GetArena());
    time_measument_ = p;
  }
  return time_measument_;
}
inline ::zb::dcts::node::server::ServerTaskElapsedTime* ServerTaskSummary::mutable_time_measument() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.server.ServerTaskSummary.time_measument)
  return _internal_mutable_time_measument();
}
inline void ServerTaskSummary::set_allocated_time_measument(::zb::dcts::node::server::ServerTaskElapsedTime* time_measument) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete time_measument_;
  }
  if (time_measument) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_measument);
    if (message_arena != submessage_arena) {
      time_measument = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_measument, submessage_arena);
    }
    
  } else {
    
  }
  time_measument_ = time_measument;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.server.ServerTaskSummary.time_measument)
}

// -------------------------------------------------------------------

// ServerTasksInfo

// repeated .zb.dcts.node.server.ServerTaskSummary tasks = 1;
inline int ServerTasksInfo::_internal_tasks_size() const {
  return tasks_.size();
}
inline int ServerTasksInfo::tasks_size() const {
  return _internal_tasks_size();
}
inline void ServerTasksInfo::clear_tasks() {
  tasks_.Clear();
}
inline ::zb::dcts::node::server::ServerTaskSummary* ServerTasksInfo::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.server.ServerTasksInfo.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::server::ServerTaskSummary >*
ServerTasksInfo::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.server.ServerTasksInfo.tasks)
  return &tasks_;
}
inline const ::zb::dcts::node::server::ServerTaskSummary& ServerTasksInfo::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::zb::dcts::node::server::ServerTaskSummary& ServerTasksInfo::tasks(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.ServerTasksInfo.tasks)
  return _internal_tasks(index);
}
inline ::zb::dcts::node::server::ServerTaskSummary* ServerTasksInfo::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::zb::dcts::node::server::ServerTaskSummary* ServerTasksInfo::add_tasks() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.server.ServerTasksInfo.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::server::ServerTaskSummary >&
ServerTasksInfo::tasks() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.server.ServerTasksInfo.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// NodeControl

// .zb.dcts.node.NodeId node_id = 1;
inline bool NodeControl::_internal_has_node_id() const {
  return this != internal_default_instance() && node_id_ != nullptr;
}
inline bool NodeControl::has_node_id() const {
  return _internal_has_node_id();
}
inline const ::zb::dcts::node::NodeId& NodeControl::_internal_node_id() const {
  const ::zb::dcts::node::NodeId* p = node_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeId&>(
      ::zb::dcts::node::_NodeId_default_instance_);
}
inline const ::zb::dcts::node::NodeId& NodeControl::node_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.NodeControl.node_id)
  return _internal_node_id();
}
inline void NodeControl::unsafe_arena_set_allocated_node_id(
    ::zb::dcts::node::NodeId* node_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.server.NodeControl.node_id)
}
inline ::zb::dcts::node::NodeId* NodeControl::release_node_id() {
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeId* NodeControl::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.server.NodeControl.node_id)
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeId* NodeControl::_internal_mutable_node_id() {
  
  if (node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeId>(GetArena());
    node_id_ = p;
  }
  return node_id_;
}
inline ::zb::dcts::node::NodeId* NodeControl::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.server.NodeControl.node_id)
  return _internal_mutable_node_id();
}
inline void NodeControl::set_allocated_node_id(::zb::dcts::node::NodeId* node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  if (node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id)->GetArena();
    if (message_arena != submessage_arena) {
      node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_id, submessage_arena);
    }
    
  } else {
    
  }
  node_id_ = node_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.server.NodeControl.node_id)
}

// .zb.dcts.node.server.NodeControlType control_type = 2;
inline void NodeControl::clear_control_type() {
  control_type_ = 0;
}
inline ::zb::dcts::node::server::NodeControlType NodeControl::_internal_control_type() const {
  return static_cast< ::zb::dcts::node::server::NodeControlType >(control_type_);
}
inline ::zb::dcts::node::server::NodeControlType NodeControl::control_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.NodeControl.control_type)
  return _internal_control_type();
}
inline void NodeControl::_internal_set_control_type(::zb::dcts::node::server::NodeControlType value) {
  
  control_type_ = value;
}
inline void NodeControl::set_control_type(::zb::dcts::node::server::NodeControlType value) {
  _internal_set_control_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.server.NodeControl.control_type)
}

// string detail = 3;
inline void NodeControl::clear_detail() {
  detail_.ClearToEmpty();
}
inline const std::string& NodeControl::detail() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.server.NodeControl.detail)
  return _internal_detail();
}
inline void NodeControl::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.server.NodeControl.detail)
}
inline std::string* NodeControl::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.server.NodeControl.detail)
  return _internal_mutable_detail();
}
inline const std::string& NodeControl::_internal_detail() const {
  return detail_.Get();
}
inline void NodeControl::_internal_set_detail(const std::string& value) {
  
  detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeControl::set_detail(std::string&& value) {
  
  detail_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.server.NodeControl.detail)
}
inline void NodeControl::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.server.NodeControl.detail)
}
inline void NodeControl::set_detail(const char* value,
    size_t size) {
  
  detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.server.NodeControl.detail)
}
inline std::string* NodeControl::_internal_mutable_detail() {
  
  return detail_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeControl::release_detail() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.server.NodeControl.detail)
  return detail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeControl::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.server.NodeControl.detail)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace node
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::node::server::NodeControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::server::NodeControlType>() {
  return ::zb::dcts::node::server::NodeControlType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fnodeServer_2eproto
