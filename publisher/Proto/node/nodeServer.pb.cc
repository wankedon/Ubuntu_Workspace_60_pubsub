// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/nodeServer.proto

#include "node/nodeServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace server {
constexpr ServerTaskElapsedTime::ServerTaskElapsedTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_from_last_consume_(0)
  , time_from_created_(0)
  , time_from_last_product_(0){}
struct ServerTaskElapsedTimeDefaultTypeInternal {
  constexpr ServerTaskElapsedTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerTaskElapsedTimeDefaultTypeInternal() {}
  union {
    ServerTaskElapsedTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerTaskElapsedTimeDefaultTypeInternal _ServerTaskElapsedTime_default_instance_;
constexpr ServerTaskSummary::ServerTaskSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_runner_()
  , id_(nullptr)
  , type_(nullptr)
  , time_measument_(nullptr)
  , buffer_size_(0){}
struct ServerTaskSummaryDefaultTypeInternal {
  constexpr ServerTaskSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerTaskSummaryDefaultTypeInternal() {}
  union {
    ServerTaskSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerTaskSummaryDefaultTypeInternal _ServerTaskSummary_default_instance_;
constexpr ServerTasksInfo::ServerTasksInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_(){}
struct ServerTasksInfoDefaultTypeInternal {
  constexpr ServerTasksInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerTasksInfoDefaultTypeInternal() {}
  union {
    ServerTasksInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerTasksInfoDefaultTypeInternal _ServerTasksInfo_default_instance_;
constexpr NodeControl::NodeControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_id_(nullptr)
  , control_type_(0)
{}
struct NodeControlDefaultTypeInternal {
  constexpr NodeControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeControlDefaultTypeInternal() {}
  union {
    NodeControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeControlDefaultTypeInternal _NodeControl_default_instance_;
}  // namespace server
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fnodeServer_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fnodeServer_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fnodeServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fnodeServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskElapsedTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskElapsedTime, time_from_created_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskElapsedTime, time_from_last_product_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskElapsedTime, time_from_last_consume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskSummary, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskSummary, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskSummary, task_runner_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskSummary, buffer_size_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTaskSummary, time_measument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTasksInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::ServerTasksInfo, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::NodeControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::NodeControl, node_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::NodeControl, control_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::server::NodeControl, detail_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::server::ServerTaskElapsedTime)},
  { 8, -1, sizeof(::zb::dcts::node::server::ServerTaskSummary)},
  { 18, -1, sizeof(::zb::dcts::node::server::ServerTasksInfo)},
  { 24, -1, sizeof(::zb::dcts::node::server::NodeControl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::server::_ServerTaskElapsedTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::server::_ServerTaskSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::server::_ServerTasksInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::server::_NodeControl_default_instance_),
};

const char descriptor_table_protodef_node_2fnodeServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025node/nodeServer.proto\022\023zb.dcts.node.se"
  "rver\032\ndcts.proto\032\017node/node.proto\032\033googl"
  "e/protobuf/empty.proto\"r\n\025ServerTaskElap"
  "sedTime\022\031\n\021time_from_created\030\004 \001(\005\022\036\n\026ti"
  "me_from_last_product\030\006 \001(\005\022\036\n\026time_from_"
  "last_consume\030\007 \001(\005\"\336\001\n\021ServerTaskSummary"
  "\022\033\n\002id\030\001 \001(\0132\017.zb.dcts.TaskId\022$\n\004type\030\002 "
  "\001(\0132\026.zb.dcts.node.TaskType\022-\n\013task_runn"
  "er\030\003 \003(\0132\030.zb.dcts.node.NodeDevice\022\023\n\013bu"
  "ffer_size\030\004 \001(\005\022B\n\016time_measument\030\005 \001(\0132"
  "*.zb.dcts.node.server.ServerTaskElapsedT"
  "ime\"H\n\017ServerTasksInfo\0225\n\005tasks\030\001 \003(\0132&."
  "zb.dcts.node.server.ServerTaskSummary\"\200\001"
  "\n\013NodeControl\022%\n\007node_id\030\001 \001(\0132\024.zb.dcts"
  ".node.NodeId\022:\n\014control_type\030\002 \001(\0162$.zb."
  "dcts.node.server.NodeControlType\022\016\n\006deta"
  "il\030\003 \001(\t*_\n\017NodeControlType\022\017\n\013REBOOT_NO"
  "DE\020\000\022\021\n\rSHUTDOWN_NODE\020\001\022\r\n\tABORT_ALL\020\002\022\r"
  "\n\tSELF_TEST\020\003\022\n\n\006RENAME\020\0042\307\004\n\016GeneralSer"
  "vice\022A\n\014ListAllNodes\022\026.google.protobuf.E"
  "mpty\032\027.zb.dcts.node.NodesInfo\"\000\022=\n\013GetNo"
  "deInfo\022\024.zb.dcts.node.NodeId\032\026.zb.dcts.n"
  "ode.NodeInfo\"\000\022M\n\017PostNodeControl\022 .zb.d"
  "cts.node.server.NodeControl\032\026.google.pro"
  "tobuf.Empty\"\000\022S\n\027GetNodeControlLastReply"
  "\022\024.zb.dcts.node.NodeId\032 .zb.dcts.node.se"
  "rver.NodeControl\"\000\022N\n\014ListAllTasks\022\026.goo"
  "gle.protobuf.Empty\032$.zb.dcts.node.server"
  ".ServerTasksInfo\"\000\022J\n\rGetTaskSumary\022\017.zb"
  ".dcts.TaskId\032&.zb.dcts.node.server.Serve"
  "rTaskSummary\"\000\0225\n\010AbortOne\022\017.zb.dcts.Tas"
  "kId\032\026.google.protobuf.Empty\"\000\022<\n\010AbortAl"
  "l\022\026.google.protobuf.Empty\032\026.google.proto"
  "buf.Empty\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fnodeServer_2eproto_deps[3] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_node_2fnode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fnodeServer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fnodeServer_2eproto = {
  false, false, 1339, descriptor_table_protodef_node_2fnodeServer_2eproto, "node/nodeServer.proto", 
  &descriptor_table_node_2fnodeServer_2eproto_once, descriptor_table_node_2fnodeServer_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_node_2fnodeServer_2eproto::offsets,
  file_level_metadata_node_2fnodeServer_2eproto, file_level_enum_descriptors_node_2fnodeServer_2eproto, file_level_service_descriptors_node_2fnodeServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fnodeServer_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnodeServer_2eproto);
  return descriptor_table_node_2fnodeServer_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fnodeServer_2eproto(&descriptor_table_node_2fnodeServer_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeControlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnodeServer_2eproto);
  return file_level_enum_descriptors_node_2fnodeServer_2eproto[0];
}
bool NodeControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ServerTaskElapsedTime::_Internal {
 public:
};

ServerTaskElapsedTime::ServerTaskElapsedTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.server.ServerTaskElapsedTime)
}
ServerTaskElapsedTime::ServerTaskElapsedTime(const ServerTaskElapsedTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_from_last_consume_, &from.time_from_last_consume_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_from_last_product_) -
    reinterpret_cast<char*>(&time_from_last_consume_)) + sizeof(time_from_last_product_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.server.ServerTaskElapsedTime)
}

void ServerTaskElapsedTime::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_from_last_consume_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_from_last_product_) -
    reinterpret_cast<char*>(&time_from_last_consume_)) + sizeof(time_from_last_product_));
}

ServerTaskElapsedTime::~ServerTaskElapsedTime() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.server.ServerTaskElapsedTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerTaskElapsedTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerTaskElapsedTime::ArenaDtor(void* object) {
  ServerTaskElapsedTime* _this = reinterpret_cast< ServerTaskElapsedTime* >(object);
  (void)_this;
}
void ServerTaskElapsedTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerTaskElapsedTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerTaskElapsedTime::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.server.ServerTaskElapsedTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_from_last_consume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_from_last_product_) -
      reinterpret_cast<char*>(&time_from_last_consume_)) + sizeof(time_from_last_product_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerTaskElapsedTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 time_from_created = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_from_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_from_last_product = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          time_from_last_product_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_from_last_consume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          time_from_last_consume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerTaskElapsedTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.server.ServerTaskElapsedTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time_from_created = 4;
  if (this->time_from_created() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time_from_created(), target);
  }

  // int32 time_from_last_product = 6;
  if (this->time_from_last_product() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_time_from_last_product(), target);
  }

  // int32 time_from_last_consume = 7;
  if (this->time_from_last_consume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_time_from_last_consume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.server.ServerTaskElapsedTime)
  return target;
}

size_t ServerTaskElapsedTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.server.ServerTaskElapsedTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time_from_last_consume = 7;
  if (this->time_from_last_consume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_from_last_consume());
  }

  // int32 time_from_created = 4;
  if (this->time_from_created() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_from_created());
  }

  // int32 time_from_last_product = 6;
  if (this->time_from_last_product() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_from_last_product());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerTaskElapsedTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.server.ServerTaskElapsedTime)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerTaskElapsedTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerTaskElapsedTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.server.ServerTaskElapsedTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.server.ServerTaskElapsedTime)
    MergeFrom(*source);
  }
}

void ServerTaskElapsedTime::MergeFrom(const ServerTaskElapsedTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.server.ServerTaskElapsedTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_from_last_consume() != 0) {
    _internal_set_time_from_last_consume(from._internal_time_from_last_consume());
  }
  if (from.time_from_created() != 0) {
    _internal_set_time_from_created(from._internal_time_from_created());
  }
  if (from.time_from_last_product() != 0) {
    _internal_set_time_from_last_product(from._internal_time_from_last_product());
  }
}

void ServerTaskElapsedTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.server.ServerTaskElapsedTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTaskElapsedTime::CopyFrom(const ServerTaskElapsedTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.server.ServerTaskElapsedTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTaskElapsedTime::IsInitialized() const {
  return true;
}

void ServerTaskElapsedTime::InternalSwap(ServerTaskElapsedTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerTaskElapsedTime, time_from_last_product_)
      + sizeof(ServerTaskElapsedTime::time_from_last_product_)
      - PROTOBUF_FIELD_OFFSET(ServerTaskElapsedTime, time_from_last_consume_)>(
          reinterpret_cast<char*>(&time_from_last_consume_),
          reinterpret_cast<char*>(&other->time_from_last_consume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerTaskElapsedTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerTaskSummary::_Internal {
 public:
  static const ::zb::dcts::TaskId& id(const ServerTaskSummary* msg);
  static const ::zb::dcts::node::TaskType& type(const ServerTaskSummary* msg);
  static const ::zb::dcts::node::server::ServerTaskElapsedTime& time_measument(const ServerTaskSummary* msg);
};

const ::zb::dcts::TaskId&
ServerTaskSummary::_Internal::id(const ServerTaskSummary* msg) {
  return *msg->id_;
}
const ::zb::dcts::node::TaskType&
ServerTaskSummary::_Internal::type(const ServerTaskSummary* msg) {
  return *msg->type_;
}
const ::zb::dcts::node::server::ServerTaskElapsedTime&
ServerTaskSummary::_Internal::time_measument(const ServerTaskSummary* msg) {
  return *msg->time_measument_;
}
void ServerTaskSummary::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void ServerTaskSummary::clear_type() {
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
void ServerTaskSummary::clear_task_runner() {
  task_runner_.Clear();
}
ServerTaskSummary::ServerTaskSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_runner_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.server.ServerTaskSummary)
}
ServerTaskSummary::ServerTaskSummary(const ServerTaskSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_runner_(from.task_runner_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::TaskId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::zb::dcts::node::TaskType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_time_measument()) {
    time_measument_ = new ::zb::dcts::node::server::ServerTaskElapsedTime(*from.time_measument_);
  } else {
    time_measument_ = nullptr;
  }
  buffer_size_ = from.buffer_size_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.server.ServerTaskSummary)
}

void ServerTaskSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&buffer_size_) -
    reinterpret_cast<char*>(&id_)) + sizeof(buffer_size_));
}

ServerTaskSummary::~ServerTaskSummary() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.server.ServerTaskSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerTaskSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete time_measument_;
}

void ServerTaskSummary::ArenaDtor(void* object) {
  ServerTaskSummary* _this = reinterpret_cast< ServerTaskSummary* >(object);
  (void)_this;
}
void ServerTaskSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerTaskSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerTaskSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.server.ServerTaskSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_runner_.Clear();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArena() == nullptr && time_measument_ != nullptr) {
    delete time_measument_;
  }
  time_measument_ = nullptr;
  buffer_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerTaskSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TaskId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.TaskType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.NodeDevice task_runner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_runner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 buffer_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.server.ServerTaskElapsedTime time_measument = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_measument(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerTaskSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.server.ServerTaskSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TaskId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .zb.dcts.node.TaskType type = 2;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // repeated .zb.dcts.node.NodeDevice task_runner = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_runner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_task_runner(i), target, stream);
  }

  // int32 buffer_size = 4;
  if (this->buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_buffer_size(), target);
  }

  // .zb.dcts.node.server.ServerTaskElapsedTime time_measument = 5;
  if (this->has_time_measument()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_measument(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.server.ServerTaskSummary)
  return target;
}

size_t ServerTaskSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.server.ServerTaskSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 3;
  total_size += 1UL * this->_internal_task_runner_size();
  for (const auto& msg : this->task_runner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.TaskId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .zb.dcts.node.TaskType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .zb.dcts.node.server.ServerTaskElapsedTime time_measument = 5;
  if (this->has_time_measument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_measument_);
  }

  // int32 buffer_size = 4;
  if (this->buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffer_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerTaskSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.server.ServerTaskSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerTaskSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerTaskSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.server.ServerTaskSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.server.ServerTaskSummary)
    MergeFrom(*source);
  }
}

void ServerTaskSummary::MergeFrom(const ServerTaskSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.server.ServerTaskSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_runner_.MergeFrom(from.task_runner_);
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::TaskId::MergeFrom(from._internal_id());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::zb::dcts::node::TaskType::MergeFrom(from._internal_type());
  }
  if (from.has_time_measument()) {
    _internal_mutable_time_measument()->::zb::dcts::node::server::ServerTaskElapsedTime::MergeFrom(from._internal_time_measument());
  }
  if (from.buffer_size() != 0) {
    _internal_set_buffer_size(from._internal_buffer_size());
  }
}

void ServerTaskSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.server.ServerTaskSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTaskSummary::CopyFrom(const ServerTaskSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.server.ServerTaskSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTaskSummary::IsInitialized() const {
  return true;
}

void ServerTaskSummary::InternalSwap(ServerTaskSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_runner_.InternalSwap(&other->task_runner_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerTaskSummary, buffer_size_)
      + sizeof(ServerTaskSummary::buffer_size_)
      - PROTOBUF_FIELD_OFFSET(ServerTaskSummary, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerTaskSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerTasksInfo::_Internal {
 public:
};

ServerTasksInfo::ServerTasksInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.server.ServerTasksInfo)
}
ServerTasksInfo::ServerTasksInfo(const ServerTasksInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.server.ServerTasksInfo)
}

void ServerTasksInfo::SharedCtor() {
}

ServerTasksInfo::~ServerTasksInfo() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.server.ServerTasksInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerTasksInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerTasksInfo::ArenaDtor(void* object) {
  ServerTasksInfo* _this = reinterpret_cast< ServerTasksInfo* >(object);
  (void)_this;
}
void ServerTasksInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerTasksInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerTasksInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.server.ServerTasksInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerTasksInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.server.ServerTaskSummary tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerTasksInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.server.ServerTasksInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.server.ServerTaskSummary tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.server.ServerTasksInfo)
  return target;
}

size_t ServerTasksInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.server.ServerTasksInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.server.ServerTaskSummary tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerTasksInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.server.ServerTasksInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerTasksInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerTasksInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.server.ServerTasksInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.server.ServerTasksInfo)
    MergeFrom(*source);
  }
}

void ServerTasksInfo::MergeFrom(const ServerTasksInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.server.ServerTasksInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
}

void ServerTasksInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.server.ServerTasksInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTasksInfo::CopyFrom(const ServerTasksInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.server.ServerTasksInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTasksInfo::IsInitialized() const {
  return true;
}

void ServerTasksInfo::InternalSwap(ServerTasksInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerTasksInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeControl::_Internal {
 public:
  static const ::zb::dcts::node::NodeId& node_id(const NodeControl* msg);
};

const ::zb::dcts::node::NodeId&
NodeControl::_Internal::node_id(const NodeControl* msg) {
  return *msg->node_id_;
}
void NodeControl::clear_node_id() {
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
}
NodeControl::NodeControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.server.NodeControl)
}
NodeControl::NodeControl(const NodeControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detail(), 
      GetArena());
  }
  if (from._internal_has_node_id()) {
    node_id_ = new ::zb::dcts::node::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  control_type_ = from.control_type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.server.NodeControl)
}

void NodeControl::SharedCtor() {
detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_type_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(control_type_));
}

NodeControl::~NodeControl() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.server.NodeControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_id_;
}

void NodeControl::ArenaDtor(void* object) {
  NodeControl* _this = reinterpret_cast< NodeControl* >(object);
  (void)_this;
}
void NodeControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeControl::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.server.NodeControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.ClearToEmpty();
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  control_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeId node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.server.NodeControlType control_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_type(static_cast<::zb::dcts::node::server::NodeControlType>(val));
        } else goto handle_unusual;
        continue;
      // string detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.server.NodeControl.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.server.NodeControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_id(this), target, stream);
  }

  // .zb.dcts.node.server.NodeControlType control_type = 2;
  if (this->control_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_control_type(), target);
  }

  // string detail = 3;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.server.NodeControl.detail");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.server.NodeControl)
  return target;
}

size_t NodeControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.server.NodeControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 3;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  // .zb.dcts.node.server.NodeControlType control_type = 2;
  if (this->control_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.server.NodeControl)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.server.NodeControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.server.NodeControl)
    MergeFrom(*source);
  }
}

void NodeControl::MergeFrom(const NodeControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.server.NodeControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.detail().size() > 0) {
    _internal_set_detail(from._internal_detail());
  }
  if (from.has_node_id()) {
    _internal_mutable_node_id()->::zb::dcts::node::NodeId::MergeFrom(from._internal_node_id());
  }
  if (from.control_type() != 0) {
    _internal_set_control_type(from._internal_control_type());
  }
}

void NodeControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.server.NodeControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeControl::CopyFrom(const NodeControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.server.NodeControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeControl::IsInitialized() const {
  return true;
}

void NodeControl::InternalSwap(NodeControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeControl, control_type_)
      + sizeof(NodeControl::control_type_)
      - PROTOBUF_FIELD_OFFSET(NodeControl, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeControl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace server
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::server::ServerTaskElapsedTime* Arena::CreateMaybeMessage< ::zb::dcts::node::server::ServerTaskElapsedTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::server::ServerTaskElapsedTime >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::server::ServerTaskSummary* Arena::CreateMaybeMessage< ::zb::dcts::node::server::ServerTaskSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::server::ServerTaskSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::server::ServerTasksInfo* Arena::CreateMaybeMessage< ::zb::dcts::node::server::ServerTasksInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::server::ServerTasksInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::server::NodeControl* Arena::CreateMaybeMessage< ::zb::dcts::node::server::NodeControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::server::NodeControl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
