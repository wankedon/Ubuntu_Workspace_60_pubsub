// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/detectionInternal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fdetectionInternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fdetectionInternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/spectrum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fdetectionInternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fdetectionInternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fdetectionInternal_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fdetectionInternal_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace detection {
class RawBody;
struct RawBodyDefaultTypeInternal;
extern RawBodyDefaultTypeInternal _RawBody_default_instance_;
class RawData;
struct RawDataDefaultTypeInternal;
extern RawDataDefaultTypeInternal _RawData_default_instance_;
class RawHeader;
struct RawHeaderDefaultTypeInternal;
extern RawHeaderDefaultTypeInternal _RawHeader_default_instance_;
}  // namespace detection
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::detection::RawBody* Arena::CreateMaybeMessage<::zb::dcts::node::detection::RawBody>(Arena*);
template<> ::zb::dcts::node::detection::RawData* Arena::CreateMaybeMessage<::zb::dcts::node::detection::RawData>(Arena*);
template<> ::zb::dcts::node::detection::RawHeader* Arena::CreateMaybeMessage<::zb::dcts::node::detection::RawHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace detection {

// ===================================================================

class RawHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.detection.RawHeader) */ {
 public:
  inline RawHeader() : RawHeader(nullptr) {}
  virtual ~RawHeader();
  explicit constexpr RawHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawHeader(const RawHeader& from);
  RawHeader(RawHeader&& from) noexcept
    : RawHeader() {
    *this = ::std::move(from);
  }

  inline RawHeader& operator=(const RawHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawHeader& operator=(RawHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawHeader* internal_default_instance() {
    return reinterpret_cast<const RawHeader*>(
               &_RawHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RawHeader& a, RawHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RawHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawHeader* New() const final {
    return CreateMaybeMessage<RawHeader>(nullptr);
  }

  RawHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawHeader& from);
  void MergeFrom(const RawHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.detection.RawHeader";
  }
  protected:
  explicit RawHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fdetectionInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSpanFieldNumber = 2,
    kDevicePositionFieldNumber = 3,
    kSweepCountFieldNumber = 1,
  };
  // .zb.dcts.TimeSpan time_span = 2;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.Position device_position = 3;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // uint32 sweep_count = 1;
  void clear_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count() const;
  void set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweep_count() const;
  void _internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.detection.RawHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::Position* device_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fdetectionInternal_2eproto;
};
// -------------------------------------------------------------------

class RawBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.detection.RawBody) */ {
 public:
  inline RawBody() : RawBody(nullptr) {}
  virtual ~RawBody();
  explicit constexpr RawBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawBody(const RawBody& from);
  RawBody(RawBody&& from) noexcept
    : RawBody() {
    *this = ::std::move(from);
  }

  inline RawBody& operator=(const RawBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawBody& operator=(RawBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawBody* internal_default_instance() {
    return reinterpret_cast<const RawBody*>(
               &_RawBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RawBody& a, RawBody& b) {
    a.Swap(&b);
  }
  inline void Swap(RawBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawBody* New() const final {
    return CreateMaybeMessage<RawBody>(nullptr);
  }

  RawBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawBody& from);
  void MergeFrom(const RawBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.detection.RawBody";
  }
  protected:
  explicit RawBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fdetectionInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurTraceFieldNumber = 2,
    kOverThresholdHitsFieldNumber = 3,
    kFreqSpanFieldNumber = 1,
  };
  // repeated float cur_trace = 2;
  int cur_trace_size() const;
  private:
  int _internal_cur_trace_size() const;
  public:
  void clear_cur_trace();
  private:
  float _internal_cur_trace(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cur_trace() const;
  void _internal_add_cur_trace(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cur_trace();
  public:
  float cur_trace(int index) const;
  void set_cur_trace(int index, float value);
  void add_cur_trace(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cur_trace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cur_trace();

  // repeated float over_threshold_hits = 3;
  int over_threshold_hits_size() const;
  private:
  int _internal_over_threshold_hits_size() const;
  public:
  void clear_over_threshold_hits();
  private:
  float _internal_over_threshold_hits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_over_threshold_hits() const;
  void _internal_add_over_threshold_hits(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_over_threshold_hits();
  public:
  float over_threshold_hits(int index) const;
  void set_over_threshold_hits(int index, float value);
  void add_over_threshold_hits(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      over_threshold_hits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_over_threshold_hits();

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.detection.RawBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cur_trace_;
  mutable std::atomic<int> _cur_trace_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > over_threshold_hits_;
  mutable std::atomic<int> _over_threshold_hits_cached_byte_size_;
  ::zb::dcts::node::spectrum::FrequencySpan* freq_span_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fdetectionInternal_2eproto;
};
// -------------------------------------------------------------------

class RawData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.detection.RawData) */ {
 public:
  inline RawData() : RawData(nullptr) {}
  virtual ~RawData();
  explicit constexpr RawData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawData(const RawData& from);
  RawData(RawData&& from) noexcept
    : RawData() {
    *this = ::std::move(from);
  }

  inline RawData& operator=(const RawData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawData& operator=(RawData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawData* internal_default_instance() {
    return reinterpret_cast<const RawData*>(
               &_RawData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RawData& a, RawData& b) {
    a.Swap(&b);
  }
  inline void Swap(RawData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawData* New() const final {
    return CreateMaybeMessage<RawData>(nullptr);
  }

  RawData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawData& from);
  void MergeFrom(const RawData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.detection.RawData";
  }
  protected:
  explicit RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fdetectionInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalSegmentsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // repeated .zb.dcts.IRange signal_segments = 3;
  int signal_segments_size() const;
  private:
  int _internal_signal_segments_size() const;
  public:
  void clear_signal_segments();
  ::zb::dcts::IRange* mutable_signal_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::IRange >*
      mutable_signal_segments();
  private:
  const ::zb::dcts::IRange& _internal_signal_segments(int index) const;
  ::zb::dcts::IRange* _internal_add_signal_segments();
  public:
  const ::zb::dcts::IRange& signal_segments(int index) const;
  ::zb::dcts::IRange* add_signal_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::IRange >&
      signal_segments() const;

  // .zb.dcts.node.detection.RawHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::node::detection::RawHeader& header() const;
  ::zb::dcts::node::detection::RawHeader* release_header();
  ::zb::dcts::node::detection::RawHeader* mutable_header();
  void set_allocated_header(::zb::dcts::node::detection::RawHeader* header);
  private:
  const ::zb::dcts::node::detection::RawHeader& _internal_header() const;
  ::zb::dcts::node::detection::RawHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::node::detection::RawHeader* header);
  ::zb::dcts::node::detection::RawHeader* unsafe_arena_release_header();

  // .zb.dcts.node.detection.RawBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::zb::dcts::node::detection::RawBody& body() const;
  ::zb::dcts::node::detection::RawBody* release_body();
  ::zb::dcts::node::detection::RawBody* mutable_body();
  void set_allocated_body(::zb::dcts::node::detection::RawBody* body);
  private:
  const ::zb::dcts::node::detection::RawBody& _internal_body() const;
  ::zb::dcts::node::detection::RawBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::zb::dcts::node::detection::RawBody* body);
  ::zb::dcts::node::detection::RawBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.detection.RawData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::IRange > signal_segments_;
  ::zb::dcts::node::detection::RawHeader* header_;
  ::zb::dcts::node::detection::RawBody* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fdetectionInternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RawHeader

// uint32 sweep_count = 1;
inline void RawHeader::clear_sweep_count() {
  sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RawHeader::_internal_sweep_count() const {
  return sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RawHeader::sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.detection.RawHeader.sweep_count)
  return _internal_sweep_count();
}
inline void RawHeader::_internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sweep_count_ = value;
}
inline void RawHeader::set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.detection.RawHeader.sweep_count)
}

// .zb.dcts.TimeSpan time_span = 2;
inline bool RawHeader::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool RawHeader::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& RawHeader::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& RawHeader::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.detection.RawHeader.time_span)
  return _internal_time_span();
}
inline void RawHeader::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.detection.RawHeader.time_span)
}
inline ::zb::dcts::TimeSpan* RawHeader::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* RawHeader::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.detection.RawHeader.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* RawHeader::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* RawHeader::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.detection.RawHeader.time_span)
  return _internal_mutable_time_span();
}
inline void RawHeader::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.detection.RawHeader.time_span)
}

// .zb.dcts.Position device_position = 3;
inline bool RawHeader::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool RawHeader::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& RawHeader::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Position&>(
      ::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& RawHeader::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.detection.RawHeader.device_position)
  return _internal_device_position();
}
inline void RawHeader::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.detection.RawHeader.device_position)
}
inline ::zb::dcts::Position* RawHeader::release_device_position() {
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* RawHeader::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.detection.RawHeader.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* RawHeader::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* RawHeader::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.detection.RawHeader.device_position)
  return _internal_mutable_device_position();
}
inline void RawHeader::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.detection.RawHeader.device_position)
}

// -------------------------------------------------------------------

// RawBody

// .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
inline bool RawBody::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool RawBody::has_freq_span() const {
  return _internal_has_freq_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& RawBody::_internal_freq_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& RawBody::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.detection.RawBody.freq_span)
  return _internal_freq_span();
}
inline void RawBody::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.detection.RawBody.freq_span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RawBody::release_freq_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RawBody::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.detection.RawBody.freq_span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RawBody::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RawBody::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.detection.RawBody.freq_span)
  return _internal_mutable_freq_span();
}
inline void RawBody::set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span)->GetArena();
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.detection.RawBody.freq_span)
}

// repeated float cur_trace = 2;
inline int RawBody::_internal_cur_trace_size() const {
  return cur_trace_.size();
}
inline int RawBody::cur_trace_size() const {
  return _internal_cur_trace_size();
}
inline void RawBody::clear_cur_trace() {
  cur_trace_.Clear();
}
inline float RawBody::_internal_cur_trace(int index) const {
  return cur_trace_.Get(index);
}
inline float RawBody::cur_trace(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.detection.RawBody.cur_trace)
  return _internal_cur_trace(index);
}
inline void RawBody::set_cur_trace(int index, float value) {
  cur_trace_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.detection.RawBody.cur_trace)
}
inline void RawBody::_internal_add_cur_trace(float value) {
  cur_trace_.Add(value);
}
inline void RawBody::add_cur_trace(float value) {
  _internal_add_cur_trace(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.detection.RawBody.cur_trace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RawBody::_internal_cur_trace() const {
  return cur_trace_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RawBody::cur_trace() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.detection.RawBody.cur_trace)
  return _internal_cur_trace();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RawBody::_internal_mutable_cur_trace() {
  return &cur_trace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RawBody::mutable_cur_trace() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.detection.RawBody.cur_trace)
  return _internal_mutable_cur_trace();
}

// repeated float over_threshold_hits = 3;
inline int RawBody::_internal_over_threshold_hits_size() const {
  return over_threshold_hits_.size();
}
inline int RawBody::over_threshold_hits_size() const {
  return _internal_over_threshold_hits_size();
}
inline void RawBody::clear_over_threshold_hits() {
  over_threshold_hits_.Clear();
}
inline float RawBody::_internal_over_threshold_hits(int index) const {
  return over_threshold_hits_.Get(index);
}
inline float RawBody::over_threshold_hits(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.detection.RawBody.over_threshold_hits)
  return _internal_over_threshold_hits(index);
}
inline void RawBody::set_over_threshold_hits(int index, float value) {
  over_threshold_hits_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.detection.RawBody.over_threshold_hits)
}
inline void RawBody::_internal_add_over_threshold_hits(float value) {
  over_threshold_hits_.Add(value);
}
inline void RawBody::add_over_threshold_hits(float value) {
  _internal_add_over_threshold_hits(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.detection.RawBody.over_threshold_hits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RawBody::_internal_over_threshold_hits() const {
  return over_threshold_hits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RawBody::over_threshold_hits() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.detection.RawBody.over_threshold_hits)
  return _internal_over_threshold_hits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RawBody::_internal_mutable_over_threshold_hits() {
  return &over_threshold_hits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RawBody::mutable_over_threshold_hits() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.detection.RawBody.over_threshold_hits)
  return _internal_mutable_over_threshold_hits();
}

// -------------------------------------------------------------------

// RawData

// .zb.dcts.node.detection.RawHeader header = 1;
inline bool RawData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RawData::has_header() const {
  return _internal_has_header();
}
inline void RawData::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::zb::dcts::node::detection::RawHeader& RawData::_internal_header() const {
  const ::zb::dcts::node::detection::RawHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::detection::RawHeader&>(
      ::zb::dcts::node::detection::_RawHeader_default_instance_);
}
inline const ::zb::dcts::node::detection::RawHeader& RawData::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.detection.RawData.header)
  return _internal_header();
}
inline void RawData::unsafe_arena_set_allocated_header(
    ::zb::dcts::node::detection::RawHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.detection.RawData.header)
}
inline ::zb::dcts::node::detection::RawHeader* RawData::release_header() {
  
  ::zb::dcts::node::detection::RawHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::detection::RawHeader* RawData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.detection.RawData.header)
  
  ::zb::dcts::node::detection::RawHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::detection::RawHeader* RawData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::detection::RawHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::node::detection::RawHeader* RawData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.detection.RawData.header)
  return _internal_mutable_header();
}
inline void RawData::set_allocated_header(::zb::dcts::node::detection::RawHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.detection.RawData.header)
}

// .zb.dcts.node.detection.RawBody body = 2;
inline bool RawData::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool RawData::has_body() const {
  return _internal_has_body();
}
inline void RawData::clear_body() {
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::zb::dcts::node::detection::RawBody& RawData::_internal_body() const {
  const ::zb::dcts::node::detection::RawBody* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::detection::RawBody&>(
      ::zb::dcts::node::detection::_RawBody_default_instance_);
}
inline const ::zb::dcts::node::detection::RawBody& RawData::body() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.detection.RawData.body)
  return _internal_body();
}
inline void RawData::unsafe_arena_set_allocated_body(
    ::zb::dcts::node::detection::RawBody* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.detection.RawData.body)
}
inline ::zb::dcts::node::detection::RawBody* RawData::release_body() {
  
  ::zb::dcts::node::detection::RawBody* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::detection::RawBody* RawData::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.detection.RawData.body)
  
  ::zb::dcts::node::detection::RawBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::detection::RawBody* RawData::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::detection::RawBody>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::zb::dcts::node::detection::RawBody* RawData::mutable_body() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.detection.RawData.body)
  return _internal_mutable_body();
}
inline void RawData::set_allocated_body(::zb::dcts::node::detection::RawBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.detection.RawData.body)
}

// repeated .zb.dcts.IRange signal_segments = 3;
inline int RawData::_internal_signal_segments_size() const {
  return signal_segments_.size();
}
inline int RawData::signal_segments_size() const {
  return _internal_signal_segments_size();
}
inline ::zb::dcts::IRange* RawData::mutable_signal_segments(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.detection.RawData.signal_segments)
  return signal_segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::IRange >*
RawData::mutable_signal_segments() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.detection.RawData.signal_segments)
  return &signal_segments_;
}
inline const ::zb::dcts::IRange& RawData::_internal_signal_segments(int index) const {
  return signal_segments_.Get(index);
}
inline const ::zb::dcts::IRange& RawData::signal_segments(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.detection.RawData.signal_segments)
  return _internal_signal_segments(index);
}
inline ::zb::dcts::IRange* RawData::_internal_add_signal_segments() {
  return signal_segments_.Add();
}
inline ::zb::dcts::IRange* RawData::add_signal_segments() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.detection.RawData.signal_segments)
  return _internal_add_signal_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::IRange >&
RawData::signal_segments() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.detection.RawData.signal_segments)
  return signal_segments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace detection
}  // namespace node
}  // namespace dcts
}  // namespace zb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fdetectionInternal_2eproto
