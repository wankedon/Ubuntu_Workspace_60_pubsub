// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/spectrum.proto

#include "node/spectrum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace spectrum {
constexpr FrequencySpan::FrequencySpan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_freq_(0)
  , stop_freq_(0){}
struct FrequencySpanDefaultTypeInternal {
  constexpr FrequencySpanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrequencySpanDefaultTypeInternal() {}
  union {
    FrequencySpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrequencySpanDefaultTypeInternal _FrequencySpan_default_instance_;
constexpr FrequencySegment::FrequencySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : freq_span_(nullptr)
  , points_(0){}
struct FrequencySegmentDefaultTypeInternal {
  constexpr FrequencySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrequencySegmentDefaultTypeInternal() {}
  union {
    FrequencySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrequencySegmentDefaultTypeInternal _FrequencySegment_default_instance_;
constexpr FrequencyPos::FrequencyPos(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segment_idx_(0)
  , seg_internal_offset_(0){}
struct FrequencyPosDefaultTypeInternal {
  constexpr FrequencyPosDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrequencyPosDefaultTypeInternal() {}
  union {
    FrequencyPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrequencyPosDefaultTypeInternal _FrequencyPos_default_instance_;
constexpr FrequencyBand::FrequencyBand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_(){}
struct FrequencyBandDefaultTypeInternal {
  constexpr FrequencyBandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrequencyBandDefaultTypeInternal() {}
  union {
    FrequencyBand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrequencyBandDefaultTypeInternal _FrequencyBand_default_instance_;
constexpr FrequencyRange::FrequencyRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_pos_(nullptr)
  , stop_pos_(nullptr){}
struct FrequencyRangeDefaultTypeInternal {
  constexpr FrequencyRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrequencyRangeDefaultTypeInternal() {}
  union {
    FrequencyRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrequencyRangeDefaultTypeInternal _FrequencyRange_default_instance_;
constexpr SignalBand::SignalBand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_frequency_(0)
  , band_width_(0){}
struct SignalBandDefaultTypeInternal {
  constexpr SignalBandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalBandDefaultTypeInternal() {}
  union {
    SignalBand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalBandDefaultTypeInternal _SignalBand_default_instance_;
constexpr BaseBand::BaseBand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_frequency_(0)
  , sample_rate_(0){}
struct BaseBandDefaultTypeInternal {
  constexpr BaseBandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseBandDefaultTypeInternal() {}
  union {
    BaseBand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseBandDefaultTypeInternal _BaseBand_default_instance_;
constexpr DataHoldRequest::DataHoldRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , data_hold_type_(0)
{}
struct DataHoldRequestDefaultTypeInternal {
  constexpr DataHoldRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataHoldRequestDefaultTypeInternal() {}
  union {
    DataHoldRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataHoldRequestDefaultTypeInternal _DataHoldRequest_default_instance_;
constexpr ZoomInRequest::ZoomInRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , zoom_in_part_(nullptr){}
struct ZoomInRequestDefaultTypeInternal {
  constexpr ZoomInRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoomInRequestDefaultTypeInternal() {}
  union {
    ZoomInRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoomInRequestDefaultTypeInternal _ZoomInRequest_default_instance_;
constexpr View::View(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cur_trace_()
  , _cur_trace_cached_byte_size_()
  , minhold_trace_()
  , _minhold_trace_cached_byte_size_()
  , maxhold_trace_()
  , _maxhold_trace_cached_byte_size_()
  , over_threshold_hits_()
  , _over_threshold_hits_cached_byte_size_()
  , freq_span_(nullptr){}
struct ViewDefaultTypeInternal {
  constexpr ViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewDefaultTypeInternal() {}
  union {
    View _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewDefaultTypeInternal _View_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_from_(nullptr)
  , time_span_(nullptr)
  , device_position_(nullptr)
  , sequence_number_(0u)
  , sweep_count_(0u){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace spectrum
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fspectrum_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fspectrum_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fspectrum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fspectrum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencySpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencySpan, start_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencySpan, stop_freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencySegment, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencySegment, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencyPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencyPos, segment_idx_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencyPos, seg_internal_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencyBand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencyBand, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencyRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencyRange, start_pos_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::FrequencyRange, stop_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::SignalBand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::SignalBand, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::SignalBand, band_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::BaseBand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::BaseBand, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::BaseBand, sample_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::DataHoldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::DataHoldRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::DataHoldRequest, data_hold_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::ZoomInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::ZoomInRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::ZoomInRequest, zoom_in_part_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::View, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::View, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::View, cur_trace_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::View, minhold_trace_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::View, maxhold_trace_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::View, over_threshold_hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::Header, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::Header, sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::spectrum::Header, device_position_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::spectrum::FrequencySpan)},
  { 7, -1, sizeof(::zb::dcts::node::spectrum::FrequencySegment)},
  { 14, -1, sizeof(::zb::dcts::node::spectrum::FrequencyPos)},
  { 21, -1, sizeof(::zb::dcts::node::spectrum::FrequencyBand)},
  { 27, -1, sizeof(::zb::dcts::node::spectrum::FrequencyRange)},
  { 34, -1, sizeof(::zb::dcts::node::spectrum::SignalBand)},
  { 41, -1, sizeof(::zb::dcts::node::spectrum::BaseBand)},
  { 48, -1, sizeof(::zb::dcts::node::spectrum::DataHoldRequest)},
  { 55, -1, sizeof(::zb::dcts::node::spectrum::ZoomInRequest)},
  { 62, -1, sizeof(::zb::dcts::node::spectrum::View)},
  { 72, -1, sizeof(::zb::dcts::node::spectrum::Header)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_FrequencySpan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_FrequencySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_FrequencyPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_FrequencyBand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_FrequencyRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_SignalBand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_BaseBand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_DataHoldRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_ZoomInRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_View_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::spectrum::_Header_default_instance_),
};

const char descriptor_table_protodef_node_2fspectrum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023node/spectrum.proto\022\025zb.dcts.node.spec"
  "trum\032\ndcts.proto\032\017node/node.proto\"6\n\rFre"
  "quencySpan\022\022\n\nstart_freq\030\001 \001(\001\022\021\n\tstop_f"
  "req\030\002 \001(\001\"[\n\020FrequencySegment\0227\n\tfreq_sp"
  "an\030\001 \001(\0132$.zb.dcts.node.spectrum.Frequen"
  "cySpan\022\016\n\006points\030\002 \001(\005\"@\n\014FrequencyPos\022\023"
  "\n\013segment_idx\030\001 \001(\005\022\033\n\023seg_internal_offs"
  "et\030\002 \001(\005\"J\n\rFrequencyBand\0229\n\010segments\030\001 "
  "\003(\0132\'.zb.dcts.node.spectrum.FrequencySeg"
  "ment\"\177\n\016FrequencyRange\0226\n\tstart_pos\030\001 \001("
  "\0132#.zb.dcts.node.spectrum.FrequencyPos\0225"
  "\n\010stop_pos\030\002 \001(\0132#.zb.dcts.node.spectrum"
  ".FrequencyPos\":\n\nSignalBand\022\030\n\020center_fr"
  "equency\030\001 \001(\001\022\022\n\nband_width\030\002 \001(\001\"9\n\010Bas"
  "eBand\022\030\n\020center_frequency\030\001 \001(\001\022\023\n\013sampl"
  "e_rate\030\002 \001(\001\"\177\n\017DataHoldRequest\022/\n\014task_"
  "account\030\001 \001(\0132\031.zb.dcts.node.TaskAccount"
  "\022;\n\016data_hold_type\030\002 \001(\0162#.zb.dcts.node."
  "spectrum.DataHoldType\"\177\n\rZoomInRequest\022/"
  "\n\014task_account\030\001 \001(\0132\031.zb.dcts.node.Task"
  "Account\022=\n\014zoom_in_part\030\002 \001(\0132\'.zb.dcts."
  "node.spectrum.FrequencySegment\"\235\001\n\004View\022"
  "7\n\tfreq_span\030\001 \001(\0132$.zb.dcts.node.spectr"
  "um.FrequencySpan\022\021\n\tcur_trace\030\002 \003(\002\022\025\n\rm"
  "inhold_trace\030\003 \003(\002\022\025\n\rmaxhold_trace\030\004 \003("
  "\002\022\033\n\023over_threshold_hits\030\005 \003(\002\"\312\001\n\006Heade"
  "r\022-\n\013result_from\030\001 \001(\0132\030.zb.dcts.node.No"
  "deDevice\022\021\n\trecord_id\030\002 \001(\t\022\027\n\017sequence_"
  "number\030\003 \001(\r\022\023\n\013sweep_count\030\004 \001(\r\022$\n\ttim"
  "e_span\030\005 \001(\0132\021.zb.dcts.TimeSpan\022*\n\017devic"
  "e_position\030\006 \001(\0132\021.zb.dcts.Position*S\n\014D"
  "ataHoldType\022\013\n\007NO_HOLD\020\000\022\014\n\010MAX_HOLD\020\001\022\014"
  "\n\010MIN_HOLD\020\002\022\014\n\010RMS_HOLD\020\003\022\014\n\010AVG_HOLD\020\004"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fspectrum_2eproto_deps[2] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_node_2fnode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fspectrum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fspectrum_2eproto = {
  false, false, 1328, descriptor_table_protodef_node_2fspectrum_2eproto, "node/spectrum.proto", 
  &descriptor_table_node_2fspectrum_2eproto_once, descriptor_table_node_2fspectrum_2eproto_deps, 2, 11,
  schemas, file_default_instances, TableStruct_node_2fspectrum_2eproto::offsets,
  file_level_metadata_node_2fspectrum_2eproto, file_level_enum_descriptors_node_2fspectrum_2eproto, file_level_service_descriptors_node_2fspectrum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fspectrum_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fspectrum_2eproto);
  return descriptor_table_node_2fspectrum_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fspectrum_2eproto(&descriptor_table_node_2fspectrum_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace spectrum {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataHoldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fspectrum_2eproto);
  return file_level_enum_descriptors_node_2fspectrum_2eproto[0];
}
bool DataHoldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FrequencySpan::_Internal {
 public:
};

FrequencySpan::FrequencySpan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.FrequencySpan)
}
FrequencySpan::FrequencySpan(const FrequencySpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_freq_, &from.start_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_freq_) -
    reinterpret_cast<char*>(&start_freq_)) + sizeof(stop_freq_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.FrequencySpan)
}

void FrequencySpan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_freq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_freq_) -
    reinterpret_cast<char*>(&start_freq_)) + sizeof(stop_freq_));
}

FrequencySpan::~FrequencySpan() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.FrequencySpan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencySpan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrequencySpan::ArenaDtor(void* object) {
  FrequencySpan* _this = reinterpret_cast< FrequencySpan* >(object);
  (void)_this;
}
void FrequencySpan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencySpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrequencySpan::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.FrequencySpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_freq_) -
      reinterpret_cast<char*>(&start_freq_)) + sizeof(stop_freq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencySpan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double start_freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          start_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop_freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          stop_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencySpan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.FrequencySpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_freq = 1;
  if (!(this->start_freq() <= 0 && this->start_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_freq(), target);
  }

  // double stop_freq = 2;
  if (!(this->stop_freq() <= 0 && this->stop_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.FrequencySpan)
  return target;
}

size_t FrequencySpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.FrequencySpan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start_freq = 1;
  if (!(this->start_freq() <= 0 && this->start_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop_freq = 2;
  if (!(this->stop_freq() <= 0 && this->stop_freq() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencySpan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.FrequencySpan)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencySpan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencySpan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.FrequencySpan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.FrequencySpan)
    MergeFrom(*source);
  }
}

void FrequencySpan::MergeFrom(const FrequencySpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.FrequencySpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.start_freq() <= 0 && from.start_freq() >= 0)) {
    _internal_set_start_freq(from._internal_start_freq());
  }
  if (!(from.stop_freq() <= 0 && from.stop_freq() >= 0)) {
    _internal_set_stop_freq(from._internal_stop_freq());
  }
}

void FrequencySpan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.FrequencySpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencySpan::CopyFrom(const FrequencySpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.FrequencySpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencySpan::IsInitialized() const {
  return true;
}

void FrequencySpan::InternalSwap(FrequencySpan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrequencySpan, stop_freq_)
      + sizeof(FrequencySpan::stop_freq_)
      - PROTOBUF_FIELD_OFFSET(FrequencySpan, start_freq_)>(
          reinterpret_cast<char*>(&start_freq_),
          reinterpret_cast<char*>(&other->start_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencySpan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrequencySegment::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& freq_span(const FrequencySegment* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
FrequencySegment::_Internal::freq_span(const FrequencySegment* msg) {
  return *msg->freq_span_;
}
FrequencySegment::FrequencySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.FrequencySegment)
}
FrequencySegment::FrequencySegment(const FrequencySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  points_ = from.points_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.FrequencySegment)
}

void FrequencySegment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&freq_span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&freq_span_)) + sizeof(points_));
}

FrequencySegment::~FrequencySegment() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.FrequencySegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
}

void FrequencySegment::ArenaDtor(void* object) {
  FrequencySegment* _this = reinterpret_cast< FrequencySegment* >(object);
  (void)_this;
}
void FrequencySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrequencySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.FrequencySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  points_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.FrequencySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_span(this), target, stream);
  }

  // int32 points = 2;
  if (this->points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.FrequencySegment)
  return target;
}

size_t FrequencySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.FrequencySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // int32 points = 2;
  if (this->points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_points());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencySegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.FrequencySegment)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencySegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencySegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.FrequencySegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.FrequencySegment)
    MergeFrom(*source);
  }
}

void FrequencySegment::MergeFrom(const FrequencySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.FrequencySegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (from.points() != 0) {
    _internal_set_points(from._internal_points());
  }
}

void FrequencySegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.FrequencySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencySegment::CopyFrom(const FrequencySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.FrequencySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencySegment::IsInitialized() const {
  return true;
}

void FrequencySegment::InternalSwap(FrequencySegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrequencySegment, points_)
      + sizeof(FrequencySegment::points_)
      - PROTOBUF_FIELD_OFFSET(FrequencySegment, freq_span_)>(
          reinterpret_cast<char*>(&freq_span_),
          reinterpret_cast<char*>(&other->freq_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencySegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrequencyPos::_Internal {
 public:
};

FrequencyPos::FrequencyPos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.FrequencyPos)
}
FrequencyPos::FrequencyPos(const FrequencyPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&segment_idx_, &from.segment_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&seg_internal_offset_) -
    reinterpret_cast<char*>(&segment_idx_)) + sizeof(seg_internal_offset_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.FrequencyPos)
}

void FrequencyPos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&segment_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seg_internal_offset_) -
    reinterpret_cast<char*>(&segment_idx_)) + sizeof(seg_internal_offset_));
}

FrequencyPos::~FrequencyPos() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.FrequencyPos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencyPos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrequencyPos::ArenaDtor(void* object) {
  FrequencyPos* _this = reinterpret_cast< FrequencyPos* >(object);
  (void)_this;
}
void FrequencyPos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencyPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrequencyPos::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.FrequencyPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&segment_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seg_internal_offset_) -
      reinterpret_cast<char*>(&segment_idx_)) + sizeof(seg_internal_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencyPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 segment_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          segment_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seg_internal_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seg_internal_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencyPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.FrequencyPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 segment_idx = 1;
  if (this->segment_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_segment_idx(), target);
  }

  // int32 seg_internal_offset = 2;
  if (this->seg_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seg_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.FrequencyPos)
  return target;
}

size_t FrequencyPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.FrequencyPos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 segment_idx = 1;
  if (this->segment_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_segment_idx());
  }

  // int32 seg_internal_offset = 2;
  if (this->seg_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seg_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.FrequencyPos)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencyPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.FrequencyPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.FrequencyPos)
    MergeFrom(*source);
  }
}

void FrequencyPos::MergeFrom(const FrequencyPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.FrequencyPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.segment_idx() != 0) {
    _internal_set_segment_idx(from._internal_segment_idx());
  }
  if (from.seg_internal_offset() != 0) {
    _internal_set_seg_internal_offset(from._internal_seg_internal_offset());
  }
}

void FrequencyPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.FrequencyPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyPos::CopyFrom(const FrequencyPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.FrequencyPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyPos::IsInitialized() const {
  return true;
}

void FrequencyPos::InternalSwap(FrequencyPos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrequencyPos, seg_internal_offset_)
      + sizeof(FrequencyPos::seg_internal_offset_)
      - PROTOBUF_FIELD_OFFSET(FrequencyPos, segment_idx_)>(
          reinterpret_cast<char*>(&segment_idx_),
          reinterpret_cast<char*>(&other->segment_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencyPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrequencyBand::_Internal {
 public:
};

FrequencyBand::FrequencyBand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.FrequencyBand)
}
FrequencyBand::FrequencyBand(const FrequencyBand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.FrequencyBand)
}

void FrequencyBand::SharedCtor() {
}

FrequencyBand::~FrequencyBand() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.FrequencyBand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencyBand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrequencyBand::ArenaDtor(void* object) {
  FrequencyBand* _this = reinterpret_cast< FrequencyBand* >(object);
  (void)_this;
}
void FrequencyBand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencyBand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrequencyBand::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.FrequencyBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencyBand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.spectrum.FrequencySegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencyBand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.FrequencyBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.spectrum.FrequencySegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.FrequencyBand)
  return target;
}

size_t FrequencyBand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.FrequencyBand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.spectrum.FrequencySegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyBand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.FrequencyBand)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyBand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencyBand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.FrequencyBand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.FrequencyBand)
    MergeFrom(*source);
  }
}

void FrequencyBand::MergeFrom(const FrequencyBand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.FrequencyBand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void FrequencyBand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.FrequencyBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyBand::CopyFrom(const FrequencyBand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.FrequencyBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyBand::IsInitialized() const {
  return true;
}

void FrequencyBand::InternalSwap(FrequencyBand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencyBand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrequencyRange::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencyPos& start_pos(const FrequencyRange* msg);
  static const ::zb::dcts::node::spectrum::FrequencyPos& stop_pos(const FrequencyRange* msg);
};

const ::zb::dcts::node::spectrum::FrequencyPos&
FrequencyRange::_Internal::start_pos(const FrequencyRange* msg) {
  return *msg->start_pos_;
}
const ::zb::dcts::node::spectrum::FrequencyPos&
FrequencyRange::_Internal::stop_pos(const FrequencyRange* msg) {
  return *msg->stop_pos_;
}
FrequencyRange::FrequencyRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.FrequencyRange)
}
FrequencyRange::FrequencyRange(const FrequencyRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_pos()) {
    start_pos_ = new ::zb::dcts::node::spectrum::FrequencyPos(*from.start_pos_);
  } else {
    start_pos_ = nullptr;
  }
  if (from._internal_has_stop_pos()) {
    stop_pos_ = new ::zb::dcts::node::spectrum::FrequencyPos(*from.stop_pos_);
  } else {
    stop_pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.FrequencyRange)
}

void FrequencyRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_pos_) -
    reinterpret_cast<char*>(&start_pos_)) + sizeof(stop_pos_));
}

FrequencyRange::~FrequencyRange() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.FrequencyRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencyRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_pos_;
  if (this != internal_default_instance()) delete stop_pos_;
}

void FrequencyRange::ArenaDtor(void* object) {
  FrequencyRange* _this = reinterpret_cast< FrequencyRange* >(object);
  (void)_this;
}
void FrequencyRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencyRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrequencyRange::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.FrequencyRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
  if (GetArena() == nullptr && stop_pos_ != nullptr) {
    delete stop_pos_;
  }
  stop_pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencyRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencyPos start_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.FrequencyPos stop_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencyRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.FrequencyRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencyPos start_pos = 1;
  if (this->has_start_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_pos(this), target, stream);
  }

  // .zb.dcts.node.spectrum.FrequencyPos stop_pos = 2;
  if (this->has_stop_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stop_pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.FrequencyRange)
  return target;
}

size_t FrequencyRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.FrequencyRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencyPos start_pos = 1;
  if (this->has_start_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_pos_);
  }

  // .zb.dcts.node.spectrum.FrequencyPos stop_pos = 2;
  if (this->has_stop_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_pos_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.FrequencyRange)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencyRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.FrequencyRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.FrequencyRange)
    MergeFrom(*source);
  }
}

void FrequencyRange::MergeFrom(const FrequencyRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.FrequencyRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_pos()) {
    _internal_mutable_start_pos()->::zb::dcts::node::spectrum::FrequencyPos::MergeFrom(from._internal_start_pos());
  }
  if (from.has_stop_pos()) {
    _internal_mutable_stop_pos()->::zb::dcts::node::spectrum::FrequencyPos::MergeFrom(from._internal_stop_pos());
  }
}

void FrequencyRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.FrequencyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyRange::CopyFrom(const FrequencyRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.FrequencyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyRange::IsInitialized() const {
  return true;
}

void FrequencyRange::InternalSwap(FrequencyRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrequencyRange, stop_pos_)
      + sizeof(FrequencyRange::stop_pos_)
      - PROTOBUF_FIELD_OFFSET(FrequencyRange, start_pos_)>(
          reinterpret_cast<char*>(&start_pos_),
          reinterpret_cast<char*>(&other->start_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencyRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalBand::_Internal {
 public:
};

SignalBand::SignalBand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.SignalBand)
}
SignalBand::SignalBand(const SignalBand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&center_frequency_, &from.center_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&band_width_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(band_width_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.SignalBand)
}

void SignalBand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_frequency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&band_width_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(band_width_));
}

SignalBand::~SignalBand() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.SignalBand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalBand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignalBand::ArenaDtor(void* object) {
  SignalBand* _this = reinterpret_cast< SignalBand* >(object);
  (void)_this;
}
void SignalBand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalBand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalBand::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.SignalBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&band_width_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(band_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalBand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double center_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double band_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          band_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalBand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.SignalBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_center_frequency(), target);
  }

  // double band_width = 2;
  if (!(this->band_width() <= 0 && this->band_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_band_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.SignalBand)
  return target;
}

size_t SignalBand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.SignalBand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double band_width = 2;
  if (!(this->band_width() <= 0 && this->band_width() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalBand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.SignalBand)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalBand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalBand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.SignalBand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.SignalBand)
    MergeFrom(*source);
  }
}

void SignalBand::MergeFrom(const SignalBand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.SignalBand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.band_width() <= 0 && from.band_width() >= 0)) {
    _internal_set_band_width(from._internal_band_width());
  }
}

void SignalBand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.SignalBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalBand::CopyFrom(const SignalBand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.SignalBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalBand::IsInitialized() const {
  return true;
}

void SignalBand::InternalSwap(SignalBand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalBand, band_width_)
      + sizeof(SignalBand::band_width_)
      - PROTOBUF_FIELD_OFFSET(SignalBand, center_frequency_)>(
          reinterpret_cast<char*>(&center_frequency_),
          reinterpret_cast<char*>(&other->center_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalBand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BaseBand::_Internal {
 public:
};

BaseBand::BaseBand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.BaseBand)
}
BaseBand::BaseBand(const BaseBand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&center_frequency_, &from.center_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(sample_rate_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.BaseBand)
}

void BaseBand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_frequency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(sample_rate_));
}

BaseBand::~BaseBand() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.BaseBand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseBand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BaseBand::ArenaDtor(void* object) {
  BaseBand* _this = reinterpret_cast< BaseBand* >(object);
  (void)_this;
}
void BaseBand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseBand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseBand::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.BaseBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(sample_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseBand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double center_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sample_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseBand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.BaseBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_center_frequency(), target);
  }

  // double sample_rate = 2;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_sample_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.BaseBand)
  return target;
}

size_t BaseBand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.BaseBand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double sample_rate = 2;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseBand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.BaseBand)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseBand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseBand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.BaseBand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.BaseBand)
    MergeFrom(*source);
  }
}

void BaseBand::MergeFrom(const BaseBand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.BaseBand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.sample_rate() <= 0 && from.sample_rate() >= 0)) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
}

void BaseBand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.BaseBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseBand::CopyFrom(const BaseBand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.BaseBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseBand::IsInitialized() const {
  return true;
}

void BaseBand::InternalSwap(BaseBand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseBand, sample_rate_)
      + sizeof(BaseBand::sample_rate_)
      - PROTOBUF_FIELD_OFFSET(BaseBand, center_frequency_)>(
          reinterpret_cast<char*>(&center_frequency_),
          reinterpret_cast<char*>(&other->center_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseBand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataHoldRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const DataHoldRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
DataHoldRequest::_Internal::task_account(const DataHoldRequest* msg) {
  return *msg->task_account_;
}
void DataHoldRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
DataHoldRequest::DataHoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.DataHoldRequest)
}
DataHoldRequest::DataHoldRequest(const DataHoldRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  data_hold_type_ = from.data_hold_type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.DataHoldRequest)
}

void DataHoldRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_hold_type_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(data_hold_type_));
}

DataHoldRequest::~DataHoldRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.DataHoldRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataHoldRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
}

void DataHoldRequest::ArenaDtor(void* object) {
  DataHoldRequest* _this = reinterpret_cast< DataHoldRequest* >(object);
  (void)_this;
}
void DataHoldRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataHoldRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataHoldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.DataHoldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  data_hold_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataHoldRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.DataHoldType data_hold_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_hold_type(static_cast<::zb::dcts::node::spectrum::DataHoldType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataHoldRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.DataHoldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // .zb.dcts.node.spectrum.DataHoldType data_hold_type = 2;
  if (this->data_hold_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_hold_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.DataHoldRequest)
  return target;
}

size_t DataHoldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.DataHoldRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // .zb.dcts.node.spectrum.DataHoldType data_hold_type = 2;
  if (this->data_hold_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_hold_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataHoldRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.DataHoldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DataHoldRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataHoldRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.DataHoldRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.DataHoldRequest)
    MergeFrom(*source);
  }
}

void DataHoldRequest::MergeFrom(const DataHoldRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.DataHoldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.data_hold_type() != 0) {
    _internal_set_data_hold_type(from._internal_data_hold_type());
  }
}

void DataHoldRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.DataHoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataHoldRequest::CopyFrom(const DataHoldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.DataHoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataHoldRequest::IsInitialized() const {
  return true;
}

void DataHoldRequest::InternalSwap(DataHoldRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataHoldRequest, data_hold_type_)
      + sizeof(DataHoldRequest::data_hold_type_)
      - PROTOBUF_FIELD_OFFSET(DataHoldRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataHoldRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ZoomInRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const ZoomInRequest* msg);
  static const ::zb::dcts::node::spectrum::FrequencySegment& zoom_in_part(const ZoomInRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
ZoomInRequest::_Internal::task_account(const ZoomInRequest* msg) {
  return *msg->task_account_;
}
const ::zb::dcts::node::spectrum::FrequencySegment&
ZoomInRequest::_Internal::zoom_in_part(const ZoomInRequest* msg) {
  return *msg->zoom_in_part_;
}
void ZoomInRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
ZoomInRequest::ZoomInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.ZoomInRequest)
}
ZoomInRequest::ZoomInRequest(const ZoomInRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  if (from._internal_has_zoom_in_part()) {
    zoom_in_part_ = new ::zb::dcts::node::spectrum::FrequencySegment(*from.zoom_in_part_);
  } else {
    zoom_in_part_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.ZoomInRequest)
}

void ZoomInRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoom_in_part_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(zoom_in_part_));
}

ZoomInRequest::~ZoomInRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.ZoomInRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZoomInRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
  if (this != internal_default_instance()) delete zoom_in_part_;
}

void ZoomInRequest::ArenaDtor(void* object) {
  ZoomInRequest* _this = reinterpret_cast< ZoomInRequest* >(object);
  (void)_this;
}
void ZoomInRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoomInRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZoomInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.ZoomInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  if (GetArena() == nullptr && zoom_in_part_ != nullptr) {
    delete zoom_in_part_;
  }
  zoom_in_part_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoomInRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.FrequencySegment zoom_in_part = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zoom_in_part(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZoomInRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.ZoomInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // .zb.dcts.node.spectrum.FrequencySegment zoom_in_part = 2;
  if (this->has_zoom_in_part()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::zoom_in_part(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.ZoomInRequest)
  return target;
}

size_t ZoomInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.ZoomInRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // .zb.dcts.node.spectrum.FrequencySegment zoom_in_part = 2;
  if (this->has_zoom_in_part()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zoom_in_part_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZoomInRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.ZoomInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ZoomInRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZoomInRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.ZoomInRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.ZoomInRequest)
    MergeFrom(*source);
  }
}

void ZoomInRequest::MergeFrom(const ZoomInRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.ZoomInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.has_zoom_in_part()) {
    _internal_mutable_zoom_in_part()->::zb::dcts::node::spectrum::FrequencySegment::MergeFrom(from._internal_zoom_in_part());
  }
}

void ZoomInRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.ZoomInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoomInRequest::CopyFrom(const ZoomInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.ZoomInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoomInRequest::IsInitialized() const {
  return true;
}

void ZoomInRequest::InternalSwap(ZoomInRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoomInRequest, zoom_in_part_)
      + sizeof(ZoomInRequest::zoom_in_part_)
      - PROTOBUF_FIELD_OFFSET(ZoomInRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoomInRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class View::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& freq_span(const View* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
View::_Internal::freq_span(const View* msg) {
  return *msg->freq_span_;
}
View::View(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cur_trace_(arena),
  minhold_trace_(arena),
  maxhold_trace_(arena),
  over_threshold_hits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.View)
}
View::View(const View& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cur_trace_(from.cur_trace_),
      minhold_trace_(from.minhold_trace_),
      maxhold_trace_(from.maxhold_trace_),
      over_threshold_hits_(from.over_threshold_hits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.View)
}

void View::SharedCtor() {
freq_span_ = nullptr;
}

View::~View() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.View)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void View::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
}

void View::ArenaDtor(void* object) {
  View* _this = reinterpret_cast< View* >(object);
  (void)_this;
}
void View::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void View::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void View::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cur_trace_.Clear();
  minhold_trace_.Clear();
  maxhold_trace_.Clear();
  over_threshold_hits_.Clear();
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* View::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float cur_trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_cur_trace(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_cur_trace(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float minhold_trace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_minhold_trace(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_minhold_trace(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float maxhold_trace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_maxhold_trace(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_maxhold_trace(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float over_threshold_hits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_over_threshold_hits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_over_threshold_hits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* View::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_span(this), target, stream);
  }

  // repeated float cur_trace = 2;
  if (this->_internal_cur_trace_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_cur_trace(), target);
  }

  // repeated float minhold_trace = 3;
  if (this->_internal_minhold_trace_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_minhold_trace(), target);
  }

  // repeated float maxhold_trace = 4;
  if (this->_internal_maxhold_trace_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_maxhold_trace(), target);
  }

  // repeated float over_threshold_hits = 5;
  if (this->_internal_over_threshold_hits_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_over_threshold_hits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.View)
  return target;
}

size_t View::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.View)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float cur_trace = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cur_trace_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cur_trace_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float minhold_trace = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_minhold_trace_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _minhold_trace_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float maxhold_trace = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_maxhold_trace_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _maxhold_trace_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float over_threshold_hits = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_over_threshold_hits_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _over_threshold_hits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void View::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.View)
  GOOGLE_DCHECK_NE(&from, this);
  const View* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<View>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.View)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.View)
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.View)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cur_trace_.MergeFrom(from.cur_trace_);
  minhold_trace_.MergeFrom(from.minhold_trace_);
  maxhold_trace_.MergeFrom(from.maxhold_trace_);
  over_threshold_hits_.MergeFrom(from.over_threshold_hits_);
  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
}

void View::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {
  return true;
}

void View::InternalSwap(View* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cur_trace_.InternalSwap(&other->cur_trace_);
  minhold_trace_.InternalSwap(&other->minhold_trace_);
  maxhold_trace_.InternalSwap(&other->maxhold_trace_);
  over_threshold_hits_.InternalSwap(&other->over_threshold_hits_);
  swap(freq_span_, other->freq_span_);
}

::PROTOBUF_NAMESPACE_ID::Metadata View::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Header::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& result_from(const Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const Header* msg);
  static const ::zb::dcts::Position& device_position(const Header* msg);
};

const ::zb::dcts::node::NodeDevice&
Header::_Internal::result_from(const Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
Header::_Internal::time_span(const Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
Header::_Internal::device_position(const Header* msg) {
  return *msg->device_position_;
}
void Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.spectrum.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::node::NodeDevice(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.spectrum.Header)
}

void Header::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&result_from_)) + sizeof(sweep_count_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.spectrum.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.spectrum.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty();
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_count_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeDevice result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string record_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.spectrum.Header.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.spectrum.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeDevice result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.spectrum.Header.record_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_record_id(), target);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sweep_count(), target);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.spectrum.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.spectrum.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.node.NodeDevice result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.spectrum.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.spectrum.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.spectrum.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.spectrum.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.sweep_count() != 0) {
    _internal_set_sweep_count(from._internal_sweep_count());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.spectrum.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.spectrum.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, sweep_count_)
      + sizeof(Header::sweep_count_)
      - PROTOBUF_FIELD_OFFSET(Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spectrum
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::FrequencySpan* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::FrequencySpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::FrequencySpan >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::FrequencySegment* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::FrequencySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::FrequencySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::FrequencyPos* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::FrequencyPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::FrequencyPos >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::FrequencyBand* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::FrequencyBand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::FrequencyBand >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::FrequencyRange* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::FrequencyRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::FrequencyRange >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::SignalBand* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::SignalBand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::SignalBand >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::BaseBand* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::BaseBand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::BaseBand >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::DataHoldRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::DataHoldRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::DataHoldRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::ZoomInRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::ZoomInRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::ZoomInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::View* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::View >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::View >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::spectrum::Header* Arena::CreateMaybeMessage< ::zb::dcts::node::spectrum::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::spectrum::Header >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
