// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/zczh/ZhIQAcquire.proto

#include "node/zczh/ZhIQAcquire.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIQAcquire {
constexpr TaskParam::TaskParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : span_(nullptr)
  , if_bandwidth_(0)

  , interval_(0)
  , attenuation_gain_(0)
  , antenna_(0)
  , receive_mode_(0)
  , points_(0u)
  , header_only_(false)
  , is_record_(false){}
struct TaskParamDefaultTypeInternal {
  constexpr TaskParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskParamDefaultTypeInternal() {}
  union {
    TaskParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskParamDefaultTypeInternal _TaskParam_default_instance_;
constexpr StartIQRequest::StartIQRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_runner_()
  , task_param_(nullptr){}
struct StartIQRequestDefaultTypeInternal {
  constexpr StartIQRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartIQRequestDefaultTypeInternal() {}
  union {
    StartIQRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartIQRequestDefaultTypeInternal _StartIQRequest_default_instance_;
constexpr ResultHeader::ResultHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_from_(nullptr)
  , time_stamp_(nullptr)
  , position_(nullptr)
  , sequence_number_(PROTOBUF_ULONGLONG(0))
  , sweep_index_(PROTOBUF_ULONGLONG(0))
  , segment_index_(0u)
  , data_type_(0)
  , truncate_bits_(0u)
  , is_last_one_(false)
  , center_frequency_(0)
  , sample_rate_(0)
  , scale_to_volts_(0){}
struct ResultHeaderDefaultTypeInternal {
  constexpr ResultHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultHeaderDefaultTypeInternal() {}
  union {
    ResultHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultHeaderDefaultTypeInternal _ResultHeader_default_instance_;
constexpr ResutlBody::ResutlBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iq_data_()
  , _iq_data_cached_byte_size_(){}
struct ResutlBodyDefaultTypeInternal {
  constexpr ResutlBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResutlBodyDefaultTypeInternal() {}
  union {
    ResutlBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResutlBodyDefaultTypeInternal _ResutlBody_default_instance_;
constexpr Result::Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , body_(nullptr){}
struct ResultDefaultTypeInternal {
  constexpr ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;
constexpr RecordDescriptor::RecordDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bands_()
  , record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(nullptr)
  , time_span_(nullptr)
  , record_count_(0u){}
struct RecordDescriptorDefaultTypeInternal {
  constexpr RecordDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordDescriptorDefaultTypeInternal() {}
  union {
    RecordDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordDescriptorDefaultTypeInternal _RecordDescriptor_default_instance_;
constexpr QueryRecordRequest::QueryRecordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , time_span_(nullptr)
  , freq_span_(nullptr)
  , segment_count_(0){}
struct QueryRecordRequestDefaultTypeInternal {
  constexpr QueryRecordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryRecordRequestDefaultTypeInternal() {}
  union {
    QueryRecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRecordRequestDefaultTypeInternal _QueryRecordRequest_default_instance_;
constexpr QueryRecordReply::QueryRecordReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matching_records_()
  , node_id_(nullptr){}
struct QueryRecordReplyDefaultTypeInternal {
  constexpr QueryRecordReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryRecordReplyDefaultTypeInternal() {}
  union {
    QueryRecordReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRecordReplyDefaultTypeInternal _QueryRecordReply_default_instance_;
constexpr ReplayStartRequest::ReplayStartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replay_id_(nullptr)
  , result_interval_(0){}
struct ReplayStartRequestDefaultTypeInternal {
  constexpr ReplayStartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplayStartRequestDefaultTypeInternal() {}
  union {
    ReplayStartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplayStartRequestDefaultTypeInternal _ReplayStartRequest_default_instance_;
}  // namespace zhIQAcquire
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fzczh_2fZhIQAcquire_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fzczh_2fZhIQAcquire_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fzczh_2fZhIQAcquire_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fzczh_2fZhIQAcquire_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, if_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, antenna_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, receive_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, header_only_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::TaskParam, is_record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest, task_runner_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest, task_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, sweep_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, segment_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, data_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, truncate_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, is_last_one_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, scale_to_volts_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResutlBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ResutlBody, iq_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::Result, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::Result, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor, from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor, record_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor, bands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest, segment_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest, freq_span_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply, node_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply, matching_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest, replay_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest, result_interval_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::zczh::zhIQAcquire::TaskParam)},
  { 14, -1, sizeof(::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest)},
  { 21, -1, sizeof(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader)},
  { 39, -1, sizeof(::zb::dcts::node::zczh::zhIQAcquire::ResutlBody)},
  { 45, -1, sizeof(::zb::dcts::node::zczh::zhIQAcquire::Result)},
  { 52, -1, sizeof(::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor)},
  { 62, -1, sizeof(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest)},
  { 71, -1, sizeof(::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply)},
  { 78, -1, sizeof(::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIQAcquire::_TaskParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIQAcquire::_StartIQRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIQAcquire::_ResultHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIQAcquire::_ResutlBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIQAcquire::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIQAcquire::_RecordDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIQAcquire::_QueryRecordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIQAcquire::_QueryRecordReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIQAcquire::_ReplayStartRequest_default_instance_),
};

const char descriptor_table_protodef_node_2fzczh_2fZhIQAcquire_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033node/zczh/ZhIQAcquire.proto\022\035zb.dcts.n"
  "ode.zczh.zhIQAcquire\032\ndcts.proto\032\017node/n"
  "ode.proto\032\023node/spectrum.proto\032\021node/rep"
  "lay.proto\"\214\002\n\tTaskParam\0222\n\004span\030\001 \001(\0132$."
  "zb.dcts.node.spectrum.FrequencySpan\022@\n\014I"
  "F_bandwidth\030\002 \001(\0162*.zb.dcts.node.zczh.zh"
  "IQAcquire.IFBandWidth\022\020\n\010interval\030\003 \001(\005\022"
  "\030\n\020attenuation_gain\030\004 \001(\005\022\017\n\007antenna\030\005 \001"
  "(\005\022\024\n\014receive_mode\030\006 \001(\005\022\016\n\006points\030\007 \001(\r"
  "\022\023\n\013header_only\030\010 \001(\010\022\021\n\tis_record\030\t \001(\010"
  "\"}\n\016StartIQRequest\022-\n\013task_runner\030\001 \003(\0132"
  "\030.zb.dcts.node.NodeDevice\022<\n\ntask_param\030"
  "\002 \001(\0132(.zb.dcts.node.zczh.zhIQAcquire.Ta"
  "skParam\"\350\002\n\014ResultHeader\022-\n\013result_from\030"
  "\001 \001(\0132\030.zb.dcts.node.NodeDevice\022\021\n\trecor"
  "d_id\030\002 \001(\t\022\027\n\017sequence_number\030\003 \001(\004\022\023\n\013s"
  "weep_index\030\004 \001(\004\022\025\n\rsegment_index\030\005 \001(\r\022"
  "\021\n\tdata_type\030\006 \001(\005\022\025\n\rtruncate_bits\030\007 \001("
  "\r\022\023\n\013is_last_one\030\010 \001(\010\022\030\n\020center_frequen"
  "cy\030\t \001(\001\022\023\n\013sample_rate\030\n \001(\001\022\026\n\016scale_t"
  "o_volts\030\013 \001(\001\022&\n\ntime_stamp\030\014 \001(\0132\022.zb.d"
  "cts.Timestamp\022#\n\010position\030\017 \001(\0132\021.zb.dct"
  "s.Position\"\035\n\nResutlBody\022\017\n\007iq_data\030\001 \003("
  "\002\"~\n\006Result\022;\n\006header\030\001 \001(\0132+.zb.dcts.no"
  "de.zczh.zhIQAcquire.ResultHeader\0227\n\004body"
  "\030\002 \001(\0132).zb.dcts.node.zczh.zhIQAcquire.R"
  "esutlBody\"\271\001\n\020RecordDescriptor\022\021\n\trecord"
  "_id\030\001 \001(\t\022&\n\004from\030\002 \001(\0132\030.zb.dcts.node.N"
  "odeDevice\022$\n\ttime_span\030\003 \001(\0132\021.zb.dcts.T"
  "imeSpan\022\024\n\014record_count\030\004 \001(\r\022.\n\005bands\030\005"
  " \003(\0132\037.zb.dcts.node.spectrum.BaseBand\"\273\001"
  "\n\022QueryRecordRequest\022/\n\014task_account\030\001 \001"
  "(\0132\031.zb.dcts.node.TaskAccount\022\025\n\rsegment"
  "_count\030\002 \001(\005\022$\n\ttime_span\030\003 \001(\0132\021.zb.dct"
  "s.TimeSpan\0227\n\tfreq_span\030\005 \001(\0132$.zb.dcts."
  "node.spectrum.FrequencySpan\"\204\001\n\020QueryRec"
  "ordReply\022%\n\007node_id\030\001 \001(\0132\024.zb.dcts.node"
  ".NodeId\022I\n\020matching_records\030\002 \003(\0132/.zb.d"
  "cts.node.zczh.zhIQAcquire.RecordDescript"
  "or\"_\n\022ReplayStartRequest\0220\n\treplay_id\030\001 "
  "\001(\0132\035.zb.dcts.node.replay.ReplayId\022\027\n\017re"
  "sult_interval\030\003 \001(\005*\352\001\n\013IFBandWidth\022\013\n\007B"
  "AND_1K\020\000\022\013\n\007BAND_2K\020\001\022\013\n\007BAND_5K\020\002\022\014\n\010BA"
  "ND_10K\020\003\022\014\n\010BAND_20K\020\004\022\014\n\010BAND_50K\020\005\022\r\n\t"
  "BAND_100K\020\006\022\r\n\tBAND_200K\020\007\022\r\n\tBAND_500K\020"
  "\010\022\013\n\007BAND_1M\020\t\022\013\n\007BAND_2M\020\n\022\013\n\007BAND_5M\020\013"
  "\022\014\n\010BAND_10M\020\014\022\014\n\010BAND_20M\020\r\022\014\n\010BAND_40M"
  "\020\016\022\014\n\010BAND_80M\020\0172\361\007\n\022ZhIQAcquireService\022"
  "[\n\rRealtimeStart\022-.zb.dcts.node.zczh.zhI"
  "QAcquire.StartIQRequest\032\031.zb.dcts.node.T"
  "askAccount\"\000\022O\n\021GetRealtimeResult\022\017.zb.d"
  "cts.TaskId\032%.zb.dcts.node.zczh.zhIQAcqui"
  "re.Result\"\0000\001\022:\n\014RealtimeStop\022\017.zb.dcts."
  "TaskId\032\027.zb.dcts.node.NodeReply\"\000\022C\n\013Rec"
  "ordStart\022\031.zb.dcts.node.TaskAccount\032\027.zb"
  ".dcts.node.NodeReply\"\000\022B\n\nRecordStop\022\031.z"
  "b.dcts.node.TaskAccount\032\027.zb.dcts.node.N"
  "odeReply\"\000\022\\\n\017ReplayTaskStart\022,.zb.dcts."
  "node.replay.CreateReplayTaskRequest\032\031.zb"
  ".dcts.node.TaskAccount\"\000\022{\n\021ReplayRecord"
  "Query\0221.zb.dcts.node.zczh.zhIQAcquire.Qu"
  "eryRecordRequest\032/.zb.dcts.node.zczh.zhI"
  "QAcquire.QueryRecordReply\"\0000\001\022[\n\013ReplayS"
  "tart\0221.zb.dcts.node.zczh.zhIQAcquire.Rep"
  "layStartRequest\032\027.zb.dcts.node.NodeReply"
  "\"\000\022[\n\017GetReplayResult\022\035.zb.dcts.node.rep"
  "lay.ReplayId\032%.zb.dcts.node.zczh.zhIQAcq"
  "uire.Result\"\0000\001\022F\n\nReplayStop\022\035.zb.dcts."
  "node.replay.ReplayId\032\027.zb.dcts.node.Node"
  "Reply\"\000\022M\n\014ReplayAdjust\022\".zb.dcts.node.r"
  "eplay.AdjustRequest\032\027.zb.dcts.node.NodeR"
  "eply\"\000\022<\n\016ReplayTaskStop\022\017.zb.dcts.TaskI"
  "d\032\027.zb.dcts.node.NodeReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_deps[4] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_node_2fnode_2eproto,
  &::descriptor_table_node_2freplay_2eproto,
  &::descriptor_table_node_2fspectrum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto = {
  false, false, 2916, descriptor_table_protodef_node_2fzczh_2fZhIQAcquire_2eproto, "node/zczh/ZhIQAcquire.proto", 
  &descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_once, descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_deps, 4, 9,
  schemas, file_default_instances, TableStruct_node_2fzczh_2fZhIQAcquire_2eproto::offsets,
  file_level_metadata_node_2fzczh_2fZhIQAcquire_2eproto, file_level_enum_descriptors_node_2fzczh_2fZhIQAcquire_2eproto, file_level_service_descriptors_node_2fzczh_2fZhIQAcquire_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto);
  return descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fzczh_2fZhIQAcquire_2eproto(&descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIQAcquire {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IFBandWidth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto);
  return file_level_enum_descriptors_node_2fzczh_2fZhIQAcquire_2eproto[0];
}
bool IFBandWidth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TaskParam::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& span(const TaskParam* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
TaskParam::_Internal::span(const TaskParam* msg) {
  return *msg->span_;
}
void TaskParam::clear_span() {
  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
}
TaskParam::TaskParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
}
TaskParam::TaskParam(const TaskParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_span()) {
    span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.span_);
  } else {
    span_ = nullptr;
  }
  ::memcpy(&if_bandwidth_, &from.if_bandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_record_) -
    reinterpret_cast<char*>(&if_bandwidth_)) + sizeof(is_record_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
}

void TaskParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_record_) -
    reinterpret_cast<char*>(&span_)) + sizeof(is_record_));
}

TaskParam::~TaskParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete span_;
}

void TaskParam::ArenaDtor(void* object) {
  TaskParam* _this = reinterpret_cast< TaskParam* >(object);
  (void)_this;
}
void TaskParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  ::memset(&if_bandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_record_) -
      reinterpret_cast<char*>(&if_bandwidth_)) + sizeof(is_record_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencySpan span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIQAcquire.IFBandWidth IF_bandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_if_bandwidth(static_cast<::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth>(val));
        } else goto handle_unusual;
        continue;
      // int32 interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_gain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          receive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 points = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool header_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          header_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_record = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_record_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  if (this->has_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::span(this), target, stream);
  }

  // .zb.dcts.node.zczh.zhIQAcquire.IFBandWidth IF_bandwidth = 2;
  if (this->if_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_if_bandwidth(), target);
  }

  // int32 interval = 3;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_interval(), target);
  }

  // int32 attenuation_gain = 4;
  if (this->attenuation_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attenuation_gain(), target);
  }

  // int32 antenna = 5;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_antenna(), target);
  }

  // int32 receive_mode = 6;
  if (this->receive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_receive_mode(), target);
  }

  // uint32 points = 7;
  if (this->points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_points(), target);
  }

  // bool header_only = 8;
  if (this->header_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_header_only(), target);
  }

  // bool is_record = 9;
  if (this->is_record() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_record(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
  return target;
}

size_t TaskParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  if (this->has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  // .zb.dcts.node.zczh.zhIQAcquire.IFBandWidth IF_bandwidth = 2;
  if (this->if_bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_if_bandwidth());
  }

  // int32 interval = 3;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_interval());
  }

  // int32 attenuation_gain = 4;
  if (this->attenuation_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_gain());
  }

  // int32 antenna = 5;
  if (this->antenna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  // int32 receive_mode = 6;
  if (this->receive_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_mode());
  }

  // uint32 points = 7;
  if (this->points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_points());
  }

  // bool header_only = 8;
  if (this->header_only() != 0) {
    total_size += 1 + 1;
  }

  // bool is_record = 9;
  if (this->is_record() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
    MergeFrom(*source);
  }
}

void TaskParam::MergeFrom(const TaskParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    _internal_mutable_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_span());
  }
  if (from.if_bandwidth() != 0) {
    _internal_set_if_bandwidth(from._internal_if_bandwidth());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from.attenuation_gain() != 0) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
  if (from.receive_mode() != 0) {
    _internal_set_receive_mode(from._internal_receive_mode());
  }
  if (from.points() != 0) {
    _internal_set_points(from._internal_points());
  }
  if (from.header_only() != 0) {
    _internal_set_header_only(from._internal_header_only());
  }
  if (from.is_record() != 0) {
    _internal_set_is_record(from._internal_is_record());
  }
}

void TaskParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskParam::CopyFrom(const TaskParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskParam::IsInitialized() const {
  return true;
}

void TaskParam::InternalSwap(TaskParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskParam, is_record_)
      + sizeof(TaskParam::is_record_)
      - PROTOBUF_FIELD_OFFSET(TaskParam, span_)>(
          reinterpret_cast<char*>(&span_),
          reinterpret_cast<char*>(&other->span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartIQRequest::_Internal {
 public:
  static const ::zb::dcts::node::zczh::zhIQAcquire::TaskParam& task_param(const StartIQRequest* msg);
};

const ::zb::dcts::node::zczh::zhIQAcquire::TaskParam&
StartIQRequest::_Internal::task_param(const StartIQRequest* msg) {
  return *msg->task_param_;
}
void StartIQRequest::clear_task_runner() {
  task_runner_.Clear();
}
StartIQRequest::StartIQRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_runner_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
}
StartIQRequest::StartIQRequest(const StartIQRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_runner_(from.task_runner_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_param()) {
    task_param_ = new ::zb::dcts::node::zczh::zhIQAcquire::TaskParam(*from.task_param_);
  } else {
    task_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
}

void StartIQRequest::SharedCtor() {
task_param_ = nullptr;
}

StartIQRequest::~StartIQRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartIQRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_param_;
}

void StartIQRequest::ArenaDtor(void* object) {
  StartIQRequest* _this = reinterpret_cast< StartIQRequest* >(object);
  (void)_this;
}
void StartIQRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartIQRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartIQRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_runner_.Clear();
  if (GetArena() == nullptr && task_param_ != nullptr) {
    delete task_param_;
  }
  task_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartIQRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.NodeDevice task_runner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_runner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIQAcquire.TaskParam task_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartIQRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_runner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_task_runner(i), target, stream);
  }

  // .zb.dcts.node.zczh.zhIQAcquire.TaskParam task_param = 2;
  if (this->has_task_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
  return target;
}

size_t StartIQRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  total_size += 1UL * this->_internal_task_runner_size();
  for (const auto& msg : this->task_runner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.zczh.zhIQAcquire.TaskParam task_param = 2;
  if (this->has_task_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartIQRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartIQRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartIQRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
    MergeFrom(*source);
  }
}

void StartIQRequest::MergeFrom(const StartIQRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_runner_.MergeFrom(from.task_runner_);
  if (from.has_task_param()) {
    _internal_mutable_task_param()->::zb::dcts::node::zczh::zhIQAcquire::TaskParam::MergeFrom(from._internal_task_param());
  }
}

void StartIQRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartIQRequest::CopyFrom(const StartIQRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartIQRequest::IsInitialized() const {
  return true;
}

void StartIQRequest::InternalSwap(StartIQRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_runner_.InternalSwap(&other->task_runner_);
  swap(task_param_, other->task_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartIQRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResultHeader::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& result_from(const ResultHeader* msg);
  static const ::zb::dcts::Timestamp& time_stamp(const ResultHeader* msg);
  static const ::zb::dcts::Position& position(const ResultHeader* msg);
};

const ::zb::dcts::node::NodeDevice&
ResultHeader::_Internal::result_from(const ResultHeader* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::Timestamp&
ResultHeader::_Internal::time_stamp(const ResultHeader* msg) {
  return *msg->time_stamp_;
}
const ::zb::dcts::Position&
ResultHeader::_Internal::position(const ResultHeader* msg) {
  return *msg->position_;
}
void ResultHeader::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void ResultHeader::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
void ResultHeader::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
ResultHeader::ResultHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
}
ResultHeader::ResultHeader(const ResultHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::node::NodeDevice(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new ::zb::dcts::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::zb::dcts::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_to_volts_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(scale_to_volts_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
}

void ResultHeader::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scale_to_volts_) -
    reinterpret_cast<char*>(&result_from_)) + sizeof(scale_to_volts_));
}

ResultHeader::~ResultHeader() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResultHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_stamp_;
  if (this != internal_default_instance()) delete position_;
}

void ResultHeader::ArenaDtor(void* object) {
  ResultHeader* _this = reinterpret_cast< ResultHeader* >(object);
  (void)_this;
}
void ResultHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResultHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty();
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_to_volts_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(scale_to_volts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeDevice result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string record_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sweep_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sweep_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 segment_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          segment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 truncate_bits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          truncate_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_last_one = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_last_one_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double center_frequency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sample_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double scale_to_volts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          scale_to_volts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time_stamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeDevice result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_record_id(), target);
  }

  // uint64 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence_number(), target);
  }

  // uint64 sweep_index = 4;
  if (this->sweep_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sweep_index(), target);
  }

  // uint32 segment_index = 5;
  if (this->segment_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_segment_index(), target);
  }

  // int32 data_type = 6;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_data_type(), target);
  }

  // uint32 truncate_bits = 7;
  if (this->truncate_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_truncate_bits(), target);
  }

  // bool is_last_one = 8;
  if (this->is_last_one() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_last_one(), target);
  }

  // double center_frequency = 9;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_center_frequency(), target);
  }

  // double sample_rate = 10;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_sample_rate(), target);
  }

  // double scale_to_volts = 11;
  if (!(this->scale_to_volts() <= 0 && this->scale_to_volts() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_scale_to_volts(), target);
  }

  // .zb.dcts.Timestamp time_stamp = 12;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::time_stamp(this), target, stream);
  }

  // .zb.dcts.Position position = 15;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
  return target;
}

size_t ResultHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.node.NodeDevice result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.Timestamp time_stamp = 12;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // .zb.dcts.Position position = 15;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint64 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_number());
  }

  // uint64 sweep_index = 4;
  if (this->sweep_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sweep_index());
  }

  // uint32 segment_index = 5;
  if (this->segment_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_segment_index());
  }

  // int32 data_type = 6;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_type());
  }

  // uint32 truncate_bits = 7;
  if (this->truncate_bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_truncate_bits());
  }

  // bool is_last_one = 8;
  if (this->is_last_one() != 0) {
    total_size += 1 + 1;
  }

  // double center_frequency = 9;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double sample_rate = 10;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double scale_to_volts = 11;
  if (!(this->scale_to_volts() <= 0 && this->scale_to_volts() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
    MergeFrom(*source);
  }
}

void ResultHeader::MergeFrom(const ResultHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->::zb::dcts::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::zb::dcts::Position::MergeFrom(from._internal_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.sweep_index() != 0) {
    _internal_set_sweep_index(from._internal_sweep_index());
  }
  if (from.segment_index() != 0) {
    _internal_set_segment_index(from._internal_segment_index());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.truncate_bits() != 0) {
    _internal_set_truncate_bits(from._internal_truncate_bits());
  }
  if (from.is_last_one() != 0) {
    _internal_set_is_last_one(from._internal_is_last_one());
  }
  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.sample_rate() <= 0 && from.sample_rate() >= 0)) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  if (!(from.scale_to_volts() <= 0 && from.scale_to_volts() >= 0)) {
    _internal_set_scale_to_volts(from._internal_scale_to_volts());
  }
}

void ResultHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultHeader::CopyFrom(const ResultHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultHeader::IsInitialized() const {
  return true;
}

void ResultHeader::InternalSwap(ResultHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResultHeader, scale_to_volts_)
      + sizeof(ResultHeader::scale_to_volts_)
      - PROTOBUF_FIELD_OFFSET(ResultHeader, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResutlBody::_Internal {
 public:
};

ResutlBody::ResutlBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  iq_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
}
ResutlBody::ResutlBody(const ResutlBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      iq_data_(from.iq_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
}

void ResutlBody::SharedCtor() {
}

ResutlBody::~ResutlBody() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResutlBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResutlBody::ArenaDtor(void* object) {
  ResutlBody* _this = reinterpret_cast< ResutlBody* >(object);
  (void)_this;
}
void ResutlBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResutlBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResutlBody::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iq_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResutlBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float iq_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_iq_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_iq_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResutlBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float iq_data = 1;
  if (this->_internal_iq_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_iq_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
  return target;
}

size_t ResutlBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float iq_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_iq_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _iq_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResutlBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
  GOOGLE_DCHECK_NE(&from, this);
  const ResutlBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResutlBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
    MergeFrom(*source);
  }
}

void ResutlBody::MergeFrom(const ResutlBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  iq_data_.MergeFrom(from.iq_data_);
}

void ResutlBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResutlBody::CopyFrom(const ResutlBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResutlBody::IsInitialized() const {
  return true;
}

void ResutlBody::InternalSwap(ResutlBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  iq_data_.InternalSwap(&other->iq_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResutlBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Result::_Internal {
 public:
  static const ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader& header(const Result* msg);
  static const ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody& body(const Result* msg);
};

const ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader&
Result::_Internal::header(const Result* msg) {
  return *msg->header_;
}
const ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody&
Result::_Internal::body(const Result* msg) {
  return *msg->body_;
}
Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIQAcquire.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIQAcquire.Result)
}

void Result::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_) -
    reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIQAcquire.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIQAcquire.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.zczh.zhIQAcquire.ResultHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIQAcquire.ResutlBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIQAcquire.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.zczh.zhIQAcquire.ResultHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.node.zczh.zhIQAcquire.ResutlBody body = 2;
  if (this->has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIQAcquire.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIQAcquire.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.zczh.zhIQAcquire.ResultHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.node.zczh.zhIQAcquire.ResutlBody body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIQAcquire.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIQAcquire.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::node::zczh::zhIQAcquire::ResultHeader::MergeFrom(from._internal_header());
  }
  if (from.has_body()) {
    _internal_mutable_body()->::zb::dcts::node::zczh::zhIQAcquire::ResutlBody::MergeFrom(from._internal_body());
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Result, body_)
      + sizeof(Result::body_)
      - PROTOBUF_FIELD_OFFSET(Result, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecordDescriptor::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& from(const RecordDescriptor* msg);
  static const ::zb::dcts::TimeSpan& time_span(const RecordDescriptor* msg);
};

const ::zb::dcts::node::NodeDevice&
RecordDescriptor::_Internal::from(const RecordDescriptor* msg) {
  return *msg->from_;
}
const ::zb::dcts::TimeSpan&
RecordDescriptor::_Internal::time_span(const RecordDescriptor* msg) {
  return *msg->time_span_;
}
void RecordDescriptor::clear_from() {
  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void RecordDescriptor::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void RecordDescriptor::clear_bands() {
  bands_.Clear();
}
RecordDescriptor::RecordDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
}
RecordDescriptor::RecordDescriptor(const RecordDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bands_(from.bands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  if (from._internal_has_from()) {
    from_ = new ::zb::dcts::node::NodeDevice(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  record_count_ = from.record_count_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
}

void RecordDescriptor::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&from_)) + sizeof(record_count_));
}

RecordDescriptor::~RecordDescriptor() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete time_span_;
}

void RecordDescriptor::ArenaDtor(void* object) {
  RecordDescriptor* _this = reinterpret_cast< RecordDescriptor* >(object);
  (void)_this;
}
void RecordDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bands_.Clear();
  record_id_.ClearToEmpty();
  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  record_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string record_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.NodeDevice from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          record_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.spectrum.BaseBand bands = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_record_id(), target);
  }

  // .zb.dcts.node.NodeDevice from = 2;
  if (this->has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // uint32 record_count = 4;
  if (this->record_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_record_count(), target);
  }

  // repeated .zb.dcts.node.spectrum.BaseBand bands = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_bands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
  return target;
}

size_t RecordDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.spectrum.BaseBand bands = 5;
  total_size += 1UL * this->_internal_bands_size();
  for (const auto& msg : this->bands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.node.NodeDevice from = 2;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // uint32 record_count = 4;
  if (this->record_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
    MergeFrom(*source);
  }
}

void RecordDescriptor::MergeFrom(const RecordDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bands_.MergeFrom(from.bands_);
  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_from()) {
    _internal_mutable_from()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.record_count() != 0) {
    _internal_set_record_count(from._internal_record_count());
  }
}

void RecordDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordDescriptor::CopyFrom(const RecordDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordDescriptor::IsInitialized() const {
  return true;
}

void RecordDescriptor::InternalSwap(RecordDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bands_.InternalSwap(&other->bands_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordDescriptor, record_count_)
      + sizeof(RecordDescriptor::record_count_)
      - PROTOBUF_FIELD_OFFSET(RecordDescriptor, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryRecordRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const QueryRecordRequest* msg);
  static const ::zb::dcts::TimeSpan& time_span(const QueryRecordRequest* msg);
  static const ::zb::dcts::node::spectrum::FrequencySpan& freq_span(const QueryRecordRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
QueryRecordRequest::_Internal::task_account(const QueryRecordRequest* msg) {
  return *msg->task_account_;
}
const ::zb::dcts::TimeSpan&
QueryRecordRequest::_Internal::time_span(const QueryRecordRequest* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::node::spectrum::FrequencySpan&
QueryRecordRequest::_Internal::freq_span(const QueryRecordRequest* msg) {
  return *msg->freq_span_;
}
void QueryRecordRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
void QueryRecordRequest::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void QueryRecordRequest::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
QueryRecordRequest::QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
}
QueryRecordRequest::QueryRecordRequest(const QueryRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  segment_count_ = from.segment_count_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
}

void QueryRecordRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_count_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(segment_count_));
}

QueryRecordRequest::~QueryRecordRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete freq_span_;
}

void QueryRecordRequest::ArenaDtor(void* object) {
  QueryRecordRequest* _this = reinterpret_cast< QueryRecordRequest* >(object);
  (void)_this;
}
void QueryRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  segment_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 segment_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          segment_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRecordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // int32 segment_count = 2;
  if (this->segment_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_segment_count(), target);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::freq_span(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
  return target;
}

size_t QueryRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // int32 segment_count = 2;
  if (this->segment_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_segment_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRecordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRecordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRecordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
    MergeFrom(*source);
  }
}

void QueryRecordRequest::MergeFrom(const QueryRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (from.segment_count() != 0) {
    _internal_set_segment_count(from._internal_segment_count());
  }
}

void QueryRecordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRecordRequest::CopyFrom(const QueryRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRecordRequest::IsInitialized() const {
  return true;
}

void QueryRecordRequest::InternalSwap(QueryRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRecordRequest, segment_count_)
      + sizeof(QueryRecordRequest::segment_count_)
      - PROTOBUF_FIELD_OFFSET(QueryRecordRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRecordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryRecordReply::_Internal {
 public:
  static const ::zb::dcts::node::NodeId& node_id(const QueryRecordReply* msg);
};

const ::zb::dcts::node::NodeId&
QueryRecordReply::_Internal::node_id(const QueryRecordReply* msg) {
  return *msg->node_id_;
}
void QueryRecordReply::clear_node_id() {
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
}
QueryRecordReply::QueryRecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matching_records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
}
QueryRecordReply::QueryRecordReply(const QueryRecordReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matching_records_(from.matching_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node_id()) {
    node_id_ = new ::zb::dcts::node::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
}

void QueryRecordReply::SharedCtor() {
node_id_ = nullptr;
}

QueryRecordReply::~QueryRecordReply() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRecordReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_id_;
}

void QueryRecordReply::ArenaDtor(void* object) {
  QueryRecordReply* _this = reinterpret_cast< QueryRecordReply* >(object);
  (void)_this;
}
void QueryRecordReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRecordReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRecordReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matching_records_.Clear();
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRecordReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeId node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor matching_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matching_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRecordReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_id(this), target, stream);
  }

  // repeated .zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor matching_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matching_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_matching_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
  return target;
}

size_t QueryRecordReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor matching_records = 2;
  total_size += 1UL * this->_internal_matching_records_size();
  for (const auto& msg : this->matching_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRecordReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRecordReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRecordReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
    MergeFrom(*source);
  }
}

void QueryRecordReply::MergeFrom(const QueryRecordReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matching_records_.MergeFrom(from.matching_records_);
  if (from.has_node_id()) {
    _internal_mutable_node_id()->::zb::dcts::node::NodeId::MergeFrom(from._internal_node_id());
  }
}

void QueryRecordReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRecordReply::CopyFrom(const QueryRecordReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRecordReply::IsInitialized() const {
  return true;
}

void QueryRecordReply::InternalSwap(QueryRecordReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matching_records_.InternalSwap(&other->matching_records_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRecordReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayStartRequest::_Internal {
 public:
  static const ::zb::dcts::node::replay::ReplayId& replay_id(const ReplayStartRequest* msg);
};

const ::zb::dcts::node::replay::ReplayId&
ReplayStartRequest::_Internal::replay_id(const ReplayStartRequest* msg) {
  return *msg->replay_id_;
}
void ReplayStartRequest::clear_replay_id() {
  if (GetArena() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
ReplayStartRequest::ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
}
ReplayStartRequest::ReplayStartRequest(const ReplayStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::zb::dcts::node::replay::ReplayId(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  result_interval_ = from.result_interval_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
}

void ReplayStartRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&replay_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_interval_) -
    reinterpret_cast<char*>(&replay_id_)) + sizeof(result_interval_));
}

ReplayStartRequest::~ReplayStartRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete replay_id_;
}

void ReplayStartRequest::ArenaDtor(void* object) {
  ReplayStartRequest* _this = reinterpret_cast< ReplayStartRequest* >(object);
  (void)_this;
}
void ReplayStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplayStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  result_interval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.replay.ReplayId replay_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::replay_id(this), target, stream);
  }

  // int32 result_interval = 3;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
  return target;
}

size_t ReplayStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  // int32 result_interval = 3;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
    MergeFrom(*source);
  }
}

void ReplayStartRequest::MergeFrom(const ReplayStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::zb::dcts::node::replay::ReplayId::MergeFrom(from._internal_replay_id());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
}

void ReplayStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayStartRequest::CopyFrom(const ReplayStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayStartRequest::IsInitialized() const {
  return true;
}

void ReplayStartRequest::InternalSwap(ReplayStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayStartRequest, result_interval_)
      + sizeof(ReplayStartRequest::result_interval_)
      - PROTOBUF_FIELD_OFFSET(ReplayStartRequest, replay_id_)>(
          reinterpret_cast<char*>(&replay_id_),
          reinterpret_cast<char*>(&other->replay_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zhIQAcquire
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIQAcquire::TaskParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIQAcquire::TaskParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIQAcquire::Result* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIQAcquire::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIQAcquire::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
