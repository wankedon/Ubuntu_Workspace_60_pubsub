// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/zczh/ZhPosition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhPosition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhPosition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/node.pb.h"
#include "node/replay.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fzczh_2fZhPosition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fzczh_2fZhPosition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fzczh_2fZhPosition_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fzczh_2fZhPosition_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhposition {
class RecordDescriptor;
struct RecordDescriptorDefaultTypeInternal;
extern RecordDescriptorDefaultTypeInternal _RecordDescriptor_default_instance_;
class RecordReply;
struct RecordReplyDefaultTypeInternal;
extern RecordReplyDefaultTypeInternal _RecordReply_default_instance_;
class ReplayStartRequest;
struct ReplayStartRequestDefaultTypeInternal;
extern ReplayStartRequestDefaultTypeInternal _ReplayStartRequest_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class TaskStartRequest;
struct TaskStartRequestDefaultTypeInternal;
extern TaskStartRequestDefaultTypeInternal _TaskStartRequest_default_instance_;
}  // namespace zhposition
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::zczh::zhposition::RecordDescriptor* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhposition::RecordDescriptor>(Arena*);
template<> ::zb::dcts::node::zczh::zhposition::RecordReply* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhposition::RecordReply>(Arena*);
template<> ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhposition::ReplayStartRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhposition::Result* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhposition::Result>(Arena*);
template<> ::zb::dcts::node::zczh::zhposition::TaskStartRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhposition::TaskStartRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhposition {

// ===================================================================

class TaskStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhposition.TaskStartRequest) */ {
 public:
  inline TaskStartRequest() : TaskStartRequest(nullptr) {}
  virtual ~TaskStartRequest();
  explicit constexpr TaskStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskStartRequest(const TaskStartRequest& from);
  TaskStartRequest(TaskStartRequest&& from) noexcept
    : TaskStartRequest() {
    *this = ::std::move(from);
  }

  inline TaskStartRequest& operator=(const TaskStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStartRequest& operator=(TaskStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskStartRequest* internal_default_instance() {
    return reinterpret_cast<const TaskStartRequest*>(
               &_TaskStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskStartRequest& a, TaskStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskStartRequest* New() const final {
    return CreateMaybeMessage<TaskStartRequest>(nullptr);
  }

  TaskStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskStartRequest& from);
  void MergeFrom(const TaskStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhposition.TaskStartRequest";
  }
  protected:
  explicit TaskStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPosition_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunnerFieldNumber = 1,
    kDirectionTaskIdFieldNumber = 2,
  };
  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  int task_runner_size() const;
  private:
  int _internal_task_runner_size() const;
  public:
  void clear_task_runner();
  ::zb::dcts::node::NodeDevice* mutable_task_runner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
      mutable_task_runner();
  private:
  const ::zb::dcts::node::NodeDevice& _internal_task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* _internal_add_task_runner();
  public:
  const ::zb::dcts::node::NodeDevice& task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* add_task_runner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
      task_runner() const;

  // uint32 directionTask_id = 2;
  void clear_directiontask_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 directiontask_id() const;
  void set_directiontask_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_directiontask_id() const;
  void _internal_set_directiontask_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhposition.TaskStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice > task_runner_;
  ::PROTOBUF_NAMESPACE_ID::uint32 directiontask_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPosition_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhposition.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhposition.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPosition_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPositionFieldNumber = 1,
  };
  // .zb.dcts.Position target_position = 1;
  bool has_target_position() const;
  private:
  bool _internal_has_target_position() const;
  public:
  void clear_target_position();
  const ::zb::dcts::Position& target_position() const;
  ::zb::dcts::Position* release_target_position();
  ::zb::dcts::Position* mutable_target_position();
  void set_allocated_target_position(::zb::dcts::Position* target_position);
  private:
  const ::zb::dcts::Position& _internal_target_position() const;
  ::zb::dcts::Position* _internal_mutable_target_position();
  public:
  void unsafe_arena_set_allocated_target_position(
      ::zb::dcts::Position* target_position);
  ::zb::dcts::Position* unsafe_arena_release_target_position();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhposition.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::Position* target_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPosition_2eproto;
};
// -------------------------------------------------------------------

class RecordDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhposition.RecordDescriptor) */ {
 public:
  inline RecordDescriptor() : RecordDescriptor(nullptr) {}
  virtual ~RecordDescriptor();
  explicit constexpr RecordDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordDescriptor(const RecordDescriptor& from);
  RecordDescriptor(RecordDescriptor&& from) noexcept
    : RecordDescriptor() {
    *this = ::std::move(from);
  }

  inline RecordDescriptor& operator=(const RecordDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordDescriptor& operator=(RecordDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordDescriptor* internal_default_instance() {
    return reinterpret_cast<const RecordDescriptor*>(
               &_RecordDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RecordDescriptor& a, RecordDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordDescriptor* New() const final {
    return CreateMaybeMessage<RecordDescriptor>(nullptr);
  }

  RecordDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordDescriptor& from);
  void MergeFrom(const RecordDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhposition.RecordDescriptor";
  }
  protected:
  explicit RecordDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPosition_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 1,
    kTimeSpanFieldNumber = 2,
    kCenterFrequencyFieldNumber = 3,
    kRecordCountFieldNumber = 4,
  };
  // string record_id = 1;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.TimeSpan time_span = 2;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // double center_frequency = 3;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // uint32 record_count = 4;
  void clear_record_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count() const;
  void set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_count() const;
  void _internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhposition.RecordDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::TimeSpan* time_span_;
  double center_frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPosition_2eproto;
};
// -------------------------------------------------------------------

class RecordReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhposition.RecordReply) */ {
 public:
  inline RecordReply() : RecordReply(nullptr) {}
  virtual ~RecordReply();
  explicit constexpr RecordReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordReply(const RecordReply& from);
  RecordReply(RecordReply&& from) noexcept
    : RecordReply() {
    *this = ::std::move(from);
  }

  inline RecordReply& operator=(const RecordReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordReply& operator=(RecordReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordReply* internal_default_instance() {
    return reinterpret_cast<const RecordReply*>(
               &_RecordReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RecordReply& a, RecordReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordReply* New() const final {
    return CreateMaybeMessage<RecordReply>(nullptr);
  }

  RecordReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordReply& from);
  void MergeFrom(const RecordReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhposition.RecordReply";
  }
  protected:
  explicit RecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPosition_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .zb.dcts.node.zczh.zhposition.RecordDescriptor records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::zb::dcts::node::zczh::zhposition::RecordDescriptor* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhposition::RecordDescriptor >*
      mutable_records();
  private:
  const ::zb::dcts::node::zczh::zhposition::RecordDescriptor& _internal_records(int index) const;
  ::zb::dcts::node::zczh::zhposition::RecordDescriptor* _internal_add_records();
  public:
  const ::zb::dcts::node::zczh::zhposition::RecordDescriptor& records(int index) const;
  ::zb::dcts::node::zczh::zhposition::RecordDescriptor* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhposition::RecordDescriptor >&
      records() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhposition.RecordReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhposition::RecordDescriptor > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPosition_2eproto;
};
// -------------------------------------------------------------------

class ReplayStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhposition.ReplayStartRequest) */ {
 public:
  inline ReplayStartRequest() : ReplayStartRequest(nullptr) {}
  virtual ~ReplayStartRequest();
  explicit constexpr ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplayStartRequest(const ReplayStartRequest& from);
  ReplayStartRequest(ReplayStartRequest&& from) noexcept
    : ReplayStartRequest() {
    *this = ::std::move(from);
  }

  inline ReplayStartRequest& operator=(const ReplayStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayStartRequest& operator=(ReplayStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplayStartRequest* internal_default_instance() {
    return reinterpret_cast<const ReplayStartRequest*>(
               &_ReplayStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReplayStartRequest& a, ReplayStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayStartRequest* New() const final {
    return CreateMaybeMessage<ReplayStartRequest>(nullptr);
  }

  ReplayStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayStartRequest& from);
  void MergeFrom(const ReplayStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhposition.ReplayStartRequest";
  }
  protected:
  explicit ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPosition_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 1,
    kResultIntervalFieldNumber = 2,
  };
  // string record_id = 1;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // int32 result_interval = 2;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhposition.ReplayStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPosition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskStartRequest

// repeated .zb.dcts.node.NodeDevice task_runner = 1;
inline int TaskStartRequest::_internal_task_runner_size() const {
  return task_runner_.size();
}
inline int TaskStartRequest::task_runner_size() const {
  return _internal_task_runner_size();
}
inline ::zb::dcts::node::NodeDevice* TaskStartRequest::mutable_task_runner(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhposition.TaskStartRequest.task_runner)
  return task_runner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
TaskStartRequest::mutable_task_runner() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhposition.TaskStartRequest.task_runner)
  return &task_runner_;
}
inline const ::zb::dcts::node::NodeDevice& TaskStartRequest::_internal_task_runner(int index) const {
  return task_runner_.Get(index);
}
inline const ::zb::dcts::node::NodeDevice& TaskStartRequest::task_runner(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.TaskStartRequest.task_runner)
  return _internal_task_runner(index);
}
inline ::zb::dcts::node::NodeDevice* TaskStartRequest::_internal_add_task_runner() {
  return task_runner_.Add();
}
inline ::zb::dcts::node::NodeDevice* TaskStartRequest::add_task_runner() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhposition.TaskStartRequest.task_runner)
  return _internal_add_task_runner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
TaskStartRequest::task_runner() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhposition.TaskStartRequest.task_runner)
  return task_runner_;
}

// uint32 directionTask_id = 2;
inline void TaskStartRequest::clear_directiontask_id() {
  directiontask_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStartRequest::_internal_directiontask_id() const {
  return directiontask_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStartRequest::directiontask_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.TaskStartRequest.directionTask_id)
  return _internal_directiontask_id();
}
inline void TaskStartRequest::_internal_set_directiontask_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  directiontask_id_ = value;
}
inline void TaskStartRequest::set_directiontask_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_directiontask_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhposition.TaskStartRequest.directionTask_id)
}

// -------------------------------------------------------------------

// Result

// .zb.dcts.Position target_position = 1;
inline bool Result::_internal_has_target_position() const {
  return this != internal_default_instance() && target_position_ != nullptr;
}
inline bool Result::has_target_position() const {
  return _internal_has_target_position();
}
inline const ::zb::dcts::Position& Result::_internal_target_position() const {
  const ::zb::dcts::Position* p = target_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Position&>(
      ::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& Result::target_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.Result.target_position)
  return _internal_target_position();
}
inline void Result::unsafe_arena_set_allocated_target_position(
    ::zb::dcts::Position* target_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_position_);
  }
  target_position_ = target_position;
  if (target_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhposition.Result.target_position)
}
inline ::zb::dcts::Position* Result::release_target_position() {
  
  ::zb::dcts::Position* temp = target_position_;
  target_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* Result::unsafe_arena_release_target_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhposition.Result.target_position)
  
  ::zb::dcts::Position* temp = target_position_;
  target_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* Result::_internal_mutable_target_position() {
  
  if (target_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    target_position_ = p;
  }
  return target_position_;
}
inline ::zb::dcts::Position* Result::mutable_target_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhposition.Result.target_position)
  return _internal_mutable_target_position();
}
inline void Result::set_allocated_target_position(::zb::dcts::Position* target_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_position_);
  }
  if (target_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_position)->GetArena();
    if (message_arena != submessage_arena) {
      target_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_position, submessage_arena);
    }
    
  } else {
    
  }
  target_position_ = target_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhposition.Result.target_position)
}

// -------------------------------------------------------------------

// RecordDescriptor

// string record_id = 1;
inline void RecordDescriptor::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& RecordDescriptor::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_id)
  return _internal_record_id();
}
inline void RecordDescriptor::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& RecordDescriptor::_internal_record_id() const {
  return record_id_.Get();
}
inline void RecordDescriptor::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecordDescriptor::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecordDescriptor::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDescriptor::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_id)
}

// .zb.dcts.TimeSpan time_span = 2;
inline bool RecordDescriptor::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool RecordDescriptor::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.RecordDescriptor.time_span)
  return _internal_time_span();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhposition.RecordDescriptor.time_span)
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhposition.RecordDescriptor.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhposition.RecordDescriptor.time_span)
  return _internal_mutable_time_span();
}
inline void RecordDescriptor::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhposition.RecordDescriptor.time_span)
}

// double center_frequency = 3;
inline void RecordDescriptor::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double RecordDescriptor::_internal_center_frequency() const {
  return center_frequency_;
}
inline double RecordDescriptor::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.RecordDescriptor.center_frequency)
  return _internal_center_frequency();
}
inline void RecordDescriptor::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void RecordDescriptor::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhposition.RecordDescriptor.center_frequency)
}

// uint32 record_count = 4;
inline void RecordDescriptor::clear_record_count() {
  record_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::_internal_record_count() const {
  return record_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::record_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_count)
  return _internal_record_count();
}
inline void RecordDescriptor::_internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  record_count_ = value;
}
inline void RecordDescriptor::set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhposition.RecordDescriptor.record_count)
}

// -------------------------------------------------------------------

// RecordReply

// repeated .zb.dcts.node.zczh.zhposition.RecordDescriptor records = 1;
inline int RecordReply::_internal_records_size() const {
  return records_.size();
}
inline int RecordReply::records_size() const {
  return _internal_records_size();
}
inline void RecordReply::clear_records() {
  records_.Clear();
}
inline ::zb::dcts::node::zczh::zhposition::RecordDescriptor* RecordReply::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhposition.RecordReply.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhposition::RecordDescriptor >*
RecordReply::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhposition.RecordReply.records)
  return &records_;
}
inline const ::zb::dcts::node::zczh::zhposition::RecordDescriptor& RecordReply::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::zb::dcts::node::zczh::zhposition::RecordDescriptor& RecordReply::records(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.RecordReply.records)
  return _internal_records(index);
}
inline ::zb::dcts::node::zczh::zhposition::RecordDescriptor* RecordReply::_internal_add_records() {
  return records_.Add();
}
inline ::zb::dcts::node::zczh::zhposition::RecordDescriptor* RecordReply::add_records() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhposition.RecordReply.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhposition::RecordDescriptor >&
RecordReply::records() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhposition.RecordReply.records)
  return records_;
}

// -------------------------------------------------------------------

// ReplayStartRequest

// string record_id = 1;
inline void ReplayStartRequest::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& ReplayStartRequest::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.ReplayStartRequest.record_id)
  return _internal_record_id();
}
inline void ReplayStartRequest::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhposition.ReplayStartRequest.record_id)
}
inline std::string* ReplayStartRequest::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhposition.ReplayStartRequest.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& ReplayStartRequest::_internal_record_id() const {
  return record_id_.Get();
}
inline void ReplayStartRequest::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayStartRequest::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhposition.ReplayStartRequest.record_id)
}
inline void ReplayStartRequest::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhposition.ReplayStartRequest.record_id)
}
inline void ReplayStartRequest::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhposition.ReplayStartRequest.record_id)
}
inline std::string* ReplayStartRequest::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayStartRequest::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhposition.ReplayStartRequest.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayStartRequest::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhposition.ReplayStartRequest.record_id)
}

// int32 result_interval = 2;
inline void ReplayStartRequest::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhposition.ReplayStartRequest.result_interval)
  return _internal_result_interval();
}
inline void ReplayStartRequest::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void ReplayStartRequest::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhposition.ReplayStartRequest.result_interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zhposition
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhPosition_2eproto
