// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/zczh/ZhDirection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhDirection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhDirection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/node.pb.h"
#include "node/spectrum.pb.h"
#include "node/detection.pb.h"
#include "node/replay.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fzczh_2fZhDirection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fzczh_2fZhDirection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fzczh_2fZhDirection_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhdirection {
class DirectionRequest;
struct DirectionRequestDefaultTypeInternal;
extern DirectionRequestDefaultTypeInternal _DirectionRequest_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class OperationStatus;
struct OperationStatusDefaultTypeInternal;
extern OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
class PosRequest;
struct PosRequestDefaultTypeInternal;
extern PosRequestDefaultTypeInternal _PosRequest_default_instance_;
class PosResult;
struct PosResultDefaultTypeInternal;
extern PosResultDefaultTypeInternal _PosResult_default_instance_;
class PosTaskId;
struct PosTaskIdDefaultTypeInternal;
extern PosTaskIdDefaultTypeInternal _PosTaskId_default_instance_;
class RecordDescriptor;
struct RecordDescriptorDefaultTypeInternal;
extern RecordDescriptorDefaultTypeInternal _RecordDescriptor_default_instance_;
class RecordReply;
struct RecordReplyDefaultTypeInternal;
extern RecordReplyDefaultTypeInternal _RecordReply_default_instance_;
class RecordRequest;
struct RecordRequestDefaultTypeInternal;
extern RecordRequestDefaultTypeInternal _RecordRequest_default_instance_;
class ReplayStartRequest;
struct ReplayStartRequestDefaultTypeInternal;
extern ReplayStartRequestDefaultTypeInternal _ReplayStartRequest_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class TargetDirection;
struct TargetDirectionDefaultTypeInternal;
extern TargetDirectionDefaultTypeInternal _TargetDirection_default_instance_;
class TaskParam;
struct TaskParamDefaultTypeInternal;
extern TaskParamDefaultTypeInternal _TaskParam_default_instance_;
}  // namespace zhdirection
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::zczh::zhdirection::DirectionRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::DirectionRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::Header* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::Header>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::OperationStatus* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::OperationStatus>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::PosRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::PosRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::PosResult* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::PosResult>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::PosTaskId* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::PosTaskId>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::RecordDescriptor* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::RecordDescriptor>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::RecordReply* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::RecordReply>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::RecordRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::RecordRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::ReplayStartRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::Result* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::Result>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::TargetDirection* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::TargetDirection>(Arena*);
template<> ::zb::dcts::node::zczh::zhdirection::TaskParam* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::TaskParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhdirection {

enum IFBandWidth : int {
  BAND_1K = 0,
  BAND_2K = 1,
  BAND_5K = 2,
  BAND_10K = 3,
  BAND_20K = 4,
  BAND_50K = 5,
  BAND_100K = 6,
  BAND_200K = 7,
  BAND_500K = 8,
  BAND_1M = 9,
  BAND_2M = 10,
  BAND_5M = 11,
  BAND_10M = 12,
  BAND_20M = 13,
  BAND_40M = 14,
  BAND_80M = 15,
  IFBandWidth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IFBandWidth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IFBandWidth_IsValid(int value);
constexpr IFBandWidth IFBandWidth_MIN = BAND_1K;
constexpr IFBandWidth IFBandWidth_MAX = BAND_80M;
constexpr int IFBandWidth_ARRAYSIZE = IFBandWidth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IFBandWidth_descriptor();
template<typename T>
inline const std::string& IFBandWidth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IFBandWidth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IFBandWidth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IFBandWidth_descriptor(), enum_t_value);
}
inline bool IFBandWidth_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IFBandWidth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IFBandWidth>(
    IFBandWidth_descriptor(), name, value);
}
enum DFBandWidth : int {
  DF_BAND_100hz = 0,
  DF_BAND_200hz = 1,
  DF_BAND_500hz = 2,
  DF_BAND_1K = 3,
  DF_BAND_2K = 4,
  DF_BAND_5K = 5,
  DF_BAND_10K = 6,
  DF_BAND_20K = 7,
  DF_BAND_50K = 8,
  DF_BAND_100K = 9,
  DF_BAND_200K = 10,
  DF_BAND_500K = 11,
  DF_BAND_1M = 12,
  DF_BAND_2M = 13,
  DF_BAND_5M = 14,
  DF_BAND_10M = 15,
  DFBandWidth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DFBandWidth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DFBandWidth_IsValid(int value);
constexpr DFBandWidth DFBandWidth_MIN = DF_BAND_100hz;
constexpr DFBandWidth DFBandWidth_MAX = DF_BAND_10M;
constexpr int DFBandWidth_ARRAYSIZE = DFBandWidth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DFBandWidth_descriptor();
template<typename T>
inline const std::string& DFBandWidth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DFBandWidth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DFBandWidth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DFBandWidth_descriptor(), enum_t_value);
}
inline bool DFBandWidth_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DFBandWidth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DFBandWidth>(
    DFBandWidth_descriptor(), name, value);
}
// ===================================================================

class TaskParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.TaskParam) */ {
 public:
  inline TaskParam() : TaskParam(nullptr) {}
  virtual ~TaskParam();
  explicit constexpr TaskParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParam(const TaskParam& from);
  TaskParam(TaskParam&& from) noexcept
    : TaskParam() {
    *this = ::std::move(from);
  }

  inline TaskParam& operator=(const TaskParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParam& operator=(TaskParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParam* internal_default_instance() {
    return reinterpret_cast<const TaskParam*>(
               &_TaskParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskParam& a, TaskParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskParam* New() const final {
    return CreateMaybeMessage<TaskParam>(nullptr);
  }

  TaskParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskParam& from);
  void MergeFrom(const TaskParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.TaskParam";
  }
  protected:
  explicit TaskParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFrequencyFieldNumber = 1,
    kIfBandwidthFieldNumber = 2,
    kDfBandwidthFieldNumber = 3,
    kResultIntervalFieldNumber = 4,
    kStatusIntervalFieldNumber = 5,
    kExpectedPointsFieldNumber = 6,
    kAverageCountFieldNumber = 7,
    kAttenuationGainFieldNumber = 8,
    kAntennaFieldNumber = 9,
    kReceiveModeFieldNumber = 10,
    kModeFieldNumber = 11,
    kValueFieldNumber = 12,
    kTargetCountFieldNumber = 13,
    kRefLevelFieldNumber = 15,
    kRecordIntervalFieldNumber = 14,
  };
  // double center_frequency = 1;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // .zb.dcts.node.zczh.zhdirection.IFBandWidth if_bandwidth = 2;
  void clear_if_bandwidth();
  ::zb::dcts::node::zczh::zhdirection::IFBandWidth if_bandwidth() const;
  void set_if_bandwidth(::zb::dcts::node::zczh::zhdirection::IFBandWidth value);
  private:
  ::zb::dcts::node::zczh::zhdirection::IFBandWidth _internal_if_bandwidth() const;
  void _internal_set_if_bandwidth(::zb::dcts::node::zczh::zhdirection::IFBandWidth value);
  public:

  // .zb.dcts.node.zczh.zhdirection.DFBandWidth df_bandwidth = 3;
  void clear_df_bandwidth();
  ::zb::dcts::node::zczh::zhdirection::DFBandWidth df_bandwidth() const;
  void set_df_bandwidth(::zb::dcts::node::zczh::zhdirection::DFBandWidth value);
  private:
  ::zb::dcts::node::zczh::zhdirection::DFBandWidth _internal_df_bandwidth() const;
  void _internal_set_df_bandwidth(::zb::dcts::node::zczh::zhdirection::DFBandWidth value);
  public:

  // int32 result_interval = 4;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status_interval = 5;
  void clear_status_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 status_interval() const;
  void set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_interval() const;
  void _internal_set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expected_points = 6;
  void clear_expected_points();
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points() const;
  void set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expected_points() const;
  void _internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 average_count = 7;
  void clear_average_count();
  ::PROTOBUF_NAMESPACE_ID::int32 average_count() const;
  void set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average_count() const;
  void _internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attenuation_gain = 8;
  void clear_attenuation_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain() const;
  void set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 9;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_mode = 10;
  void clear_receive_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode() const;
  void set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_mode() const;
  void _internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mode = 11;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 12;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 target_count = 13;
  void clear_target_count();
  ::PROTOBUF_NAMESPACE_ID::int32 target_count() const;
  void set_target_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_count() const;
  void _internal_set_target_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double ref_level = 15;
  void clear_ref_level();
  double ref_level() const;
  void set_ref_level(double value);
  private:
  double _internal_ref_level() const;
  void _internal_set_ref_level(double value);
  public:

  // int32 record_interval = 14;
  void clear_record_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 record_interval() const;
  void set_record_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_record_interval() const;
  void _internal_set_record_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.TaskParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double center_frequency_;
  int if_bandwidth_;
  int df_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_count_;
  double ref_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 record_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class DirectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.DirectionRequest) */ {
 public:
  inline DirectionRequest() : DirectionRequest(nullptr) {}
  virtual ~DirectionRequest();
  explicit constexpr DirectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectionRequest(const DirectionRequest& from);
  DirectionRequest(DirectionRequest&& from) noexcept
    : DirectionRequest() {
    *this = ::std::move(from);
  }

  inline DirectionRequest& operator=(const DirectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionRequest& operator=(DirectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectionRequest* internal_default_instance() {
    return reinterpret_cast<const DirectionRequest*>(
               &_DirectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DirectionRequest& a, DirectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionRequest* New() const final {
    return CreateMaybeMessage<DirectionRequest>(nullptr);
  }

  DirectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionRequest& from);
  void MergeFrom(const DirectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.DirectionRequest";
  }
  protected:
  explicit DirectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunnerFieldNumber = 1,
    kTaskParamFieldNumber = 2,
  };
  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  int task_runner_size() const;
  private:
  int _internal_task_runner_size() const;
  public:
  void clear_task_runner();
  ::zb::dcts::node::NodeDevice* mutable_task_runner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
      mutable_task_runner();
  private:
  const ::zb::dcts::node::NodeDevice& _internal_task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* _internal_add_task_runner();
  public:
  const ::zb::dcts::node::NodeDevice& task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* add_task_runner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
      task_runner() const;

  // .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 2;
  bool has_task_param() const;
  private:
  bool _internal_has_task_param() const;
  public:
  void clear_task_param();
  const ::zb::dcts::node::zczh::zhdirection::TaskParam& task_param() const;
  ::zb::dcts::node::zczh::zhdirection::TaskParam* release_task_param();
  ::zb::dcts::node::zczh::zhdirection::TaskParam* mutable_task_param();
  void set_allocated_task_param(::zb::dcts::node::zczh::zhdirection::TaskParam* task_param);
  private:
  const ::zb::dcts::node::zczh::zhdirection::TaskParam& _internal_task_param() const;
  ::zb::dcts::node::zczh::zhdirection::TaskParam* _internal_mutable_task_param();
  public:
  void unsafe_arena_set_allocated_task_param(
      ::zb::dcts::node::zczh::zhdirection::TaskParam* task_param);
  ::zb::dcts::node::zczh::zhdirection::TaskParam* unsafe_arena_release_task_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.DirectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice > task_runner_;
  ::zb::dcts::node::zczh::zhdirection::TaskParam* task_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 2,
    kResultFromFieldNumber = 1,
    kTimeSpanFieldNumber = 5,
    kDevicePositionFieldNumber = 6,
    kSequenceNumberFieldNumber = 3,
    kSweepCountFieldNumber = 4,
  };
  // string record_id = 2;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.node.NodeDevice result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::node::NodeDevice& result_from() const;
  ::zb::dcts::node::NodeDevice* release_result_from();
  ::zb::dcts::node::NodeDevice* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::node::NodeDevice* result_from);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_result_from() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::node::NodeDevice* result_from);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_result_from();

  // .zb.dcts.TimeSpan time_span = 5;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.Position device_position = 6;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // uint32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sweep_count = 4;
  void clear_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count() const;
  void set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweep_count() const;
  void _internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::node::NodeDevice* result_from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::Position* device_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class TargetDirection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.TargetDirection) */ {
 public:
  inline TargetDirection() : TargetDirection(nullptr) {}
  virtual ~TargetDirection();
  explicit constexpr TargetDirection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetDirection(const TargetDirection& from);
  TargetDirection(TargetDirection&& from) noexcept
    : TargetDirection() {
    *this = ::std::move(from);
  }

  inline TargetDirection& operator=(const TargetDirection& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetDirection& operator=(TargetDirection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetDirection& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetDirection* internal_default_instance() {
    return reinterpret_cast<const TargetDirection*>(
               &_TargetDirection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TargetDirection& a, TargetDirection& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetDirection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetDirection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetDirection* New() const final {
    return CreateMaybeMessage<TargetDirection>(nullptr);
  }

  TargetDirection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetDirection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetDirection& from);
  void MergeFrom(const TargetDirection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetDirection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.TargetDirection";
  }
  protected:
  explicit TargetDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFrequencyFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kAmplitudeFieldNumber = 4,
  };
  // double center_frequency = 1;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // double direction = 2;
  void clear_direction();
  double direction() const;
  void set_direction(double value);
  private:
  double _internal_direction() const;
  void _internal_set_direction(double value);
  public:

  // int32 confidence = 3;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float amplitude = 4;
  void clear_amplitude();
  float amplitude() const;
  void set_amplitude(float value);
  private:
  float _internal_amplitude() const;
  void _internal_set_amplitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.TargetDirection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double center_frequency_;
  double direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float amplitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTargetDetectionFieldNumber = 2,
    kDfSpectrumFieldNumber = 3,
    kSignalListFieldNumber = 4,
  };
  // .zb.dcts.node.zczh.zhdirection.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::node::zczh::zhdirection::Header& header() const;
  ::zb::dcts::node::zczh::zhdirection::Header* release_header();
  ::zb::dcts::node::zczh::zhdirection::Header* mutable_header();
  void set_allocated_header(::zb::dcts::node::zczh::zhdirection::Header* header);
  private:
  const ::zb::dcts::node::zczh::zhdirection::Header& _internal_header() const;
  ::zb::dcts::node::zczh::zhdirection::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::node::zczh::zhdirection::Header* header);
  ::zb::dcts::node::zczh::zhdirection::Header* unsafe_arena_release_header();

  // .zb.dcts.node.zczh.zhdirection.TargetDirection target_detection = 2;
  bool has_target_detection() const;
  private:
  bool _internal_has_target_detection() const;
  public:
  void clear_target_detection();
  const ::zb::dcts::node::zczh::zhdirection::TargetDirection& target_detection() const;
  ::zb::dcts::node::zczh::zhdirection::TargetDirection* release_target_detection();
  ::zb::dcts::node::zczh::zhdirection::TargetDirection* mutable_target_detection();
  void set_allocated_target_detection(::zb::dcts::node::zczh::zhdirection::TargetDirection* target_detection);
  private:
  const ::zb::dcts::node::zczh::zhdirection::TargetDirection& _internal_target_detection() const;
  ::zb::dcts::node::zczh::zhdirection::TargetDirection* _internal_mutable_target_detection();
  public:
  void unsafe_arena_set_allocated_target_detection(
      ::zb::dcts::node::zczh::zhdirection::TargetDirection* target_detection);
  ::zb::dcts::node::zczh::zhdirection::TargetDirection* unsafe_arena_release_target_detection();

  // .zb.dcts.node.spectrum.View df_spectrum = 3;
  bool has_df_spectrum() const;
  private:
  bool _internal_has_df_spectrum() const;
  public:
  void clear_df_spectrum();
  const ::zb::dcts::node::spectrum::View& df_spectrum() const;
  ::zb::dcts::node::spectrum::View* release_df_spectrum();
  ::zb::dcts::node::spectrum::View* mutable_df_spectrum();
  void set_allocated_df_spectrum(::zb::dcts::node::spectrum::View* df_spectrum);
  private:
  const ::zb::dcts::node::spectrum::View& _internal_df_spectrum() const;
  ::zb::dcts::node::spectrum::View* _internal_mutable_df_spectrum();
  public:
  void unsafe_arena_set_allocated_df_spectrum(
      ::zb::dcts::node::spectrum::View* df_spectrum);
  ::zb::dcts::node::spectrum::View* unsafe_arena_release_df_spectrum();

  // .zb.dcts.node.detection.SignalList signal_list = 4;
  bool has_signal_list() const;
  private:
  bool _internal_has_signal_list() const;
  public:
  void clear_signal_list();
  const ::zb::dcts::node::detection::SignalList& signal_list() const;
  ::zb::dcts::node::detection::SignalList* release_signal_list();
  ::zb::dcts::node::detection::SignalList* mutable_signal_list();
  void set_allocated_signal_list(::zb::dcts::node::detection::SignalList* signal_list);
  private:
  const ::zb::dcts::node::detection::SignalList& _internal_signal_list() const;
  ::zb::dcts::node::detection::SignalList* _internal_mutable_signal_list();
  public:
  void unsafe_arena_set_allocated_signal_list(
      ::zb::dcts::node::detection::SignalList* signal_list);
  ::zb::dcts::node::detection::SignalList* unsafe_arena_release_signal_list();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::zczh::zhdirection::Header* header_;
  ::zb::dcts::node::zczh::zhdirection::TargetDirection* target_detection_;
  ::zb::dcts::node::spectrum::View* df_spectrum_;
  ::zb::dcts::node::detection::SignalList* signal_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class RecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.RecordRequest) */ {
 public:
  inline RecordRequest() : RecordRequest(nullptr) {}
  virtual ~RecordRequest();
  explicit constexpr RecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordRequest(const RecordRequest& from);
  RecordRequest(RecordRequest&& from) noexcept
    : RecordRequest() {
    *this = ::std::move(from);
  }

  inline RecordRequest& operator=(const RecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRequest& operator=(RecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordRequest* internal_default_instance() {
    return reinterpret_cast<const RecordRequest*>(
               &_RecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RecordRequest& a, RecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordRequest* New() const final {
    return CreateMaybeMessage<RecordRequest>(nullptr);
  }

  RecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordRequest& from);
  void MergeFrom(const RecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.RecordRequest";
  }
  protected:
  explicit RecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskAccountFieldNumber = 1,
    kTimesOfMonitorIntervalFieldNumber = 2,
  };
  // .zb.dcts.node.TaskAccount task_account = 1;
  bool has_task_account() const;
  private:
  bool _internal_has_task_account() const;
  public:
  void clear_task_account();
  const ::zb::dcts::node::TaskAccount& task_account() const;
  ::zb::dcts::node::TaskAccount* release_task_account();
  ::zb::dcts::node::TaskAccount* mutable_task_account();
  void set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account);
  private:
  const ::zb::dcts::node::TaskAccount& _internal_task_account() const;
  ::zb::dcts::node::TaskAccount* _internal_mutable_task_account();
  public:
  void unsafe_arena_set_allocated_task_account(
      ::zb::dcts::node::TaskAccount* task_account);
  ::zb::dcts::node::TaskAccount* unsafe_arena_release_task_account();

  // int32 times_of_monitor_interval = 2;
  void clear_times_of_monitor_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 times_of_monitor_interval() const;
  void set_times_of_monitor_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times_of_monitor_interval() const;
  void _internal_set_times_of_monitor_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.RecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::TaskAccount* task_account_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_of_monitor_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class RecordDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.RecordDescriptor) */ {
 public:
  inline RecordDescriptor() : RecordDescriptor(nullptr) {}
  virtual ~RecordDescriptor();
  explicit constexpr RecordDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordDescriptor(const RecordDescriptor& from);
  RecordDescriptor(RecordDescriptor&& from) noexcept
    : RecordDescriptor() {
    *this = ::std::move(from);
  }

  inline RecordDescriptor& operator=(const RecordDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordDescriptor& operator=(RecordDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordDescriptor* internal_default_instance() {
    return reinterpret_cast<const RecordDescriptor*>(
               &_RecordDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RecordDescriptor& a, RecordDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordDescriptor* New() const final {
    return CreateMaybeMessage<RecordDescriptor>(nullptr);
  }

  RecordDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordDescriptor& from);
  void MergeFrom(const RecordDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.RecordDescriptor";
  }
  protected:
  explicit RecordDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 1,
    kTimeSpanFieldNumber = 2,
    kTaskParamFieldNumber = 3,
  };
  // string record_id = 1;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.TimeSpan time_span = 2;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 3;
  bool has_task_param() const;
  private:
  bool _internal_has_task_param() const;
  public:
  void clear_task_param();
  const ::zb::dcts::node::zczh::zhdirection::TaskParam& task_param() const;
  ::zb::dcts::node::zczh::zhdirection::TaskParam* release_task_param();
  ::zb::dcts::node::zczh::zhdirection::TaskParam* mutable_task_param();
  void set_allocated_task_param(::zb::dcts::node::zczh::zhdirection::TaskParam* task_param);
  private:
  const ::zb::dcts::node::zczh::zhdirection::TaskParam& _internal_task_param() const;
  ::zb::dcts::node::zczh::zhdirection::TaskParam* _internal_mutable_task_param();
  public:
  void unsafe_arena_set_allocated_task_param(
      ::zb::dcts::node::zczh::zhdirection::TaskParam* task_param);
  ::zb::dcts::node::zczh::zhdirection::TaskParam* unsafe_arena_release_task_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::node::zczh::zhdirection::TaskParam* task_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class RecordReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.RecordReply) */ {
 public:
  inline RecordReply() : RecordReply(nullptr) {}
  virtual ~RecordReply();
  explicit constexpr RecordReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordReply(const RecordReply& from);
  RecordReply(RecordReply&& from) noexcept
    : RecordReply() {
    *this = ::std::move(from);
  }

  inline RecordReply& operator=(const RecordReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordReply& operator=(RecordReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordReply* internal_default_instance() {
    return reinterpret_cast<const RecordReply*>(
               &_RecordReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RecordReply& a, RecordReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordReply* New() const final {
    return CreateMaybeMessage<RecordReply>(nullptr);
  }

  RecordReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordReply& from);
  void MergeFrom(const RecordReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.RecordReply";
  }
  protected:
  explicit RecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .zb.dcts.node.zczh.zhdirection.RecordDescriptor records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::zb::dcts::node::zczh::zhdirection::RecordDescriptor* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhdirection::RecordDescriptor >*
      mutable_records();
  private:
  const ::zb::dcts::node::zczh::zhdirection::RecordDescriptor& _internal_records(int index) const;
  ::zb::dcts::node::zczh::zhdirection::RecordDescriptor* _internal_add_records();
  public:
  const ::zb::dcts::node::zczh::zhdirection::RecordDescriptor& records(int index) const;
  ::zb::dcts::node::zczh::zhdirection::RecordDescriptor* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhdirection::RecordDescriptor >&
      records() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.RecordReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhdirection::RecordDescriptor > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class ReplayStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.ReplayStartRequest) */ {
 public:
  inline ReplayStartRequest() : ReplayStartRequest(nullptr) {}
  virtual ~ReplayStartRequest();
  explicit constexpr ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplayStartRequest(const ReplayStartRequest& from);
  ReplayStartRequest(ReplayStartRequest&& from) noexcept
    : ReplayStartRequest() {
    *this = ::std::move(from);
  }

  inline ReplayStartRequest& operator=(const ReplayStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayStartRequest& operator=(ReplayStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplayStartRequest* internal_default_instance() {
    return reinterpret_cast<const ReplayStartRequest*>(
               &_ReplayStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReplayStartRequest& a, ReplayStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayStartRequest* New() const final {
    return CreateMaybeMessage<ReplayStartRequest>(nullptr);
  }

  ReplayStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayStartRequest& from);
  void MergeFrom(const ReplayStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.ReplayStartRequest";
  }
  protected:
  explicit ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 1,
    kResultIntervalFieldNumber = 2,
  };
  // string record_id = 1;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // int32 result_interval = 2;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class PosRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.PosRequest) */ {
 public:
  inline PosRequest() : PosRequest(nullptr) {}
  virtual ~PosRequest();
  explicit constexpr PosRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosRequest(const PosRequest& from);
  PosRequest(PosRequest&& from) noexcept
    : PosRequest() {
    *this = ::std::move(from);
  }

  inline PosRequest& operator=(const PosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosRequest& operator=(PosRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosRequest* internal_default_instance() {
    return reinterpret_cast<const PosRequest*>(
               &_PosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PosRequest& a, PosRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PosRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosRequest* New() const final {
    return CreateMaybeMessage<PosRequest>(nullptr);
  }

  PosRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosRequest& from);
  void MergeFrom(const PosRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.PosRequest";
  }
  protected:
  explicit PosRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcquireTimeFieldNumber = 1,
  };
  // .zb.dcts.Timestamp acquire_time = 1;
  bool has_acquire_time() const;
  private:
  bool _internal_has_acquire_time() const;
  public:
  void clear_acquire_time();
  const ::zb::dcts::Timestamp& acquire_time() const;
  ::zb::dcts::Timestamp* release_acquire_time();
  ::zb::dcts::Timestamp* mutable_acquire_time();
  void set_allocated_acquire_time(::zb::dcts::Timestamp* acquire_time);
  private:
  const ::zb::dcts::Timestamp& _internal_acquire_time() const;
  ::zb::dcts::Timestamp* _internal_mutable_acquire_time();
  public:
  void unsafe_arena_set_allocated_acquire_time(
      ::zb::dcts::Timestamp* acquire_time);
  ::zb::dcts::Timestamp* unsafe_arena_release_acquire_time();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.PosRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::Timestamp* acquire_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class PosTaskId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.PosTaskId) */ {
 public:
  inline PosTaskId() : PosTaskId(nullptr) {}
  virtual ~PosTaskId();
  explicit constexpr PosTaskId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosTaskId(const PosTaskId& from);
  PosTaskId(PosTaskId&& from) noexcept
    : PosTaskId() {
    *this = ::std::move(from);
  }

  inline PosTaskId& operator=(const PosTaskId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosTaskId& operator=(PosTaskId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosTaskId& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosTaskId* internal_default_instance() {
    return reinterpret_cast<const PosTaskId*>(
               &_PosTaskId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PosTaskId& a, PosTaskId& b) {
    a.Swap(&b);
  }
  inline void Swap(PosTaskId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosTaskId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosTaskId* New() const final {
    return CreateMaybeMessage<PosTaskId>(nullptr);
  }

  PosTaskId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosTaskId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosTaskId& from);
  void MergeFrom(const PosTaskId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosTaskId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.PosTaskId";
  }
  protected:
  explicit PosTaskId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .zb.dcts.TaskId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::TaskId& id() const;
  ::zb::dcts::TaskId* release_id();
  ::zb::dcts::TaskId* mutable_id();
  void set_allocated_id(::zb::dcts::TaskId* id);
  private:
  const ::zb::dcts::TaskId& _internal_id() const;
  ::zb::dcts::TaskId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::TaskId* id);
  ::zb::dcts::TaskId* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.PosTaskId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::TaskId* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class PosResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.PosResult) */ {
 public:
  inline PosResult() : PosResult(nullptr) {}
  virtual ~PosResult();
  explicit constexpr PosResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosResult(const PosResult& from);
  PosResult(PosResult&& from) noexcept
    : PosResult() {
    *this = ::std::move(from);
  }

  inline PosResult& operator=(const PosResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosResult& operator=(PosResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosResult* internal_default_instance() {
    return reinterpret_cast<const PosResult*>(
               &_PosResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PosResult& a, PosResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PosResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosResult* New() const final {
    return CreateMaybeMessage<PosResult>(nullptr);
  }

  PosResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosResult& from);
  void MergeFrom(const PosResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.PosResult";
  }
  protected:
  explicit PosResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPositionFieldNumber = 1,
  };
  // .zb.dcts.Position target_position = 1;
  bool has_target_position() const;
  private:
  bool _internal_has_target_position() const;
  public:
  void clear_target_position();
  const ::zb::dcts::Position& target_position() const;
  ::zb::dcts::Position* release_target_position();
  ::zb::dcts::Position* mutable_target_position();
  void set_allocated_target_position(::zb::dcts::Position* target_position);
  private:
  const ::zb::dcts::Position& _internal_target_position() const;
  ::zb::dcts::Position* _internal_mutable_target_position();
  public:
  void unsafe_arena_set_allocated_target_position(
      ::zb::dcts::Position* target_position);
  ::zb::dcts::Position* unsafe_arena_release_target_position();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.PosResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::Position* target_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// -------------------------------------------------------------------

class OperationStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhdirection.OperationStatus) */ {
 public:
  inline OperationStatus() : OperationStatus(nullptr) {}
  virtual ~OperationStatus();
  explicit constexpr OperationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStatus(const OperationStatus& from);
  OperationStatus(OperationStatus&& from) noexcept
    : OperationStatus() {
    *this = ::std::move(from);
  }

  inline OperationStatus& operator=(const OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStatus& operator=(OperationStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStatus* internal_default_instance() {
    return reinterpret_cast<const OperationStatus*>(
               &_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OperationStatus& a, OperationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationStatus* New() const final {
    return CreateMaybeMessage<OperationStatus>(nullptr);
  }

  OperationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationStatus& from);
  void MergeFrom(const OperationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhdirection.OperationStatus";
  }
  protected:
  explicit OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdLinesFieldNumber = 7,
    kRunningDeviceFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kTotalSweepCountFieldNumber = 5,
    kRecordCountFieldNumber = 6,
  };
  // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
  int threshold_lines_size() const;
  private:
  int _internal_threshold_lines_size() const;
  public:
  void clear_threshold_lines();
  ::zb::dcts::node::detection::ThresholdRefLine* mutable_threshold_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >*
      mutable_threshold_lines();
  private:
  const ::zb::dcts::node::detection::ThresholdRefLine& _internal_threshold_lines(int index) const;
  ::zb::dcts::node::detection::ThresholdRefLine* _internal_add_threshold_lines();
  public:
  const ::zb::dcts::node::detection::ThresholdRefLine& threshold_lines(int index) const;
  ::zb::dcts::node::detection::ThresholdRefLine* add_threshold_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >&
      threshold_lines() const;

  // .zb.dcts.node.NodeDevice running_device = 1;
  bool has_running_device() const;
  private:
  bool _internal_has_running_device() const;
  public:
  void clear_running_device();
  const ::zb::dcts::node::NodeDevice& running_device() const;
  ::zb::dcts::node::NodeDevice* release_running_device();
  ::zb::dcts::node::NodeDevice* mutable_running_device();
  void set_allocated_running_device(::zb::dcts::node::NodeDevice* running_device);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_running_device() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_running_device();
  public:
  void unsafe_arena_set_allocated_running_device(
      ::zb::dcts::node::NodeDevice* running_device);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_running_device();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // uint32 total_sweep_count = 5;
  void clear_total_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_sweep_count() const;
  void set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_sweep_count() const;
  void _internal_set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 record_count = 6;
  void clear_record_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count() const;
  void set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_count() const;
  void _internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhdirection.OperationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine > threshold_lines_;
  ::zb::dcts::node::NodeDevice* running_device_;
  ::zb::dcts::TimeSpan* time_span_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_sweep_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhDirection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskParam

// double center_frequency = 1;
inline void TaskParam::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double TaskParam::_internal_center_frequency() const {
  return center_frequency_;
}
inline double TaskParam::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.center_frequency)
  return _internal_center_frequency();
}
inline void TaskParam::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void TaskParam::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.center_frequency)
}

// .zb.dcts.node.zczh.zhdirection.IFBandWidth if_bandwidth = 2;
inline void TaskParam::clear_if_bandwidth() {
  if_bandwidth_ = 0;
}
inline ::zb::dcts::node::zczh::zhdirection::IFBandWidth TaskParam::_internal_if_bandwidth() const {
  return static_cast< ::zb::dcts::node::zczh::zhdirection::IFBandWidth >(if_bandwidth_);
}
inline ::zb::dcts::node::zczh::zhdirection::IFBandWidth TaskParam::if_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.if_bandwidth)
  return _internal_if_bandwidth();
}
inline void TaskParam::_internal_set_if_bandwidth(::zb::dcts::node::zczh::zhdirection::IFBandWidth value) {
  
  if_bandwidth_ = value;
}
inline void TaskParam::set_if_bandwidth(::zb::dcts::node::zczh::zhdirection::IFBandWidth value) {
  _internal_set_if_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.if_bandwidth)
}

// .zb.dcts.node.zczh.zhdirection.DFBandWidth df_bandwidth = 3;
inline void TaskParam::clear_df_bandwidth() {
  df_bandwidth_ = 0;
}
inline ::zb::dcts::node::zczh::zhdirection::DFBandWidth TaskParam::_internal_df_bandwidth() const {
  return static_cast< ::zb::dcts::node::zczh::zhdirection::DFBandWidth >(df_bandwidth_);
}
inline ::zb::dcts::node::zczh::zhdirection::DFBandWidth TaskParam::df_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.df_bandwidth)
  return _internal_df_bandwidth();
}
inline void TaskParam::_internal_set_df_bandwidth(::zb::dcts::node::zczh::zhdirection::DFBandWidth value) {
  
  df_bandwidth_ = value;
}
inline void TaskParam::set_df_bandwidth(::zb::dcts::node::zczh::zhdirection::DFBandWidth value) {
  _internal_set_df_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.df_bandwidth)
}

// int32 result_interval = 4;
inline void TaskParam::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.result_interval)
  return _internal_result_interval();
}
inline void TaskParam::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void TaskParam::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.result_interval)
}

// int32 status_interval = 5;
inline void TaskParam::clear_status_interval() {
  status_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_status_interval() const {
  return status_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::status_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.status_interval)
  return _internal_status_interval();
}
inline void TaskParam::_internal_set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_interval_ = value;
}
inline void TaskParam::set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.status_interval)
}

// int32 expected_points = 6;
inline void TaskParam::clear_expected_points() {
  expected_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_expected_points() const {
  return expected_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::expected_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.expected_points)
  return _internal_expected_points();
}
inline void TaskParam::_internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expected_points_ = value;
}
inline void TaskParam::set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expected_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.expected_points)
}

// int32 average_count = 7;
inline void TaskParam::clear_average_count() {
  average_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_average_count() const {
  return average_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::average_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.average_count)
  return _internal_average_count();
}
inline void TaskParam::_internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_count_ = value;
}
inline void TaskParam::set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.average_count)
}

// int32 attenuation_gain = 8;
inline void TaskParam::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void TaskParam::_internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_gain_ = value;
}
inline void TaskParam::set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.attenuation_gain)
}

// int32 antenna = 9;
inline void TaskParam::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.antenna)
  return _internal_antenna();
}
inline void TaskParam::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void TaskParam::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.antenna)
}

// int32 receive_mode = 10;
inline void TaskParam::clear_receive_mode() {
  receive_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_receive_mode() const {
  return receive_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::receive_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.receive_mode)
  return _internal_receive_mode();
}
inline void TaskParam::_internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_mode_ = value;
}
inline void TaskParam::set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.receive_mode)
}

// int32 mode = 11;
inline void TaskParam::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.mode)
  return _internal_mode();
}
inline void TaskParam::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void TaskParam::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.mode)
}

// int32 value = 12;
inline void TaskParam::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.value)
  return _internal_value();
}
inline void TaskParam::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void TaskParam::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.value)
}

// int32 target_count = 13;
inline void TaskParam::clear_target_count() {
  target_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_target_count() const {
  return target_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::target_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.target_count)
  return _internal_target_count();
}
inline void TaskParam::_internal_set_target_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_count_ = value;
}
inline void TaskParam::set_target_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.target_count)
}

// int32 record_interval = 14;
inline void TaskParam::clear_record_interval() {
  record_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_record_interval() const {
  return record_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::record_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.record_interval)
  return _internal_record_interval();
}
inline void TaskParam::_internal_set_record_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  record_interval_ = value;
}
inline void TaskParam::set_record_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_record_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.record_interval)
}

// double ref_level = 15;
inline void TaskParam::clear_ref_level() {
  ref_level_ = 0;
}
inline double TaskParam::_internal_ref_level() const {
  return ref_level_;
}
inline double TaskParam::ref_level() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TaskParam.ref_level)
  return _internal_ref_level();
}
inline void TaskParam::_internal_set_ref_level(double value) {
  
  ref_level_ = value;
}
inline void TaskParam::set_ref_level(double value) {
  _internal_set_ref_level(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TaskParam.ref_level)
}

// -------------------------------------------------------------------

// DirectionRequest

// repeated .zb.dcts.node.NodeDevice task_runner = 1;
inline int DirectionRequest::_internal_task_runner_size() const {
  return task_runner_.size();
}
inline int DirectionRequest::task_runner_size() const {
  return _internal_task_runner_size();
}
inline ::zb::dcts::node::NodeDevice* DirectionRequest::mutable_task_runner(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_runner)
  return task_runner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
DirectionRequest::mutable_task_runner() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_runner)
  return &task_runner_;
}
inline const ::zb::dcts::node::NodeDevice& DirectionRequest::_internal_task_runner(int index) const {
  return task_runner_.Get(index);
}
inline const ::zb::dcts::node::NodeDevice& DirectionRequest::task_runner(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_runner)
  return _internal_task_runner(index);
}
inline ::zb::dcts::node::NodeDevice* DirectionRequest::_internal_add_task_runner() {
  return task_runner_.Add();
}
inline ::zb::dcts::node::NodeDevice* DirectionRequest::add_task_runner() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_runner)
  return _internal_add_task_runner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
DirectionRequest::task_runner() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_runner)
  return task_runner_;
}

// .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 2;
inline bool DirectionRequest::_internal_has_task_param() const {
  return this != internal_default_instance() && task_param_ != nullptr;
}
inline bool DirectionRequest::has_task_param() const {
  return _internal_has_task_param();
}
inline void DirectionRequest::clear_task_param() {
  if (GetArena() == nullptr && task_param_ != nullptr) {
    delete task_param_;
  }
  task_param_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhdirection::TaskParam& DirectionRequest::_internal_task_param() const {
  const ::zb::dcts::node::zczh::zhdirection::TaskParam* p = task_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhdirection::TaskParam&>(
      ::zb::dcts::node::zczh::zhdirection::_TaskParam_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhdirection::TaskParam& DirectionRequest::task_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_param)
  return _internal_task_param();
}
inline void DirectionRequest::unsafe_arena_set_allocated_task_param(
    ::zb::dcts::node::zczh::zhdirection::TaskParam* task_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_param_);
  }
  task_param_ = task_param;
  if (task_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_param)
}
inline ::zb::dcts::node::zczh::zhdirection::TaskParam* DirectionRequest::release_task_param() {
  
  ::zb::dcts::node::zczh::zhdirection::TaskParam* temp = task_param_;
  task_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhdirection::TaskParam* DirectionRequest::unsafe_arena_release_task_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_param)
  
  ::zb::dcts::node::zczh::zhdirection::TaskParam* temp = task_param_;
  task_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhdirection::TaskParam* DirectionRequest::_internal_mutable_task_param() {
  
  if (task_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::TaskParam>(GetArena());
    task_param_ = p;
  }
  return task_param_;
}
inline ::zb::dcts::node::zczh::zhdirection::TaskParam* DirectionRequest::mutable_task_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_param)
  return _internal_mutable_task_param();
}
inline void DirectionRequest::set_allocated_task_param(::zb::dcts::node::zczh::zhdirection::TaskParam* task_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_param_;
  }
  if (task_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task_param);
    if (message_arena != submessage_arena) {
      task_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_param, submessage_arena);
    }
    
  } else {
    
  }
  task_param_ = task_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.DirectionRequest.task_param)
}

// -------------------------------------------------------------------

// Header

// .zb.dcts.node.NodeDevice result_from = 1;
inline bool Header::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool Header::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::node::NodeDevice& Header::_internal_result_from() const {
  const ::zb::dcts::node::NodeDevice* p = result_from_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& Header::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Header.result_from)
  return _internal_result_from();
}
inline void Header::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::node::NodeDevice* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.Header.result_from)
}
inline ::zb::dcts::node::NodeDevice* Header::release_result_from() {
  
  ::zb::dcts::node::NodeDevice* temp = result_from_;
  result_from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* Header::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.Header.result_from)
  
  ::zb::dcts::node::NodeDevice* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* Header::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::node::NodeDevice* Header::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.Header.result_from)
  return _internal_mutable_result_from();
}
inline void Header::set_allocated_result_from(::zb::dcts::node::NodeDevice* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.Header.result_from)
}

// string record_id = 2;
inline void Header::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& Header::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Header.record_id)
  return _internal_record_id();
}
inline void Header::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.Header.record_id)
}
inline std::string* Header::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.Header.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& Header::_internal_record_id() const {
  return record_id_.Get();
}
inline void Header::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Header::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhdirection.Header.record_id)
}
inline void Header::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhdirection.Header.record_id)
}
inline void Header::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhdirection.Header.record_id)
}
inline std::string* Header::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Header::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.Header.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.Header.record_id)
}

// uint32 sequence_number = 3;
inline void Header::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Header.sequence_number)
  return _internal_sequence_number();
}
inline void Header::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void Header::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.Header.sequence_number)
}

// uint32 sweep_count = 4;
inline void Header::clear_sweep_count() {
  sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_sweep_count() const {
  return sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Header.sweep_count)
  return _internal_sweep_count();
}
inline void Header::_internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sweep_count_ = value;
}
inline void Header::set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.Header.sweep_count)
}

// .zb.dcts.TimeSpan time_span = 5;
inline bool Header::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool Header::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& Header::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& Header::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Header.time_span)
  return _internal_time_span();
}
inline void Header::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.Header.time_span)
}
inline ::zb::dcts::TimeSpan* Header::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* Header::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.Header.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* Header::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* Header::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.Header.time_span)
  return _internal_mutable_time_span();
}
inline void Header::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.Header.time_span)
}

// .zb.dcts.Position device_position = 6;
inline bool Header::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool Header::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& Header::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Position&>(
      ::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& Header::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Header.device_position)
  return _internal_device_position();
}
inline void Header::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.Header.device_position)
}
inline ::zb::dcts::Position* Header::release_device_position() {
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* Header::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.Header.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* Header::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* Header::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.Header.device_position)
  return _internal_mutable_device_position();
}
inline void Header::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.Header.device_position)
}

// -------------------------------------------------------------------

// TargetDirection

// double center_frequency = 1;
inline void TargetDirection::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double TargetDirection::_internal_center_frequency() const {
  return center_frequency_;
}
inline double TargetDirection::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TargetDirection.center_frequency)
  return _internal_center_frequency();
}
inline void TargetDirection::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void TargetDirection::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TargetDirection.center_frequency)
}

// double direction = 2;
inline void TargetDirection::clear_direction() {
  direction_ = 0;
}
inline double TargetDirection::_internal_direction() const {
  return direction_;
}
inline double TargetDirection::direction() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TargetDirection.direction)
  return _internal_direction();
}
inline void TargetDirection::_internal_set_direction(double value) {
  
  direction_ = value;
}
inline void TargetDirection::set_direction(double value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TargetDirection.direction)
}

// int32 confidence = 3;
inline void TargetDirection::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetDirection::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetDirection::confidence() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TargetDirection.confidence)
  return _internal_confidence();
}
inline void TargetDirection::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void TargetDirection::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TargetDirection.confidence)
}

// float amplitude = 4;
inline void TargetDirection::clear_amplitude() {
  amplitude_ = 0;
}
inline float TargetDirection::_internal_amplitude() const {
  return amplitude_;
}
inline float TargetDirection::amplitude() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.TargetDirection.amplitude)
  return _internal_amplitude();
}
inline void TargetDirection::_internal_set_amplitude(float value) {
  
  amplitude_ = value;
}
inline void TargetDirection::set_amplitude(float value) {
  _internal_set_amplitude(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.TargetDirection.amplitude)
}

// -------------------------------------------------------------------

// Result

// .zb.dcts.node.zczh.zhdirection.Header header = 1;
inline bool Result::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Result::has_header() const {
  return _internal_has_header();
}
inline void Result::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhdirection::Header& Result::_internal_header() const {
  const ::zb::dcts::node::zczh::zhdirection::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhdirection::Header&>(
      ::zb::dcts::node::zczh::zhdirection::_Header_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhdirection::Header& Result::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Result.header)
  return _internal_header();
}
inline void Result::unsafe_arena_set_allocated_header(
    ::zb::dcts::node::zczh::zhdirection::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.Result.header)
}
inline ::zb::dcts::node::zczh::zhdirection::Header* Result::release_header() {
  
  ::zb::dcts::node::zczh::zhdirection::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhdirection::Header* Result::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.Result.header)
  
  ::zb::dcts::node::zczh::zhdirection::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhdirection::Header* Result::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::node::zczh::zhdirection::Header* Result::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.Result.header)
  return _internal_mutable_header();
}
inline void Result::set_allocated_header(::zb::dcts::node::zczh::zhdirection::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.Result.header)
}

// .zb.dcts.node.zczh.zhdirection.TargetDirection target_detection = 2;
inline bool Result::_internal_has_target_detection() const {
  return this != internal_default_instance() && target_detection_ != nullptr;
}
inline bool Result::has_target_detection() const {
  return _internal_has_target_detection();
}
inline void Result::clear_target_detection() {
  if (GetArena() == nullptr && target_detection_ != nullptr) {
    delete target_detection_;
  }
  target_detection_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhdirection::TargetDirection& Result::_internal_target_detection() const {
  const ::zb::dcts::node::zczh::zhdirection::TargetDirection* p = target_detection_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhdirection::TargetDirection&>(
      ::zb::dcts::node::zczh::zhdirection::_TargetDirection_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhdirection::TargetDirection& Result::target_detection() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Result.target_detection)
  return _internal_target_detection();
}
inline void Result::unsafe_arena_set_allocated_target_detection(
    ::zb::dcts::node::zczh::zhdirection::TargetDirection* target_detection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_detection_);
  }
  target_detection_ = target_detection;
  if (target_detection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.Result.target_detection)
}
inline ::zb::dcts::node::zczh::zhdirection::TargetDirection* Result::release_target_detection() {
  
  ::zb::dcts::node::zczh::zhdirection::TargetDirection* temp = target_detection_;
  target_detection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhdirection::TargetDirection* Result::unsafe_arena_release_target_detection() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.Result.target_detection)
  
  ::zb::dcts::node::zczh::zhdirection::TargetDirection* temp = target_detection_;
  target_detection_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhdirection::TargetDirection* Result::_internal_mutable_target_detection() {
  
  if (target_detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::TargetDirection>(GetArena());
    target_detection_ = p;
  }
  return target_detection_;
}
inline ::zb::dcts::node::zczh::zhdirection::TargetDirection* Result::mutable_target_detection() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.Result.target_detection)
  return _internal_mutable_target_detection();
}
inline void Result::set_allocated_target_detection(::zb::dcts::node::zczh::zhdirection::TargetDirection* target_detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_detection_;
  }
  if (target_detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target_detection);
    if (message_arena != submessage_arena) {
      target_detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_detection, submessage_arena);
    }
    
  } else {
    
  }
  target_detection_ = target_detection;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.Result.target_detection)
}

// .zb.dcts.node.spectrum.View df_spectrum = 3;
inline bool Result::_internal_has_df_spectrum() const {
  return this != internal_default_instance() && df_spectrum_ != nullptr;
}
inline bool Result::has_df_spectrum() const {
  return _internal_has_df_spectrum();
}
inline const ::zb::dcts::node::spectrum::View& Result::_internal_df_spectrum() const {
  const ::zb::dcts::node::spectrum::View* p = df_spectrum_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::View&>(
      ::zb::dcts::node::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::node::spectrum::View& Result::df_spectrum() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Result.df_spectrum)
  return _internal_df_spectrum();
}
inline void Result::unsafe_arena_set_allocated_df_spectrum(
    ::zb::dcts::node::spectrum::View* df_spectrum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(df_spectrum_);
  }
  df_spectrum_ = df_spectrum;
  if (df_spectrum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.Result.df_spectrum)
}
inline ::zb::dcts::node::spectrum::View* Result::release_df_spectrum() {
  
  ::zb::dcts::node::spectrum::View* temp = df_spectrum_;
  df_spectrum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::View* Result::unsafe_arena_release_df_spectrum() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.Result.df_spectrum)
  
  ::zb::dcts::node::spectrum::View* temp = df_spectrum_;
  df_spectrum_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::View* Result::_internal_mutable_df_spectrum() {
  
  if (df_spectrum_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::View>(GetArena());
    df_spectrum_ = p;
  }
  return df_spectrum_;
}
inline ::zb::dcts::node::spectrum::View* Result::mutable_df_spectrum() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.Result.df_spectrum)
  return _internal_mutable_df_spectrum();
}
inline void Result::set_allocated_df_spectrum(::zb::dcts::node::spectrum::View* df_spectrum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(df_spectrum_);
  }
  if (df_spectrum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(df_spectrum)->GetArena();
    if (message_arena != submessage_arena) {
      df_spectrum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, df_spectrum, submessage_arena);
    }
    
  } else {
    
  }
  df_spectrum_ = df_spectrum;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.Result.df_spectrum)
}

// .zb.dcts.node.detection.SignalList signal_list = 4;
inline bool Result::_internal_has_signal_list() const {
  return this != internal_default_instance() && signal_list_ != nullptr;
}
inline bool Result::has_signal_list() const {
  return _internal_has_signal_list();
}
inline const ::zb::dcts::node::detection::SignalList& Result::_internal_signal_list() const {
  const ::zb::dcts::node::detection::SignalList* p = signal_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::detection::SignalList&>(
      ::zb::dcts::node::detection::_SignalList_default_instance_);
}
inline const ::zb::dcts::node::detection::SignalList& Result::signal_list() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.Result.signal_list)
  return _internal_signal_list();
}
inline void Result::unsafe_arena_set_allocated_signal_list(
    ::zb::dcts::node::detection::SignalList* signal_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_list_);
  }
  signal_list_ = signal_list;
  if (signal_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.Result.signal_list)
}
inline ::zb::dcts::node::detection::SignalList* Result::release_signal_list() {
  
  ::zb::dcts::node::detection::SignalList* temp = signal_list_;
  signal_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::detection::SignalList* Result::unsafe_arena_release_signal_list() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.Result.signal_list)
  
  ::zb::dcts::node::detection::SignalList* temp = signal_list_;
  signal_list_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::detection::SignalList* Result::_internal_mutable_signal_list() {
  
  if (signal_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::detection::SignalList>(GetArena());
    signal_list_ = p;
  }
  return signal_list_;
}
inline ::zb::dcts::node::detection::SignalList* Result::mutable_signal_list() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.Result.signal_list)
  return _internal_mutable_signal_list();
}
inline void Result::set_allocated_signal_list(::zb::dcts::node::detection::SignalList* signal_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_list_);
  }
  if (signal_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_list)->GetArena();
    if (message_arena != submessage_arena) {
      signal_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_list, submessage_arena);
    }
    
  } else {
    
  }
  signal_list_ = signal_list;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.Result.signal_list)
}

// -------------------------------------------------------------------

// RecordRequest

// .zb.dcts.node.TaskAccount task_account = 1;
inline bool RecordRequest::_internal_has_task_account() const {
  return this != internal_default_instance() && task_account_ != nullptr;
}
inline bool RecordRequest::has_task_account() const {
  return _internal_has_task_account();
}
inline const ::zb::dcts::node::TaskAccount& RecordRequest::_internal_task_account() const {
  const ::zb::dcts::node::TaskAccount* p = task_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::TaskAccount&>(
      ::zb::dcts::node::_TaskAccount_default_instance_);
}
inline const ::zb::dcts::node::TaskAccount& RecordRequest::task_account() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.RecordRequest.task_account)
  return _internal_task_account();
}
inline void RecordRequest::unsafe_arena_set_allocated_task_account(
    ::zb::dcts::node::TaskAccount* task_account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  task_account_ = task_account;
  if (task_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.RecordRequest.task_account)
}
inline ::zb::dcts::node::TaskAccount* RecordRequest::release_task_account() {
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::TaskAccount* RecordRequest::unsafe_arena_release_task_account() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.RecordRequest.task_account)
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::TaskAccount* RecordRequest::_internal_mutable_task_account() {
  
  if (task_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::TaskAccount>(GetArena());
    task_account_ = p;
  }
  return task_account_;
}
inline ::zb::dcts::node::TaskAccount* RecordRequest::mutable_task_account() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.RecordRequest.task_account)
  return _internal_mutable_task_account();
}
inline void RecordRequest::set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  if (task_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account)->GetArena();
    if (message_arena != submessage_arena) {
      task_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_account, submessage_arena);
    }
    
  } else {
    
  }
  task_account_ = task_account;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.RecordRequest.task_account)
}

// int32 times_of_monitor_interval = 2;
inline void RecordRequest::clear_times_of_monitor_interval() {
  times_of_monitor_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordRequest::_internal_times_of_monitor_interval() const {
  return times_of_monitor_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordRequest::times_of_monitor_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.RecordRequest.times_of_monitor_interval)
  return _internal_times_of_monitor_interval();
}
inline void RecordRequest::_internal_set_times_of_monitor_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_of_monitor_interval_ = value;
}
inline void RecordRequest::set_times_of_monitor_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times_of_monitor_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.RecordRequest.times_of_monitor_interval)
}

// -------------------------------------------------------------------

// RecordDescriptor

// string record_id = 1;
inline void RecordDescriptor::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& RecordDescriptor::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id)
  return _internal_record_id();
}
inline void RecordDescriptor::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& RecordDescriptor::_internal_record_id() const {
  return record_id_.Get();
}
inline void RecordDescriptor::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecordDescriptor::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecordDescriptor::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDescriptor::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id)
}

// .zb.dcts.TimeSpan time_span = 2;
inline bool RecordDescriptor::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool RecordDescriptor::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.RecordDescriptor.time_span)
  return _internal_time_span();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.RecordDescriptor.time_span)
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.RecordDescriptor.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.RecordDescriptor.time_span)
  return _internal_mutable_time_span();
}
inline void RecordDescriptor::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.RecordDescriptor.time_span)
}

// .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 3;
inline bool RecordDescriptor::_internal_has_task_param() const {
  return this != internal_default_instance() && task_param_ != nullptr;
}
inline bool RecordDescriptor::has_task_param() const {
  return _internal_has_task_param();
}
inline void RecordDescriptor::clear_task_param() {
  if (GetArena() == nullptr && task_param_ != nullptr) {
    delete task_param_;
  }
  task_param_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhdirection::TaskParam& RecordDescriptor::_internal_task_param() const {
  const ::zb::dcts::node::zczh::zhdirection::TaskParam* p = task_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhdirection::TaskParam&>(
      ::zb::dcts::node::zczh::zhdirection::_TaskParam_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhdirection::TaskParam& RecordDescriptor::task_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.RecordDescriptor.task_param)
  return _internal_task_param();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_task_param(
    ::zb::dcts::node::zczh::zhdirection::TaskParam* task_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_param_);
  }
  task_param_ = task_param;
  if (task_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.RecordDescriptor.task_param)
}
inline ::zb::dcts::node::zczh::zhdirection::TaskParam* RecordDescriptor::release_task_param() {
  
  ::zb::dcts::node::zczh::zhdirection::TaskParam* temp = task_param_;
  task_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhdirection::TaskParam* RecordDescriptor::unsafe_arena_release_task_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.RecordDescriptor.task_param)
  
  ::zb::dcts::node::zczh::zhdirection::TaskParam* temp = task_param_;
  task_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhdirection::TaskParam* RecordDescriptor::_internal_mutable_task_param() {
  
  if (task_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhdirection::TaskParam>(GetArena());
    task_param_ = p;
  }
  return task_param_;
}
inline ::zb::dcts::node::zczh::zhdirection::TaskParam* RecordDescriptor::mutable_task_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.RecordDescriptor.task_param)
  return _internal_mutable_task_param();
}
inline void RecordDescriptor::set_allocated_task_param(::zb::dcts::node::zczh::zhdirection::TaskParam* task_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_param_;
  }
  if (task_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task_param);
    if (message_arena != submessage_arena) {
      task_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_param, submessage_arena);
    }
    
  } else {
    
  }
  task_param_ = task_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.RecordDescriptor.task_param)
}

// -------------------------------------------------------------------

// RecordReply

// repeated .zb.dcts.node.zczh.zhdirection.RecordDescriptor records = 1;
inline int RecordReply::_internal_records_size() const {
  return records_.size();
}
inline int RecordReply::records_size() const {
  return _internal_records_size();
}
inline void RecordReply::clear_records() {
  records_.Clear();
}
inline ::zb::dcts::node::zczh::zhdirection::RecordDescriptor* RecordReply::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.RecordReply.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhdirection::RecordDescriptor >*
RecordReply::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhdirection.RecordReply.records)
  return &records_;
}
inline const ::zb::dcts::node::zczh::zhdirection::RecordDescriptor& RecordReply::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::zb::dcts::node::zczh::zhdirection::RecordDescriptor& RecordReply::records(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.RecordReply.records)
  return _internal_records(index);
}
inline ::zb::dcts::node::zczh::zhdirection::RecordDescriptor* RecordReply::_internal_add_records() {
  return records_.Add();
}
inline ::zb::dcts::node::zczh::zhdirection::RecordDescriptor* RecordReply::add_records() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhdirection.RecordReply.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhdirection::RecordDescriptor >&
RecordReply::records() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhdirection.RecordReply.records)
  return records_;
}

// -------------------------------------------------------------------

// ReplayStartRequest

// string record_id = 1;
inline void ReplayStartRequest::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& ReplayStartRequest::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id)
  return _internal_record_id();
}
inline void ReplayStartRequest::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id)
}
inline std::string* ReplayStartRequest::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& ReplayStartRequest::_internal_record_id() const {
  return record_id_.Get();
}
inline void ReplayStartRequest::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayStartRequest::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id)
}
inline void ReplayStartRequest::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id)
}
inline void ReplayStartRequest::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id)
}
inline std::string* ReplayStartRequest::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayStartRequest::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayStartRequest::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id)
}

// int32 result_interval = 2;
inline void ReplayStartRequest::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.result_interval)
  return _internal_result_interval();
}
inline void ReplayStartRequest::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void ReplayStartRequest::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.ReplayStartRequest.result_interval)
}

// -------------------------------------------------------------------

// PosRequest

// .zb.dcts.Timestamp acquire_time = 1;
inline bool PosRequest::_internal_has_acquire_time() const {
  return this != internal_default_instance() && acquire_time_ != nullptr;
}
inline bool PosRequest::has_acquire_time() const {
  return _internal_has_acquire_time();
}
inline const ::zb::dcts::Timestamp& PosRequest::_internal_acquire_time() const {
  const ::zb::dcts::Timestamp* p = acquire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Timestamp&>(
      ::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& PosRequest::acquire_time() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.PosRequest.acquire_time)
  return _internal_acquire_time();
}
inline void PosRequest::unsafe_arena_set_allocated_acquire_time(
    ::zb::dcts::Timestamp* acquire_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquire_time_);
  }
  acquire_time_ = acquire_time;
  if (acquire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.PosRequest.acquire_time)
}
inline ::zb::dcts::Timestamp* PosRequest::release_acquire_time() {
  
  ::zb::dcts::Timestamp* temp = acquire_time_;
  acquire_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* PosRequest::unsafe_arena_release_acquire_time() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.PosRequest.acquire_time)
  
  ::zb::dcts::Timestamp* temp = acquire_time_;
  acquire_time_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* PosRequest::_internal_mutable_acquire_time() {
  
  if (acquire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    acquire_time_ = p;
  }
  return acquire_time_;
}
inline ::zb::dcts::Timestamp* PosRequest::mutable_acquire_time() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.PosRequest.acquire_time)
  return _internal_mutable_acquire_time();
}
inline void PosRequest::set_allocated_acquire_time(::zb::dcts::Timestamp* acquire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquire_time_);
  }
  if (acquire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquire_time)->GetArena();
    if (message_arena != submessage_arena) {
      acquire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acquire_time, submessage_arena);
    }
    
  } else {
    
  }
  acquire_time_ = acquire_time;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.PosRequest.acquire_time)
}

// -------------------------------------------------------------------

// PosTaskId

// .zb.dcts.TaskId id = 1;
inline bool PosTaskId::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool PosTaskId::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::TaskId& PosTaskId::_internal_id() const {
  const ::zb::dcts::TaskId* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TaskId&>(
      ::zb::dcts::_TaskId_default_instance_);
}
inline const ::zb::dcts::TaskId& PosTaskId::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.PosTaskId.id)
  return _internal_id();
}
inline void PosTaskId::unsafe_arena_set_allocated_id(
    ::zb::dcts::TaskId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.PosTaskId.id)
}
inline ::zb::dcts::TaskId* PosTaskId::release_id() {
  
  ::zb::dcts::TaskId* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TaskId* PosTaskId::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.PosTaskId.id)
  
  ::zb::dcts::TaskId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::TaskId* PosTaskId::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TaskId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::TaskId* PosTaskId::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.PosTaskId.id)
  return _internal_mutable_id();
}
inline void PosTaskId::set_allocated_id(::zb::dcts::TaskId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.PosTaskId.id)
}

// -------------------------------------------------------------------

// PosResult

// .zb.dcts.Position target_position = 1;
inline bool PosResult::_internal_has_target_position() const {
  return this != internal_default_instance() && target_position_ != nullptr;
}
inline bool PosResult::has_target_position() const {
  return _internal_has_target_position();
}
inline const ::zb::dcts::Position& PosResult::_internal_target_position() const {
  const ::zb::dcts::Position* p = target_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Position&>(
      ::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& PosResult::target_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.PosResult.target_position)
  return _internal_target_position();
}
inline void PosResult::unsafe_arena_set_allocated_target_position(
    ::zb::dcts::Position* target_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_position_);
  }
  target_position_ = target_position;
  if (target_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.PosResult.target_position)
}
inline ::zb::dcts::Position* PosResult::release_target_position() {
  
  ::zb::dcts::Position* temp = target_position_;
  target_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* PosResult::unsafe_arena_release_target_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.PosResult.target_position)
  
  ::zb::dcts::Position* temp = target_position_;
  target_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* PosResult::_internal_mutable_target_position() {
  
  if (target_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    target_position_ = p;
  }
  return target_position_;
}
inline ::zb::dcts::Position* PosResult::mutable_target_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.PosResult.target_position)
  return _internal_mutable_target_position();
}
inline void PosResult::set_allocated_target_position(::zb::dcts::Position* target_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_position_);
  }
  if (target_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_position)->GetArena();
    if (message_arena != submessage_arena) {
      target_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_position, submessage_arena);
    }
    
  } else {
    
  }
  target_position_ = target_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.PosResult.target_position)
}

// -------------------------------------------------------------------

// OperationStatus

// .zb.dcts.node.NodeDevice running_device = 1;
inline bool OperationStatus::_internal_has_running_device() const {
  return this != internal_default_instance() && running_device_ != nullptr;
}
inline bool OperationStatus::has_running_device() const {
  return _internal_has_running_device();
}
inline const ::zb::dcts::node::NodeDevice& OperationStatus::_internal_running_device() const {
  const ::zb::dcts::node::NodeDevice* p = running_device_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& OperationStatus::running_device() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.OperationStatus.running_device)
  return _internal_running_device();
}
inline void OperationStatus::unsafe_arena_set_allocated_running_device(
    ::zb::dcts::node::NodeDevice* running_device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_device_);
  }
  running_device_ = running_device;
  if (running_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.OperationStatus.running_device)
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::release_running_device() {
  
  ::zb::dcts::node::NodeDevice* temp = running_device_;
  running_device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::unsafe_arena_release_running_device() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.OperationStatus.running_device)
  
  ::zb::dcts::node::NodeDevice* temp = running_device_;
  running_device_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::_internal_mutable_running_device() {
  
  if (running_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    running_device_ = p;
  }
  return running_device_;
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::mutable_running_device() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.OperationStatus.running_device)
  return _internal_mutable_running_device();
}
inline void OperationStatus::set_allocated_running_device(::zb::dcts::node::NodeDevice* running_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_device_);
  }
  if (running_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_device)->GetArena();
    if (message_arena != submessage_arena) {
      running_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, running_device, submessage_arena);
    }
    
  } else {
    
  }
  running_device_ = running_device;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.OperationStatus.running_device)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool OperationStatus::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool OperationStatus::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& OperationStatus::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& OperationStatus::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.OperationStatus.time_span)
  return _internal_time_span();
}
inline void OperationStatus::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhdirection.OperationStatus.time_span)
}
inline ::zb::dcts::TimeSpan* OperationStatus::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* OperationStatus::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhdirection.OperationStatus.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* OperationStatus::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* OperationStatus::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.OperationStatus.time_span)
  return _internal_mutable_time_span();
}
inline void OperationStatus::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhdirection.OperationStatus.time_span)
}

// uint32 total_sweep_count = 5;
inline void OperationStatus::clear_total_sweep_count() {
  total_sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::_internal_total_sweep_count() const {
  return total_sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::total_sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.OperationStatus.total_sweep_count)
  return _internal_total_sweep_count();
}
inline void OperationStatus::_internal_set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_sweep_count_ = value;
}
inline void OperationStatus::set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.OperationStatus.total_sweep_count)
}

// uint32 record_count = 6;
inline void OperationStatus::clear_record_count() {
  record_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::_internal_record_count() const {
  return record_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::record_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.OperationStatus.record_count)
  return _internal_record_count();
}
inline void OperationStatus::_internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  record_count_ = value;
}
inline void OperationStatus::set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhdirection.OperationStatus.record_count)
}

// repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
inline int OperationStatus::_internal_threshold_lines_size() const {
  return threshold_lines_.size();
}
inline int OperationStatus::threshold_lines_size() const {
  return _internal_threshold_lines_size();
}
inline ::zb::dcts::node::detection::ThresholdRefLine* OperationStatus::mutable_threshold_lines(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhdirection.OperationStatus.threshold_lines)
  return threshold_lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >*
OperationStatus::mutable_threshold_lines() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhdirection.OperationStatus.threshold_lines)
  return &threshold_lines_;
}
inline const ::zb::dcts::node::detection::ThresholdRefLine& OperationStatus::_internal_threshold_lines(int index) const {
  return threshold_lines_.Get(index);
}
inline const ::zb::dcts::node::detection::ThresholdRefLine& OperationStatus::threshold_lines(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhdirection.OperationStatus.threshold_lines)
  return _internal_threshold_lines(index);
}
inline ::zb::dcts::node::detection::ThresholdRefLine* OperationStatus::_internal_add_threshold_lines() {
  return threshold_lines_.Add();
}
inline ::zb::dcts::node::detection::ThresholdRefLine* OperationStatus::add_threshold_lines() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhdirection.OperationStatus.threshold_lines)
  return _internal_add_threshold_lines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >&
OperationStatus::threshold_lines() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhdirection.OperationStatus.threshold_lines)
  return threshold_lines_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zhdirection
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::node::zczh::zhdirection::IFBandWidth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::zczh::zhdirection::IFBandWidth>() {
  return ::zb::dcts::node::zczh::zhdirection::IFBandWidth_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::node::zczh::zhdirection::DFBandWidth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::zczh::zhdirection::DFBandWidth>() {
  return ::zb::dcts::node::zczh::zhdirection::DFBandWidth_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhDirection_2eproto
