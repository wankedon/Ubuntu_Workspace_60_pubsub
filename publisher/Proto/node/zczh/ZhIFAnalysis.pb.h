// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/zczh/ZhIFAnalysis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhIFAnalysis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhIFAnalysis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/node.pb.h"
#include "node/modulation.pb.h"
#include "node/spectrum.pb.h"
#include "node/detection.pb.h"
#include "node/replay.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fzczh_2fZhIFAnalysis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIFAnalysis {
class AudioBlock;
struct AudioBlockDefaultTypeInternal;
extern AudioBlockDefaultTypeInternal _AudioBlock_default_instance_;
class AudioResult;
struct AudioResultDefaultTypeInternal;
extern AudioResultDefaultTypeInternal _AudioResult_default_instance_;
class ChangeRequest;
struct ChangeRequestDefaultTypeInternal;
extern ChangeRequestDefaultTypeInternal _ChangeRequest_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class OperationStatus;
struct OperationStatusDefaultTypeInternal;
extern OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
class QueryRecordReply;
struct QueryRecordReplyDefaultTypeInternal;
extern QueryRecordReplyDefaultTypeInternal _QueryRecordReply_default_instance_;
class QueryRecordRequest;
struct QueryRecordRequestDefaultTypeInternal;
extern QueryRecordRequestDefaultTypeInternal _QueryRecordRequest_default_instance_;
class RecogniseParam;
struct RecogniseParamDefaultTypeInternal;
extern RecogniseParamDefaultTypeInternal _RecogniseParam_default_instance_;
class RecogniseRequest;
struct RecogniseRequestDefaultTypeInternal;
extern RecogniseRequestDefaultTypeInternal _RecogniseRequest_default_instance_;
class RecordDescriptor;
struct RecordDescriptorDefaultTypeInternal;
extern RecordDescriptorDefaultTypeInternal _RecordDescriptor_default_instance_;
class ReplayStartRequest;
struct ReplayStartRequestDefaultTypeInternal;
extern ReplayStartRequestDefaultTypeInternal _ReplayStartRequest_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class TaskParam;
struct TaskParamDefaultTypeInternal;
extern TaskParamDefaultTypeInternal _TaskParam_default_instance_;
class TransmissionResult;
struct TransmissionResultDefaultTypeInternal;
extern TransmissionResultDefaultTypeInternal _TransmissionResult_default_instance_;
}  // namespace zhIFAnalysis
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::AudioResult>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::Header* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::Header>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::Result* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::Result>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::TaskParam>(Arena*);
template<> ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIFAnalysis {

enum IFBandWidth : int {
  BAND_1K = 0,
  BAND_2K = 1,
  BAND_5K = 2,
  BAND_10K = 3,
  BAND_20K = 4,
  BAND_50K = 5,
  BAND_100K = 6,
  BAND_200K = 7,
  BAND_500K = 8,
  BAND_1M = 9,
  BAND_2M = 10,
  BAND_5M = 11,
  BAND_10M = 12,
  BAND_20M = 13,
  BAND_40M = 14,
  BAND_80M = 15,
  IFBandWidth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IFBandWidth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IFBandWidth_IsValid(int value);
constexpr IFBandWidth IFBandWidth_MIN = BAND_1K;
constexpr IFBandWidth IFBandWidth_MAX = BAND_80M;
constexpr int IFBandWidth_ARRAYSIZE = IFBandWidth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IFBandWidth_descriptor();
template<typename T>
inline const std::string& IFBandWidth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IFBandWidth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IFBandWidth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IFBandWidth_descriptor(), enum_t_value);
}
inline bool IFBandWidth_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IFBandWidth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IFBandWidth>(
    IFBandWidth_descriptor(), name, value);
}
enum DemodType : int {
  Demodulation_none = 0,
  Demodulation_AM = 1,
  Demodulation_FM = 2,
  Demodulation_CW = 3,
  Demodulation_LSB = 4,
  Demodulation_USB = 5,
  DemodType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DemodType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DemodType_IsValid(int value);
constexpr DemodType DemodType_MIN = Demodulation_none;
constexpr DemodType DemodType_MAX = Demodulation_USB;
constexpr int DemodType_ARRAYSIZE = DemodType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DemodType_descriptor();
template<typename T>
inline const std::string& DemodType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DemodType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DemodType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DemodType_descriptor(), enum_t_value);
}
inline bool DemodType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DemodType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DemodType>(
    DemodType_descriptor(), name, value);
}
enum RecogniseType : int {
  MODULATION = 0,
  TRANSMISSION = 1,
  HOPPFREQUENCY = 2,
  DEMOD = 3,
  IQ_ACQUIRE = 4,
  RecogniseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RecogniseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RecogniseType_IsValid(int value);
constexpr RecogniseType RecogniseType_MIN = MODULATION;
constexpr RecogniseType RecogniseType_MAX = IQ_ACQUIRE;
constexpr int RecogniseType_ARRAYSIZE = RecogniseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecogniseType_descriptor();
template<typename T>
inline const std::string& RecogniseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecogniseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecogniseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecogniseType_descriptor(), enum_t_value);
}
inline bool RecogniseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecogniseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecogniseType>(
    RecogniseType_descriptor(), name, value);
}
enum TransmissionType : int {
  UNKNOWN_TSR = 0,
  GSM = 1,
  CDMA2000 = 2,
  WCDMA = 3,
  TD_SCDMA = 4,
  FourG_TDD = 5,
  FourG_FDD = 6,
  FiveG = 7,
  DoingRec = 8,
  TransmissionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransmissionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransmissionType_IsValid(int value);
constexpr TransmissionType TransmissionType_MIN = UNKNOWN_TSR;
constexpr TransmissionType TransmissionType_MAX = DoingRec;
constexpr int TransmissionType_ARRAYSIZE = TransmissionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransmissionType_descriptor();
template<typename T>
inline const std::string& TransmissionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransmissionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransmissionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransmissionType_descriptor(), enum_t_value);
}
inline bool TransmissionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransmissionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransmissionType>(
    TransmissionType_descriptor(), name, value);
}
// ===================================================================

class TaskParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.TaskParam) */ {
 public:
  inline TaskParam() : TaskParam(nullptr) {}
  virtual ~TaskParam();
  explicit constexpr TaskParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParam(const TaskParam& from);
  TaskParam(TaskParam&& from) noexcept
    : TaskParam() {
    *this = ::std::move(from);
  }

  inline TaskParam& operator=(const TaskParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParam& operator=(TaskParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParam* internal_default_instance() {
    return reinterpret_cast<const TaskParam*>(
               &_TaskParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskParam& a, TaskParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskParam* New() const final {
    return CreateMaybeMessage<TaskParam>(nullptr);
  }

  TaskParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskParam& from);
  void MergeFrom(const TaskParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.TaskParam";
  }
  protected:
  explicit TaskParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpanFieldNumber = 1,
    kIFBandwidthFieldNumber = 2,
    kResultIntervalFieldNumber = 3,
    kStatusIntervalFieldNumber = 4,
    kExpectedPointsFieldNumber = 5,
    kAverageCountFieldNumber = 6,
    kAttenuationGainFieldNumber = 7,
    kAntennaFieldNumber = 8,
    kReceiveModeFieldNumber = 9,
    kModeFieldNumber = 10,
    kValueFieldNumber = 11,
    kTypeFieldNumber = 12,
    kDemodTypeFieldNumber = 13,
    kRefLevelFieldNumber = 14,
    kIqSweepCountFieldNumber = 15,
  };
  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  bool has_span() const;
  private:
  bool _internal_has_span() const;
  public:
  void clear_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_span();
  void set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_span();
  public:
  void unsafe_arena_set_allocated_span(
      ::zb::dcts::node::spectrum::FrequencySpan* span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_span();

  // .zb.dcts.node.zczh.zhIFAnalysis.IFBandWidth IF_bandwidth = 2;
  void clear_if_bandwidth();
  ::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth if_bandwidth() const;
  void set_if_bandwidth(::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth value);
  private:
  ::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth _internal_if_bandwidth() const;
  void _internal_set_if_bandwidth(::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth value);
  public:

  // int32 result_interval = 3;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status_interval = 4;
  void clear_status_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 status_interval() const;
  void set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_interval() const;
  void _internal_set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expected_points = 5;
  void clear_expected_points();
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points() const;
  void set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expected_points() const;
  void _internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 average_count = 6;
  void clear_average_count();
  ::PROTOBUF_NAMESPACE_ID::int32 average_count() const;
  void set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average_count() const;
  void _internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attenuation_gain = 7;
  void clear_attenuation_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain() const;
  void set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 8;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_mode = 9;
  void clear_receive_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode() const;
  void set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_mode() const;
  void _internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mode = 10;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 11;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 12;
  void clear_type();
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType type() const;
  void set_type(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType value);
  private:
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType _internal_type() const;
  void _internal_set_type(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType value);
  public:

  // .zb.dcts.node.zczh.zhIFAnalysis.DemodType demod_type = 13;
  void clear_demod_type();
  ::zb::dcts::node::zczh::zhIFAnalysis::DemodType demod_type() const;
  void set_demod_type(::zb::dcts::node::zczh::zhIFAnalysis::DemodType value);
  private:
  ::zb::dcts::node::zczh::zhIFAnalysis::DemodType _internal_demod_type() const;
  void _internal_set_demod_type(::zb::dcts::node::zczh::zhIFAnalysis::DemodType value);
  public:

  // double ref_level = 14;
  void clear_ref_level();
  double ref_level() const;
  void set_ref_level(double value);
  private:
  double _internal_ref_level() const;
  void _internal_set_ref_level(double value);
  public:

  // int32 iq_sweep_count = 15;
  void clear_iq_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::int32 iq_sweep_count() const;
  void set_iq_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iq_sweep_count() const;
  void _internal_set_iq_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::spectrum::FrequencySpan* span_;
  int if_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  int type_;
  int demod_type_;
  double ref_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 iq_sweep_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 2,
    kResultFromFieldNumber = 1,
    kTimeSpanFieldNumber = 5,
    kDevicePositionFieldNumber = 6,
    kSequenceNumberFieldNumber = 3,
    kSweepCountFieldNumber = 4,
  };
  // string record_id = 2;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.node.NodeDevice result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::node::NodeDevice& result_from() const;
  ::zb::dcts::node::NodeDevice* release_result_from();
  ::zb::dcts::node::NodeDevice* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::node::NodeDevice* result_from);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_result_from() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::node::NodeDevice* result_from);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_result_from();

  // .zb.dcts.TimeSpan time_span = 5;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.Position device_position = 6;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // uint32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sweep_count = 4;
  void clear_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count() const;
  void set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweep_count() const;
  void _internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::node::NodeDevice* result_from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::Position* device_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class TransmissionResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult) */ {
 public:
  inline TransmissionResult() : TransmissionResult(nullptr) {}
  virtual ~TransmissionResult();
  explicit constexpr TransmissionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransmissionResult(const TransmissionResult& from);
  TransmissionResult(TransmissionResult&& from) noexcept
    : TransmissionResult() {
    *this = ::std::move(from);
  }

  inline TransmissionResult& operator=(const TransmissionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransmissionResult& operator=(TransmissionResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransmissionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransmissionResult* internal_default_instance() {
    return reinterpret_cast<const TransmissionResult*>(
               &_TransmissionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransmissionResult& a, TransmissionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TransmissionResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransmissionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransmissionResult* New() const final {
    return CreateMaybeMessage<TransmissionResult>(nullptr);
  }

  TransmissionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransmissionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransmissionResult& from);
  void MergeFrom(const TransmissionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransmissionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult";
  }
  protected:
  explicit TransmissionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransTypeFieldNumber = 1,
  };
  // .zb.dcts.node.zczh.zhIFAnalysis.TransmissionType trans_type = 1;
  void clear_trans_type();
  ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType trans_type() const;
  void set_trans_type(::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType value);
  private:
  ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType _internal_trans_type() const;
  void _internal_set_trans_type(::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int trans_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class AudioBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock) */ {
 public:
  inline AudioBlock() : AudioBlock(nullptr) {}
  virtual ~AudioBlock();
  explicit constexpr AudioBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioBlock(const AudioBlock& from);
  AudioBlock(AudioBlock&& from) noexcept
    : AudioBlock() {
    *this = ::std::move(from);
  }

  inline AudioBlock& operator=(const AudioBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioBlock& operator=(AudioBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioBlock* internal_default_instance() {
    return reinterpret_cast<const AudioBlock*>(
               &_AudioBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AudioBlock& a, AudioBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioBlock* New() const final {
    return CreateMaybeMessage<AudioBlock>(nullptr);
  }

  AudioBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioBlock& from);
  void MergeFrom(const AudioBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.AudioBlock";
  }
  protected:
  explicit AudioBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcmBitstreamFieldNumber = 1,
  };
  // repeated int32 pcm_bitstream = 1;
  int pcm_bitstream_size() const;
  private:
  int _internal_pcm_bitstream_size() const;
  public:
  void clear_pcm_bitstream();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pcm_bitstream(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pcm_bitstream() const;
  void _internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pcm_bitstream();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pcm_bitstream(int index) const;
  void set_pcm_bitstream(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pcm_bitstream() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pcm_bitstream();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pcm_bitstream_;
  mutable std::atomic<int> _pcm_bitstream_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class AudioResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.AudioResult) */ {
 public:
  inline AudioResult() : AudioResult(nullptr) {}
  virtual ~AudioResult();
  explicit constexpr AudioResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioResult(const AudioResult& from);
  AudioResult(AudioResult&& from) noexcept
    : AudioResult() {
    *this = ::std::move(from);
  }

  inline AudioResult& operator=(const AudioResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioResult& operator=(AudioResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioResult* internal_default_instance() {
    return reinterpret_cast<const AudioResult*>(
               &_AudioResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AudioResult& a, AudioResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioResult* New() const final {
    return CreateMaybeMessage<AudioResult>(nullptr);
  }

  AudioResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioResult& from);
  void MergeFrom(const AudioResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.AudioResult";
  }
  protected:
  explicit AudioResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .zb.dcts.node.zczh.zhIFAnalysis.AudioBlock blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock >*
      mutable_blocks();
  private:
  const ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock& _internal_blocks(int index) const;
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock* _internal_add_blocks();
  public:
  const ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock& blocks(int index) const;
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock > blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSpectrumFieldNumber = 2,
    kRecognizeResultFieldNumber = 3,
    kTransResultFieldNumber = 4,
    kAudioResultFieldNumber = 5,
    kSignalListFieldNumber = 6,
  };
  // .zb.dcts.node.zczh.zhIFAnalysis.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::node::zczh::zhIFAnalysis::Header& header() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::Header* release_header();
  ::zb::dcts::node::zczh::zhIFAnalysis::Header* mutable_header();
  void set_allocated_header(::zb::dcts::node::zczh::zhIFAnalysis::Header* header);
  private:
  const ::zb::dcts::node::zczh::zhIFAnalysis::Header& _internal_header() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::node::zczh::zhIFAnalysis::Header* header);
  ::zb::dcts::node::zczh::zhIFAnalysis::Header* unsafe_arena_release_header();

  // .zb.dcts.node.spectrum.View spectrum = 2;
  bool has_spectrum() const;
  private:
  bool _internal_has_spectrum() const;
  public:
  void clear_spectrum();
  const ::zb::dcts::node::spectrum::View& spectrum() const;
  ::zb::dcts::node::spectrum::View* release_spectrum();
  ::zb::dcts::node::spectrum::View* mutable_spectrum();
  void set_allocated_spectrum(::zb::dcts::node::spectrum::View* spectrum);
  private:
  const ::zb::dcts::node::spectrum::View& _internal_spectrum() const;
  ::zb::dcts::node::spectrum::View* _internal_mutable_spectrum();
  public:
  void unsafe_arena_set_allocated_spectrum(
      ::zb::dcts::node::spectrum::View* spectrum);
  ::zb::dcts::node::spectrum::View* unsafe_arena_release_spectrum();

  // .zb.dcts.node.modulation.RecognizeResult recognize_result = 3;
  bool has_recognize_result() const;
  private:
  bool _internal_has_recognize_result() const;
  public:
  void clear_recognize_result();
  const ::zb::dcts::node::modulation::RecognizeResult& recognize_result() const;
  ::zb::dcts::node::modulation::RecognizeResult* release_recognize_result();
  ::zb::dcts::node::modulation::RecognizeResult* mutable_recognize_result();
  void set_allocated_recognize_result(::zb::dcts::node::modulation::RecognizeResult* recognize_result);
  private:
  const ::zb::dcts::node::modulation::RecognizeResult& _internal_recognize_result() const;
  ::zb::dcts::node::modulation::RecognizeResult* _internal_mutable_recognize_result();
  public:
  void unsafe_arena_set_allocated_recognize_result(
      ::zb::dcts::node::modulation::RecognizeResult* recognize_result);
  ::zb::dcts::node::modulation::RecognizeResult* unsafe_arena_release_recognize_result();

  // .zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult trans_result = 4;
  bool has_trans_result() const;
  private:
  bool _internal_has_trans_result() const;
  public:
  void clear_trans_result();
  const ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult& trans_result() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* release_trans_result();
  ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* mutable_trans_result();
  void set_allocated_trans_result(::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* trans_result);
  private:
  const ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult& _internal_trans_result() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* _internal_mutable_trans_result();
  public:
  void unsafe_arena_set_allocated_trans_result(
      ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* trans_result);
  ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* unsafe_arena_release_trans_result();

  // .zb.dcts.node.zczh.zhIFAnalysis.AudioResult audio_Result = 5;
  bool has_audio_result() const;
  private:
  bool _internal_has_audio_result() const;
  public:
  void clear_audio_result();
  const ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult& audio_result() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* release_audio_result();
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* mutable_audio_result();
  void set_allocated_audio_result(::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* audio_result);
  private:
  const ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult& _internal_audio_result() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* _internal_mutable_audio_result();
  public:
  void unsafe_arena_set_allocated_audio_result(
      ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* audio_result);
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* unsafe_arena_release_audio_result();

  // .zb.dcts.node.detection.SignalList signal_list = 6;
  bool has_signal_list() const;
  private:
  bool _internal_has_signal_list() const;
  public:
  void clear_signal_list();
  const ::zb::dcts::node::detection::SignalList& signal_list() const;
  ::zb::dcts::node::detection::SignalList* release_signal_list();
  ::zb::dcts::node::detection::SignalList* mutable_signal_list();
  void set_allocated_signal_list(::zb::dcts::node::detection::SignalList* signal_list);
  private:
  const ::zb::dcts::node::detection::SignalList& _internal_signal_list() const;
  ::zb::dcts::node::detection::SignalList* _internal_mutable_signal_list();
  public:
  void unsafe_arena_set_allocated_signal_list(
      ::zb::dcts::node::detection::SignalList* signal_list);
  ::zb::dcts::node::detection::SignalList* unsafe_arena_release_signal_list();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::zczh::zhIFAnalysis::Header* header_;
  ::zb::dcts::node::spectrum::View* spectrum_;
  ::zb::dcts::node::modulation::RecognizeResult* recognize_result_;
  ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* trans_result_;
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* audio_result_;
  ::zb::dcts::node::detection::SignalList* signal_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class RecordDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor) */ {
 public:
  inline RecordDescriptor() : RecordDescriptor(nullptr) {}
  virtual ~RecordDescriptor();
  explicit constexpr RecordDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordDescriptor(const RecordDescriptor& from);
  RecordDescriptor(RecordDescriptor&& from) noexcept
    : RecordDescriptor() {
    *this = ::std::move(from);
  }

  inline RecordDescriptor& operator=(const RecordDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordDescriptor& operator=(RecordDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordDescriptor* internal_default_instance() {
    return reinterpret_cast<const RecordDescriptor*>(
               &_RecordDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RecordDescriptor& a, RecordDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordDescriptor* New() const final {
    return CreateMaybeMessage<RecordDescriptor>(nullptr);
  }

  RecordDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordDescriptor& from);
  void MergeFrom(const RecordDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor";
  }
  protected:
  explicit RecordDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kTimeSpanFieldNumber = 3,
    kAnalysisBandFieldNumber = 4,
    kRecordCountFieldNumber = 5,
  };
  // string record_id = 1;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.node.NodeDevice from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::zb::dcts::node::NodeDevice& from() const;
  ::zb::dcts::node::NodeDevice* release_from();
  ::zb::dcts::node::NodeDevice* mutable_from();
  void set_allocated_from(::zb::dcts::node::NodeDevice* from);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_from() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::zb::dcts::node::NodeDevice* from);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_from();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.node.spectrum.SignalBand analysis_band = 4;
  bool has_analysis_band() const;
  private:
  bool _internal_has_analysis_band() const;
  public:
  void clear_analysis_band();
  const ::zb::dcts::node::spectrum::SignalBand& analysis_band() const;
  ::zb::dcts::node::spectrum::SignalBand* release_analysis_band();
  ::zb::dcts::node::spectrum::SignalBand* mutable_analysis_band();
  void set_allocated_analysis_band(::zb::dcts::node::spectrum::SignalBand* analysis_band);
  private:
  const ::zb::dcts::node::spectrum::SignalBand& _internal_analysis_band() const;
  ::zb::dcts::node::spectrum::SignalBand* _internal_mutable_analysis_band();
  public:
  void unsafe_arena_set_allocated_analysis_band(
      ::zb::dcts::node::spectrum::SignalBand* analysis_band);
  ::zb::dcts::node::spectrum::SignalBand* unsafe_arena_release_analysis_band();

  // uint32 record_count = 5;
  void clear_record_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count() const;
  void set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_count() const;
  void _internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::node::NodeDevice* from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::node::spectrum::SignalBand* analysis_band_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class QueryRecordReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply) */ {
 public:
  inline QueryRecordReply() : QueryRecordReply(nullptr) {}
  virtual ~QueryRecordReply();
  explicit constexpr QueryRecordReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRecordReply(const QueryRecordReply& from);
  QueryRecordReply(QueryRecordReply&& from) noexcept
    : QueryRecordReply() {
    *this = ::std::move(from);
  }

  inline QueryRecordReply& operator=(const QueryRecordReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRecordReply& operator=(QueryRecordReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRecordReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRecordReply* internal_default_instance() {
    return reinterpret_cast<const QueryRecordReply*>(
               &_QueryRecordReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryRecordReply& a, QueryRecordReply& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRecordReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRecordReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordReply* New() const final {
    return CreateMaybeMessage<QueryRecordReply>(nullptr);
  }

  QueryRecordReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRecordReply& from);
  void MergeFrom(const QueryRecordReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply";
  }
  protected:
  explicit QueryRecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchingRecordsFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // repeated .zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor matching_records = 2;
  int matching_records_size() const;
  private:
  int _internal_matching_records_size() const;
  public:
  void clear_matching_records();
  ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor* mutable_matching_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor >*
      mutable_matching_records();
  private:
  const ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor& _internal_matching_records(int index) const;
  ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor* _internal_add_matching_records();
  public:
  const ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor& matching_records(int index) const;
  ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor* add_matching_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor >&
      matching_records() const;

  // .zb.dcts.node.NodeId node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  const ::zb::dcts::node::NodeId& node_id() const;
  ::zb::dcts::node::NodeId* release_node_id();
  ::zb::dcts::node::NodeId* mutable_node_id();
  void set_allocated_node_id(::zb::dcts::node::NodeId* node_id);
  private:
  const ::zb::dcts::node::NodeId& _internal_node_id() const;
  ::zb::dcts::node::NodeId* _internal_mutable_node_id();
  public:
  void unsafe_arena_set_allocated_node_id(
      ::zb::dcts::node::NodeId* node_id);
  ::zb::dcts::node::NodeId* unsafe_arena_release_node_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor > matching_records_;
  ::zb::dcts::node::NodeId* node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class ReplayStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest) */ {
 public:
  inline ReplayStartRequest() : ReplayStartRequest(nullptr) {}
  virtual ~ReplayStartRequest();
  explicit constexpr ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplayStartRequest(const ReplayStartRequest& from);
  ReplayStartRequest(ReplayStartRequest&& from) noexcept
    : ReplayStartRequest() {
    *this = ::std::move(from);
  }

  inline ReplayStartRequest& operator=(const ReplayStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayStartRequest& operator=(ReplayStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplayStartRequest* internal_default_instance() {
    return reinterpret_cast<const ReplayStartRequest*>(
               &_ReplayStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReplayStartRequest& a, ReplayStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayStartRequest* New() const final {
    return CreateMaybeMessage<ReplayStartRequest>(nullptr);
  }

  ReplayStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayStartRequest& from);
  void MergeFrom(const ReplayStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest";
  }
  protected:
  explicit ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplayIdFieldNumber = 1,
    kResultIntervalFieldNumber = 4,
    kExpectedPointsFieldNumber = 5,
  };
  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::zb::dcts::node::replay::ReplayId& replay_id() const;
  ::zb::dcts::node::replay::ReplayId* release_replay_id();
  ::zb::dcts::node::replay::ReplayId* mutable_replay_id();
  void set_allocated_replay_id(::zb::dcts::node::replay::ReplayId* replay_id);
  private:
  const ::zb::dcts::node::replay::ReplayId& _internal_replay_id() const;
  ::zb::dcts::node::replay::ReplayId* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::zb::dcts::node::replay::ReplayId* replay_id);
  ::zb::dcts::node::replay::ReplayId* unsafe_arena_release_replay_id();

  // int32 result_interval = 4;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expected_points = 5;
  void clear_expected_points();
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points() const;
  void set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expected_points() const;
  void _internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::replay::ReplayId* replay_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class QueryRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest) */ {
 public:
  inline QueryRecordRequest() : QueryRecordRequest(nullptr) {}
  virtual ~QueryRecordRequest();
  explicit constexpr QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRecordRequest(const QueryRecordRequest& from);
  QueryRecordRequest(QueryRecordRequest&& from) noexcept
    : QueryRecordRequest() {
    *this = ::std::move(from);
  }

  inline QueryRecordRequest& operator=(const QueryRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRecordRequest& operator=(QueryRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRecordRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRecordRequest*>(
               &_QueryRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryRecordRequest& a, QueryRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordRequest* New() const final {
    return CreateMaybeMessage<QueryRecordRequest>(nullptr);
  }

  QueryRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRecordRequest& from);
  void MergeFrom(const QueryRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest";
  }
  protected:
  explicit QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskAccountFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kFreqSpanFieldNumber = 5,
  };
  // .zb.dcts.node.TaskAccount task_account = 1;
  bool has_task_account() const;
  private:
  bool _internal_has_task_account() const;
  public:
  void clear_task_account();
  const ::zb::dcts::node::TaskAccount& task_account() const;
  ::zb::dcts::node::TaskAccount* release_task_account();
  ::zb::dcts::node::TaskAccount* mutable_task_account();
  void set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account);
  private:
  const ::zb::dcts::node::TaskAccount& _internal_task_account() const;
  ::zb::dcts::node::TaskAccount* _internal_mutable_task_account();
  public:
  void unsafe_arena_set_allocated_task_account(
      ::zb::dcts::node::TaskAccount* task_account);
  ::zb::dcts::node::TaskAccount* unsafe_arena_release_task_account();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::TaskAccount* task_account_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::node::spectrum::FrequencySpan* freq_span_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class OperationStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus) */ {
 public:
  inline OperationStatus() : OperationStatus(nullptr) {}
  virtual ~OperationStatus();
  explicit constexpr OperationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStatus(const OperationStatus& from);
  OperationStatus(OperationStatus&& from) noexcept
    : OperationStatus() {
    *this = ::std::move(from);
  }

  inline OperationStatus& operator=(const OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStatus& operator=(OperationStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStatus* internal_default_instance() {
    return reinterpret_cast<const OperationStatus*>(
               &_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OperationStatus& a, OperationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationStatus* New() const final {
    return CreateMaybeMessage<OperationStatus>(nullptr);
  }

  OperationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationStatus& from);
  void MergeFrom(const OperationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.OperationStatus";
  }
  protected:
  explicit OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdLinesFieldNumber = 7,
    kRunningDeviceFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kTotalSweepCountFieldNumber = 5,
    kRecordCountFieldNumber = 6,
  };
  // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
  int threshold_lines_size() const;
  private:
  int _internal_threshold_lines_size() const;
  public:
  void clear_threshold_lines();
  ::zb::dcts::node::detection::ThresholdRefLine* mutable_threshold_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >*
      mutable_threshold_lines();
  private:
  const ::zb::dcts::node::detection::ThresholdRefLine& _internal_threshold_lines(int index) const;
  ::zb::dcts::node::detection::ThresholdRefLine* _internal_add_threshold_lines();
  public:
  const ::zb::dcts::node::detection::ThresholdRefLine& threshold_lines(int index) const;
  ::zb::dcts::node::detection::ThresholdRefLine* add_threshold_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >&
      threshold_lines() const;

  // .zb.dcts.node.NodeDevice running_device = 1;
  bool has_running_device() const;
  private:
  bool _internal_has_running_device() const;
  public:
  void clear_running_device();
  const ::zb::dcts::node::NodeDevice& running_device() const;
  ::zb::dcts::node::NodeDevice* release_running_device();
  ::zb::dcts::node::NodeDevice* mutable_running_device();
  void set_allocated_running_device(::zb::dcts::node::NodeDevice* running_device);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_running_device() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_running_device();
  public:
  void unsafe_arena_set_allocated_running_device(
      ::zb::dcts::node::NodeDevice* running_device);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_running_device();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // uint32 total_sweep_count = 5;
  void clear_total_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_sweep_count() const;
  void set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_sweep_count() const;
  void _internal_set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 record_count = 6;
  void clear_record_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count() const;
  void set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_count() const;
  void _internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine > threshold_lines_;
  ::zb::dcts::node::NodeDevice* running_device_;
  ::zb::dcts::TimeSpan* time_span_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_sweep_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class RecogniseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest) */ {
 public:
  inline RecogniseRequest() : RecogniseRequest(nullptr) {}
  virtual ~RecogniseRequest();
  explicit constexpr RecogniseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecogniseRequest(const RecogniseRequest& from);
  RecogniseRequest(RecogniseRequest&& from) noexcept
    : RecogniseRequest() {
    *this = ::std::move(from);
  }

  inline RecogniseRequest& operator=(const RecogniseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecogniseRequest& operator=(RecogniseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecogniseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecogniseRequest* internal_default_instance() {
    return reinterpret_cast<const RecogniseRequest*>(
               &_RecogniseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RecogniseRequest& a, RecogniseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecogniseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecogniseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecogniseRequest* New() const final {
    return CreateMaybeMessage<RecogniseRequest>(nullptr);
  }

  RecogniseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecogniseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecogniseRequest& from);
  void MergeFrom(const RecogniseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecogniseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest";
  }
  protected:
  explicit RecogniseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunnerFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  int task_runner_size() const;
  private:
  int _internal_task_runner_size() const;
  public:
  void clear_task_runner();
  ::zb::dcts::node::NodeDevice* mutable_task_runner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
      mutable_task_runner();
  private:
  const ::zb::dcts::node::NodeDevice& _internal_task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* _internal_add_task_runner();
  public:
  const ::zb::dcts::node::NodeDevice& task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* add_task_runner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
      task_runner() const;

  // .zb.dcts.node.zczh.zhIFAnalysis.TaskParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam& param() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* release_param();
  ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* mutable_param();
  void set_allocated_param(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* param);
  private:
  const ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam& _internal_param() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* param);
  ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice > task_runner_;
  ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class RecogniseParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam) */ {
 public:
  inline RecogniseParam() : RecogniseParam(nullptr) {}
  virtual ~RecogniseParam();
  explicit constexpr RecogniseParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecogniseParam(const RecogniseParam& from);
  RecogniseParam(RecogniseParam&& from) noexcept
    : RecogniseParam() {
    *this = ::std::move(from);
  }

  inline RecogniseParam& operator=(const RecogniseParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecogniseParam& operator=(RecogniseParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecogniseParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecogniseParam* internal_default_instance() {
    return reinterpret_cast<const RecogniseParam*>(
               &_RecogniseParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RecogniseParam& a, RecogniseParam& b) {
    a.Swap(&b);
  }
  inline void Swap(RecogniseParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecogniseParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecogniseParam* New() const final {
    return CreateMaybeMessage<RecogniseParam>(nullptr);
  }

  RecogniseParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecogniseParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecogniseParam& from);
  void MergeFrom(const RecogniseParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecogniseParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam";
  }
  protected:
  explicit RecogniseParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpanFieldNumber = 2,
    kIFBandwidthFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .zb.dcts.node.spectrum.FrequencySpan span = 2;
  bool has_span() const;
  private:
  bool _internal_has_span() const;
  public:
  void clear_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_span();
  void set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_span();
  public:
  void unsafe_arena_set_allocated_span(
      ::zb::dcts::node::spectrum::FrequencySpan* span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_span();

  // double IF_bandwidth = 3;
  void clear_if_bandwidth();
  double if_bandwidth() const;
  void set_if_bandwidth(double value);
  private:
  double _internal_if_bandwidth() const;
  void _internal_set_if_bandwidth(double value);
  public:

  // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 1;
  void clear_type();
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType type() const;
  void set_type(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType value);
  private:
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType _internal_type() const;
  void _internal_set_type(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::spectrum::FrequencySpan* span_;
  double if_bandwidth_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// -------------------------------------------------------------------

class ChangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest) */ {
 public:
  inline ChangeRequest() : ChangeRequest(nullptr) {}
  virtual ~ChangeRequest();
  explicit constexpr ChangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeRequest(const ChangeRequest& from);
  ChangeRequest(ChangeRequest&& from) noexcept
    : ChangeRequest() {
    *this = ::std::move(from);
  }

  inline ChangeRequest& operator=(const ChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeRequest& operator=(ChangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeRequest*>(
               &_ChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ChangeRequest& a, ChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeRequest* New() const final {
    return CreateMaybeMessage<ChangeRequest>(nullptr);
  }

  ChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeRequest& from);
  void MergeFrom(const ChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest";
  }
  protected:
  explicit ChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskAccountFieldNumber = 1,
    kRecogniseParamFieldNumber = 2,
  };
  // .zb.dcts.node.TaskAccount task_account = 1;
  bool has_task_account() const;
  private:
  bool _internal_has_task_account() const;
  public:
  void clear_task_account();
  const ::zb::dcts::node::TaskAccount& task_account() const;
  ::zb::dcts::node::TaskAccount* release_task_account();
  ::zb::dcts::node::TaskAccount* mutable_task_account();
  void set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account);
  private:
  const ::zb::dcts::node::TaskAccount& _internal_task_account() const;
  ::zb::dcts::node::TaskAccount* _internal_mutable_task_account();
  public:
  void unsafe_arena_set_allocated_task_account(
      ::zb::dcts::node::TaskAccount* task_account);
  ::zb::dcts::node::TaskAccount* unsafe_arena_release_task_account();

  // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam recognise_param = 2;
  bool has_recognise_param() const;
  private:
  bool _internal_has_recognise_param() const;
  public:
  void clear_recognise_param();
  const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam& recognise_param() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* release_recognise_param();
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* mutable_recognise_param();
  void set_allocated_recognise_param(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* recognise_param);
  private:
  const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam& _internal_recognise_param() const;
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* _internal_mutable_recognise_param();
  public:
  void unsafe_arena_set_allocated_recognise_param(
      ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* recognise_param);
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* unsafe_arena_release_recognise_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::TaskAccount* task_account_;
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* recognise_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskParam

// .zb.dcts.node.spectrum.FrequencySpan span = 1;
inline bool TaskParam::_internal_has_span() const {
  return this != internal_default_instance() && span_ != nullptr;
}
inline bool TaskParam::has_span() const {
  return _internal_has_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& TaskParam::_internal_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& TaskParam::span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.span)
  return _internal_span();
}
inline void TaskParam::unsafe_arena_set_allocated_span(
    ::zb::dcts::node::spectrum::FrequencySpan* span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  span_ = span;
  if (span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::release_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::unsafe_arena_release_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::_internal_mutable_span() {
  
  if (span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    span_ = p;
  }
  return span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::mutable_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.span)
  return _internal_mutable_span();
}
inline void TaskParam::set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  if (span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span)->GetArena();
    if (message_arena != submessage_arena) {
      span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.span)
}

// .zb.dcts.node.zczh.zhIFAnalysis.IFBandWidth IF_bandwidth = 2;
inline void TaskParam::clear_if_bandwidth() {
  if_bandwidth_ = 0;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth TaskParam::_internal_if_bandwidth() const {
  return static_cast< ::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth >(if_bandwidth_);
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth TaskParam::if_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.IF_bandwidth)
  return _internal_if_bandwidth();
}
inline void TaskParam::_internal_set_if_bandwidth(::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth value) {
  
  if_bandwidth_ = value;
}
inline void TaskParam::set_if_bandwidth(::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth value) {
  _internal_set_if_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.IF_bandwidth)
}

// int32 result_interval = 3;
inline void TaskParam::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.result_interval)
  return _internal_result_interval();
}
inline void TaskParam::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void TaskParam::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.result_interval)
}

// int32 status_interval = 4;
inline void TaskParam::clear_status_interval() {
  status_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_status_interval() const {
  return status_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::status_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.status_interval)
  return _internal_status_interval();
}
inline void TaskParam::_internal_set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_interval_ = value;
}
inline void TaskParam::set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.status_interval)
}

// int32 expected_points = 5;
inline void TaskParam::clear_expected_points() {
  expected_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_expected_points() const {
  return expected_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::expected_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.expected_points)
  return _internal_expected_points();
}
inline void TaskParam::_internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expected_points_ = value;
}
inline void TaskParam::set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expected_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.expected_points)
}

// int32 average_count = 6;
inline void TaskParam::clear_average_count() {
  average_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_average_count() const {
  return average_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::average_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.average_count)
  return _internal_average_count();
}
inline void TaskParam::_internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_count_ = value;
}
inline void TaskParam::set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.average_count)
}

// int32 attenuation_gain = 7;
inline void TaskParam::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void TaskParam::_internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_gain_ = value;
}
inline void TaskParam::set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.attenuation_gain)
}

// int32 antenna = 8;
inline void TaskParam::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.antenna)
  return _internal_antenna();
}
inline void TaskParam::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void TaskParam::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.antenna)
}

// int32 receive_mode = 9;
inline void TaskParam::clear_receive_mode() {
  receive_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_receive_mode() const {
  return receive_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::receive_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.receive_mode)
  return _internal_receive_mode();
}
inline void TaskParam::_internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_mode_ = value;
}
inline void TaskParam::set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.receive_mode)
}

// int32 mode = 10;
inline void TaskParam::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.mode)
  return _internal_mode();
}
inline void TaskParam::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void TaskParam::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.mode)
}

// int32 value = 11;
inline void TaskParam::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.value)
  return _internal_value();
}
inline void TaskParam::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void TaskParam::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.value)
}

// .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 12;
inline void TaskParam::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType TaskParam::_internal_type() const {
  return static_cast< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType >(type_);
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType TaskParam::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.type)
  return _internal_type();
}
inline void TaskParam::_internal_set_type(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType value) {
  
  type_ = value;
}
inline void TaskParam::set_type(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.type)
}

// .zb.dcts.node.zczh.zhIFAnalysis.DemodType demod_type = 13;
inline void TaskParam::clear_demod_type() {
  demod_type_ = 0;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::DemodType TaskParam::_internal_demod_type() const {
  return static_cast< ::zb::dcts::node::zczh::zhIFAnalysis::DemodType >(demod_type_);
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::DemodType TaskParam::demod_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.demod_type)
  return _internal_demod_type();
}
inline void TaskParam::_internal_set_demod_type(::zb::dcts::node::zczh::zhIFAnalysis::DemodType value) {
  
  demod_type_ = value;
}
inline void TaskParam::set_demod_type(::zb::dcts::node::zczh::zhIFAnalysis::DemodType value) {
  _internal_set_demod_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.demod_type)
}

// double ref_level = 14;
inline void TaskParam::clear_ref_level() {
  ref_level_ = 0;
}
inline double TaskParam::_internal_ref_level() const {
  return ref_level_;
}
inline double TaskParam::ref_level() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.ref_level)
  return _internal_ref_level();
}
inline void TaskParam::_internal_set_ref_level(double value) {
  
  ref_level_ = value;
}
inline void TaskParam::set_ref_level(double value) {
  _internal_set_ref_level(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.ref_level)
}

// int32 iq_sweep_count = 15;
inline void TaskParam::clear_iq_sweep_count() {
  iq_sweep_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_iq_sweep_count() const {
  return iq_sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::iq_sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.iq_sweep_count)
  return _internal_iq_sweep_count();
}
inline void TaskParam::_internal_set_iq_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iq_sweep_count_ = value;
}
inline void TaskParam::set_iq_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iq_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TaskParam.iq_sweep_count)
}

// -------------------------------------------------------------------

// Header

// .zb.dcts.node.NodeDevice result_from = 1;
inline bool Header::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool Header::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::node::NodeDevice& Header::_internal_result_from() const {
  const ::zb::dcts::node::NodeDevice* p = result_from_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& Header::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Header.result_from)
  return _internal_result_from();
}
inline void Header::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::node::NodeDevice* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Header.result_from)
}
inline ::zb::dcts::node::NodeDevice* Header::release_result_from() {
  
  ::zb::dcts::node::NodeDevice* temp = result_from_;
  result_from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* Header::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Header.result_from)
  
  ::zb::dcts::node::NodeDevice* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* Header::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::node::NodeDevice* Header::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Header.result_from)
  return _internal_mutable_result_from();
}
inline void Header::set_allocated_result_from(::zb::dcts::node::NodeDevice* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Header.result_from)
}

// string record_id = 2;
inline void Header::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& Header::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Header.record_id)
  return _internal_record_id();
}
inline void Header::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.Header.record_id)
}
inline std::string* Header::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Header.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& Header::_internal_record_id() const {
  return record_id_.Get();
}
inline void Header::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Header::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhIFAnalysis.Header.record_id)
}
inline void Header::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhIFAnalysis.Header.record_id)
}
inline void Header::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhIFAnalysis.Header.record_id)
}
inline std::string* Header::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Header::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Header.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Header.record_id)
}

// uint32 sequence_number = 3;
inline void Header::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Header.sequence_number)
  return _internal_sequence_number();
}
inline void Header::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void Header::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.Header.sequence_number)
}

// uint32 sweep_count = 4;
inline void Header::clear_sweep_count() {
  sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_sweep_count() const {
  return sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Header.sweep_count)
  return _internal_sweep_count();
}
inline void Header::_internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sweep_count_ = value;
}
inline void Header::set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.Header.sweep_count)
}

// .zb.dcts.TimeSpan time_span = 5;
inline bool Header::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool Header::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& Header::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& Header::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Header.time_span)
  return _internal_time_span();
}
inline void Header::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Header.time_span)
}
inline ::zb::dcts::TimeSpan* Header::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* Header::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Header.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* Header::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* Header::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Header.time_span)
  return _internal_mutable_time_span();
}
inline void Header::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Header.time_span)
}

// .zb.dcts.Position device_position = 6;
inline bool Header::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool Header::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& Header::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Position&>(
      ::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& Header::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Header.device_position)
  return _internal_device_position();
}
inline void Header::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Header.device_position)
}
inline ::zb::dcts::Position* Header::release_device_position() {
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* Header::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Header.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* Header::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* Header::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Header.device_position)
  return _internal_mutable_device_position();
}
inline void Header::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Header.device_position)
}

// -------------------------------------------------------------------

// TransmissionResult

// .zb.dcts.node.zczh.zhIFAnalysis.TransmissionType trans_type = 1;
inline void TransmissionResult::clear_trans_type() {
  trans_type_ = 0;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType TransmissionResult::_internal_trans_type() const {
  return static_cast< ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType >(trans_type_);
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType TransmissionResult::trans_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult.trans_type)
  return _internal_trans_type();
}
inline void TransmissionResult::_internal_set_trans_type(::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType value) {
  
  trans_type_ = value;
}
inline void TransmissionResult::set_trans_type(::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType value) {
  _internal_set_trans_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult.trans_type)
}

// -------------------------------------------------------------------

// AudioBlock

// repeated int32 pcm_bitstream = 1;
inline int AudioBlock::_internal_pcm_bitstream_size() const {
  return pcm_bitstream_.size();
}
inline int AudioBlock::pcm_bitstream_size() const {
  return _internal_pcm_bitstream_size();
}
inline void AudioBlock::clear_pcm_bitstream() {
  pcm_bitstream_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioBlock::_internal_pcm_bitstream(int index) const {
  return pcm_bitstream_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioBlock::pcm_bitstream(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock.pcm_bitstream)
  return _internal_pcm_bitstream(index);
}
inline void AudioBlock::set_pcm_bitstream(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pcm_bitstream_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock.pcm_bitstream)
}
inline void AudioBlock::_internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pcm_bitstream_.Add(value);
}
inline void AudioBlock::add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pcm_bitstream(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock.pcm_bitstream)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AudioBlock::_internal_pcm_bitstream() const {
  return pcm_bitstream_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AudioBlock::pcm_bitstream() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock.pcm_bitstream)
  return _internal_pcm_bitstream();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AudioBlock::_internal_mutable_pcm_bitstream() {
  return &pcm_bitstream_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AudioBlock::mutable_pcm_bitstream() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock.pcm_bitstream)
  return _internal_mutable_pcm_bitstream();
}

// -------------------------------------------------------------------

// AudioResult

// repeated .zb.dcts.node.zczh.zhIFAnalysis.AudioBlock blocks = 1;
inline int AudioResult::_internal_blocks_size() const {
  return blocks_.size();
}
inline int AudioResult::blocks_size() const {
  return _internal_blocks_size();
}
inline void AudioResult::clear_blocks() {
  blocks_.Clear();
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock* AudioResult::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.AudioResult.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock >*
AudioResult::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhIFAnalysis.AudioResult.blocks)
  return &blocks_;
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock& AudioResult::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock& AudioResult::blocks(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.AudioResult.blocks)
  return _internal_blocks(index);
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock* AudioResult::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock* AudioResult::add_blocks() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhIFAnalysis.AudioResult.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock >&
AudioResult::blocks() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhIFAnalysis.AudioResult.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// Result

// .zb.dcts.node.zczh.zhIFAnalysis.Header header = 1;
inline bool Result::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Result::has_header() const {
  return _internal_has_header();
}
inline void Result::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::Header& Result::_internal_header() const {
  const ::zb::dcts::node::zczh::zhIFAnalysis::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhIFAnalysis::Header&>(
      ::zb::dcts::node::zczh::zhIFAnalysis::_Header_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::Header& Result::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Result.header)
  return _internal_header();
}
inline void Result::unsafe_arena_set_allocated_header(
    ::zb::dcts::node::zczh::zhIFAnalysis::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.header)
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::Header* Result::release_header() {
  
  ::zb::dcts::node::zczh::zhIFAnalysis::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::Header* Result::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Result.header)
  
  ::zb::dcts::node::zczh::zhIFAnalysis::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::Header* Result::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::Header* Result::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Result.header)
  return _internal_mutable_header();
}
inline void Result::set_allocated_header(::zb::dcts::node::zczh::zhIFAnalysis::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.header)
}

// .zb.dcts.node.spectrum.View spectrum = 2;
inline bool Result::_internal_has_spectrum() const {
  return this != internal_default_instance() && spectrum_ != nullptr;
}
inline bool Result::has_spectrum() const {
  return _internal_has_spectrum();
}
inline const ::zb::dcts::node::spectrum::View& Result::_internal_spectrum() const {
  const ::zb::dcts::node::spectrum::View* p = spectrum_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::View&>(
      ::zb::dcts::node::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::node::spectrum::View& Result::spectrum() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Result.spectrum)
  return _internal_spectrum();
}
inline void Result::unsafe_arena_set_allocated_spectrum(
    ::zb::dcts::node::spectrum::View* spectrum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_);
  }
  spectrum_ = spectrum;
  if (spectrum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.spectrum)
}
inline ::zb::dcts::node::spectrum::View* Result::release_spectrum() {
  
  ::zb::dcts::node::spectrum::View* temp = spectrum_;
  spectrum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::View* Result::unsafe_arena_release_spectrum() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Result.spectrum)
  
  ::zb::dcts::node::spectrum::View* temp = spectrum_;
  spectrum_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::View* Result::_internal_mutable_spectrum() {
  
  if (spectrum_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::View>(GetArena());
    spectrum_ = p;
  }
  return spectrum_;
}
inline ::zb::dcts::node::spectrum::View* Result::mutable_spectrum() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Result.spectrum)
  return _internal_mutable_spectrum();
}
inline void Result::set_allocated_spectrum(::zb::dcts::node::spectrum::View* spectrum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_);
  }
  if (spectrum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum)->GetArena();
    if (message_arena != submessage_arena) {
      spectrum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spectrum, submessage_arena);
    }
    
  } else {
    
  }
  spectrum_ = spectrum;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.spectrum)
}

// .zb.dcts.node.modulation.RecognizeResult recognize_result = 3;
inline bool Result::_internal_has_recognize_result() const {
  return this != internal_default_instance() && recognize_result_ != nullptr;
}
inline bool Result::has_recognize_result() const {
  return _internal_has_recognize_result();
}
inline const ::zb::dcts::node::modulation::RecognizeResult& Result::_internal_recognize_result() const {
  const ::zb::dcts::node::modulation::RecognizeResult* p = recognize_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::modulation::RecognizeResult&>(
      ::zb::dcts::node::modulation::_RecognizeResult_default_instance_);
}
inline const ::zb::dcts::node::modulation::RecognizeResult& Result::recognize_result() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Result.recognize_result)
  return _internal_recognize_result();
}
inline void Result::unsafe_arena_set_allocated_recognize_result(
    ::zb::dcts::node::modulation::RecognizeResult* recognize_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recognize_result_);
  }
  recognize_result_ = recognize_result;
  if (recognize_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.recognize_result)
}
inline ::zb::dcts::node::modulation::RecognizeResult* Result::release_recognize_result() {
  
  ::zb::dcts::node::modulation::RecognizeResult* temp = recognize_result_;
  recognize_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::modulation::RecognizeResult* Result::unsafe_arena_release_recognize_result() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Result.recognize_result)
  
  ::zb::dcts::node::modulation::RecognizeResult* temp = recognize_result_;
  recognize_result_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::modulation::RecognizeResult* Result::_internal_mutable_recognize_result() {
  
  if (recognize_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::modulation::RecognizeResult>(GetArena());
    recognize_result_ = p;
  }
  return recognize_result_;
}
inline ::zb::dcts::node::modulation::RecognizeResult* Result::mutable_recognize_result() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Result.recognize_result)
  return _internal_mutable_recognize_result();
}
inline void Result::set_allocated_recognize_result(::zb::dcts::node::modulation::RecognizeResult* recognize_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recognize_result_);
  }
  if (recognize_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recognize_result)->GetArena();
    if (message_arena != submessage_arena) {
      recognize_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recognize_result, submessage_arena);
    }
    
  } else {
    
  }
  recognize_result_ = recognize_result;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.recognize_result)
}

// .zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult trans_result = 4;
inline bool Result::_internal_has_trans_result() const {
  return this != internal_default_instance() && trans_result_ != nullptr;
}
inline bool Result::has_trans_result() const {
  return _internal_has_trans_result();
}
inline void Result::clear_trans_result() {
  if (GetArena() == nullptr && trans_result_ != nullptr) {
    delete trans_result_;
  }
  trans_result_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult& Result::_internal_trans_result() const {
  const ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* p = trans_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult&>(
      ::zb::dcts::node::zczh::zhIFAnalysis::_TransmissionResult_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult& Result::trans_result() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Result.trans_result)
  return _internal_trans_result();
}
inline void Result::unsafe_arena_set_allocated_trans_result(
    ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* trans_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trans_result_);
  }
  trans_result_ = trans_result;
  if (trans_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.trans_result)
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* Result::release_trans_result() {
  
  ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* temp = trans_result_;
  trans_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* Result::unsafe_arena_release_trans_result() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Result.trans_result)
  
  ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* temp = trans_result_;
  trans_result_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* Result::_internal_mutable_trans_result() {
  
  if (trans_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult>(GetArena());
    trans_result_ = p;
  }
  return trans_result_;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* Result::mutable_trans_result() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Result.trans_result)
  return _internal_mutable_trans_result();
}
inline void Result::set_allocated_trans_result(::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* trans_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trans_result_;
  }
  if (trans_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trans_result);
    if (message_arena != submessage_arena) {
      trans_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trans_result, submessage_arena);
    }
    
  } else {
    
  }
  trans_result_ = trans_result;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.trans_result)
}

// .zb.dcts.node.zczh.zhIFAnalysis.AudioResult audio_Result = 5;
inline bool Result::_internal_has_audio_result() const {
  return this != internal_default_instance() && audio_result_ != nullptr;
}
inline bool Result::has_audio_result() const {
  return _internal_has_audio_result();
}
inline void Result::clear_audio_result() {
  if (GetArena() == nullptr && audio_result_ != nullptr) {
    delete audio_result_;
  }
  audio_result_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult& Result::_internal_audio_result() const {
  const ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* p = audio_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult&>(
      ::zb::dcts::node::zczh::zhIFAnalysis::_AudioResult_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult& Result::audio_result() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Result.audio_Result)
  return _internal_audio_result();
}
inline void Result::unsafe_arena_set_allocated_audio_result(
    ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* audio_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_result_);
  }
  audio_result_ = audio_result;
  if (audio_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.audio_Result)
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* Result::release_audio_result() {
  
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* temp = audio_result_;
  audio_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* Result::unsafe_arena_release_audio_result() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Result.audio_Result)
  
  ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* temp = audio_result_;
  audio_result_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* Result::_internal_mutable_audio_result() {
  
  if (audio_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::AudioResult>(GetArena());
    audio_result_ = p;
  }
  return audio_result_;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* Result::mutable_audio_result() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Result.audio_Result)
  return _internal_mutable_audio_result();
}
inline void Result::set_allocated_audio_result(::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* audio_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_result_;
  }
  if (audio_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_result);
    if (message_arena != submessage_arena) {
      audio_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_result, submessage_arena);
    }
    
  } else {
    
  }
  audio_result_ = audio_result;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.audio_Result)
}

// .zb.dcts.node.detection.SignalList signal_list = 6;
inline bool Result::_internal_has_signal_list() const {
  return this != internal_default_instance() && signal_list_ != nullptr;
}
inline bool Result::has_signal_list() const {
  return _internal_has_signal_list();
}
inline const ::zb::dcts::node::detection::SignalList& Result::_internal_signal_list() const {
  const ::zb::dcts::node::detection::SignalList* p = signal_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::detection::SignalList&>(
      ::zb::dcts::node::detection::_SignalList_default_instance_);
}
inline const ::zb::dcts::node::detection::SignalList& Result::signal_list() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.Result.signal_list)
  return _internal_signal_list();
}
inline void Result::unsafe_arena_set_allocated_signal_list(
    ::zb::dcts::node::detection::SignalList* signal_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_list_);
  }
  signal_list_ = signal_list;
  if (signal_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.signal_list)
}
inline ::zb::dcts::node::detection::SignalList* Result::release_signal_list() {
  
  ::zb::dcts::node::detection::SignalList* temp = signal_list_;
  signal_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::detection::SignalList* Result::unsafe_arena_release_signal_list() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.Result.signal_list)
  
  ::zb::dcts::node::detection::SignalList* temp = signal_list_;
  signal_list_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::detection::SignalList* Result::_internal_mutable_signal_list() {
  
  if (signal_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::detection::SignalList>(GetArena());
    signal_list_ = p;
  }
  return signal_list_;
}
inline ::zb::dcts::node::detection::SignalList* Result::mutable_signal_list() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.Result.signal_list)
  return _internal_mutable_signal_list();
}
inline void Result::set_allocated_signal_list(::zb::dcts::node::detection::SignalList* signal_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_list_);
  }
  if (signal_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_list)->GetArena();
    if (message_arena != submessage_arena) {
      signal_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_list, submessage_arena);
    }
    
  } else {
    
  }
  signal_list_ = signal_list;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.Result.signal_list)
}

// -------------------------------------------------------------------

// RecordDescriptor

// string record_id = 1;
inline void RecordDescriptor::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& RecordDescriptor::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id)
  return _internal_record_id();
}
inline void RecordDescriptor::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& RecordDescriptor::_internal_record_id() const {
  return record_id_.Get();
}
inline void RecordDescriptor::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecordDescriptor::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecordDescriptor::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDescriptor::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id)
}

// .zb.dcts.node.NodeDevice from = 2;
inline bool RecordDescriptor::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool RecordDescriptor::has_from() const {
  return _internal_has_from();
}
inline const ::zb::dcts::node::NodeDevice& RecordDescriptor::_internal_from() const {
  const ::zb::dcts::node::NodeDevice* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& RecordDescriptor::from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.from)
  return _internal_from();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_from(
    ::zb::dcts::node::NodeDevice* from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.from)
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::release_from() {
  
  ::zb::dcts::node::NodeDevice* temp = from_;
  from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.from)
  
  ::zb::dcts::node::NodeDevice* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    from_ = p;
  }
  return from_;
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::mutable_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.from)
  return _internal_mutable_from();
}
inline void RecordDescriptor::set_allocated_from(::zb::dcts::node::NodeDevice* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from)->GetArena();
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.from)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool RecordDescriptor::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool RecordDescriptor::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.time_span)
  return _internal_time_span();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.time_span)
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.time_span)
  return _internal_mutable_time_span();
}
inline void RecordDescriptor::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.time_span)
}

// .zb.dcts.node.spectrum.SignalBand analysis_band = 4;
inline bool RecordDescriptor::_internal_has_analysis_band() const {
  return this != internal_default_instance() && analysis_band_ != nullptr;
}
inline bool RecordDescriptor::has_analysis_band() const {
  return _internal_has_analysis_band();
}
inline const ::zb::dcts::node::spectrum::SignalBand& RecordDescriptor::_internal_analysis_band() const {
  const ::zb::dcts::node::spectrum::SignalBand* p = analysis_band_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::SignalBand&>(
      ::zb::dcts::node::spectrum::_SignalBand_default_instance_);
}
inline const ::zb::dcts::node::spectrum::SignalBand& RecordDescriptor::analysis_band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.analysis_band)
  return _internal_analysis_band();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_analysis_band(
    ::zb::dcts::node::spectrum::SignalBand* analysis_band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_band_);
  }
  analysis_band_ = analysis_band;
  if (analysis_band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.analysis_band)
}
inline ::zb::dcts::node::spectrum::SignalBand* RecordDescriptor::release_analysis_band() {
  
  ::zb::dcts::node::spectrum::SignalBand* temp = analysis_band_;
  analysis_band_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::SignalBand* RecordDescriptor::unsafe_arena_release_analysis_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.analysis_band)
  
  ::zb::dcts::node::spectrum::SignalBand* temp = analysis_band_;
  analysis_band_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::SignalBand* RecordDescriptor::_internal_mutable_analysis_band() {
  
  if (analysis_band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::SignalBand>(GetArena());
    analysis_band_ = p;
  }
  return analysis_band_;
}
inline ::zb::dcts::node::spectrum::SignalBand* RecordDescriptor::mutable_analysis_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.analysis_band)
  return _internal_mutable_analysis_band();
}
inline void RecordDescriptor::set_allocated_analysis_band(::zb::dcts::node::spectrum::SignalBand* analysis_band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_band_);
  }
  if (analysis_band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_band)->GetArena();
    if (message_arena != submessage_arena) {
      analysis_band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analysis_band, submessage_arena);
    }
    
  } else {
    
  }
  analysis_band_ = analysis_band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.analysis_band)
}

// uint32 record_count = 5;
inline void RecordDescriptor::clear_record_count() {
  record_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::_internal_record_count() const {
  return record_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::record_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_count)
  return _internal_record_count();
}
inline void RecordDescriptor::_internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  record_count_ = value;
}
inline void RecordDescriptor::set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_count)
}

// -------------------------------------------------------------------

// QueryRecordReply

// .zb.dcts.node.NodeId node_id = 1;
inline bool QueryRecordReply::_internal_has_node_id() const {
  return this != internal_default_instance() && node_id_ != nullptr;
}
inline bool QueryRecordReply::has_node_id() const {
  return _internal_has_node_id();
}
inline const ::zb::dcts::node::NodeId& QueryRecordReply::_internal_node_id() const {
  const ::zb::dcts::node::NodeId* p = node_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeId&>(
      ::zb::dcts::node::_NodeId_default_instance_);
}
inline const ::zb::dcts::node::NodeId& QueryRecordReply::node_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.node_id)
  return _internal_node_id();
}
inline void QueryRecordReply::unsafe_arena_set_allocated_node_id(
    ::zb::dcts::node::NodeId* node_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.node_id)
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::release_node_id() {
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.node_id)
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::_internal_mutable_node_id() {
  
  if (node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeId>(GetArena());
    node_id_ = p;
  }
  return node_id_;
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.node_id)
  return _internal_mutable_node_id();
}
inline void QueryRecordReply::set_allocated_node_id(::zb::dcts::node::NodeId* node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  if (node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id)->GetArena();
    if (message_arena != submessage_arena) {
      node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_id, submessage_arena);
    }
    
  } else {
    
  }
  node_id_ = node_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.node_id)
}

// repeated .zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor matching_records = 2;
inline int QueryRecordReply::_internal_matching_records_size() const {
  return matching_records_.size();
}
inline int QueryRecordReply::matching_records_size() const {
  return _internal_matching_records_size();
}
inline void QueryRecordReply::clear_matching_records() {
  matching_records_.Clear();
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor* QueryRecordReply::mutable_matching_records(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.matching_records)
  return matching_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor >*
QueryRecordReply::mutable_matching_records() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.matching_records)
  return &matching_records_;
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor& QueryRecordReply::_internal_matching_records(int index) const {
  return matching_records_.Get(index);
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor& QueryRecordReply::matching_records(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.matching_records)
  return _internal_matching_records(index);
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor* QueryRecordReply::_internal_add_matching_records() {
  return matching_records_.Add();
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor* QueryRecordReply::add_matching_records() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.matching_records)
  return _internal_add_matching_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor >&
QueryRecordReply::matching_records() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply.matching_records)
  return matching_records_;
}

// -------------------------------------------------------------------

// ReplayStartRequest

// .zb.dcts.node.replay.ReplayId replay_id = 1;
inline bool ReplayStartRequest::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool ReplayStartRequest::has_replay_id() const {
  return _internal_has_replay_id();
}
inline const ::zb::dcts::node::replay::ReplayId& ReplayStartRequest::_internal_replay_id() const {
  const ::zb::dcts::node::replay::ReplayId* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::replay::ReplayId&>(
      ::zb::dcts::node::replay::_ReplayId_default_instance_);
}
inline const ::zb::dcts::node::replay::ReplayId& ReplayStartRequest::replay_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest.replay_id)
  return _internal_replay_id();
}
inline void ReplayStartRequest::unsafe_arena_set_allocated_replay_id(
    ::zb::dcts::node::replay::ReplayId* replay_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest.replay_id)
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::release_replay_id() {
  
  ::zb::dcts::node::replay::ReplayId* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest.replay_id)
  
  ::zb::dcts::node::replay::ReplayId* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::replay::ReplayId>(GetArena());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest.replay_id)
  return _internal_mutable_replay_id();
}
inline void ReplayStartRequest::set_allocated_replay_id(::zb::dcts::node::replay::ReplayId* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id)->GetArena();
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest.replay_id)
}

// int32 result_interval = 4;
inline void ReplayStartRequest::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest.result_interval)
  return _internal_result_interval();
}
inline void ReplayStartRequest::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void ReplayStartRequest::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest.result_interval)
}

// int32 expected_points = 5;
inline void ReplayStartRequest::clear_expected_points() {
  expected_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::_internal_expected_points() const {
  return expected_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::expected_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest.expected_points)
  return _internal_expected_points();
}
inline void ReplayStartRequest::_internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expected_points_ = value;
}
inline void ReplayStartRequest::set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expected_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest.expected_points)
}

// -------------------------------------------------------------------

// QueryRecordRequest

// .zb.dcts.node.TaskAccount task_account = 1;
inline bool QueryRecordRequest::_internal_has_task_account() const {
  return this != internal_default_instance() && task_account_ != nullptr;
}
inline bool QueryRecordRequest::has_task_account() const {
  return _internal_has_task_account();
}
inline const ::zb::dcts::node::TaskAccount& QueryRecordRequest::_internal_task_account() const {
  const ::zb::dcts::node::TaskAccount* p = task_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::TaskAccount&>(
      ::zb::dcts::node::_TaskAccount_default_instance_);
}
inline const ::zb::dcts::node::TaskAccount& QueryRecordRequest::task_account() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.task_account)
  return _internal_task_account();
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_task_account(
    ::zb::dcts::node::TaskAccount* task_account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  task_account_ = task_account;
  if (task_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.task_account)
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::release_task_account() {
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::unsafe_arena_release_task_account() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.task_account)
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::_internal_mutable_task_account() {
  
  if (task_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::TaskAccount>(GetArena());
    task_account_ = p;
  }
  return task_account_;
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::mutable_task_account() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.task_account)
  return _internal_mutable_task_account();
}
inline void QueryRecordRequest::set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  if (task_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account)->GetArena();
    if (message_arena != submessage_arena) {
      task_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_account, submessage_arena);
    }
    
  } else {
    
  }
  task_account_ = task_account;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.task_account)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool QueryRecordRequest::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool QueryRecordRequest::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& QueryRecordRequest::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& QueryRecordRequest::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.time_span)
  return _internal_time_span();
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.time_span)
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.time_span)
  return _internal_mutable_time_span();
}
inline void QueryRecordRequest::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.time_span)
}

// .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
inline bool QueryRecordRequest::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool QueryRecordRequest::has_freq_span() const {
  return _internal_has_freq_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& QueryRecordRequest::_internal_freq_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& QueryRecordRequest::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.freq_span)
  return _internal_freq_span();
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.freq_span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::release_freq_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.freq_span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.freq_span)
  return _internal_mutable_freq_span();
}
inline void QueryRecordRequest::set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span)->GetArena();
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest.freq_span)
}

// -------------------------------------------------------------------

// OperationStatus

// .zb.dcts.node.NodeDevice running_device = 1;
inline bool OperationStatus::_internal_has_running_device() const {
  return this != internal_default_instance() && running_device_ != nullptr;
}
inline bool OperationStatus::has_running_device() const {
  return _internal_has_running_device();
}
inline const ::zb::dcts::node::NodeDevice& OperationStatus::_internal_running_device() const {
  const ::zb::dcts::node::NodeDevice* p = running_device_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& OperationStatus::running_device() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.running_device)
  return _internal_running_device();
}
inline void OperationStatus::unsafe_arena_set_allocated_running_device(
    ::zb::dcts::node::NodeDevice* running_device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_device_);
  }
  running_device_ = running_device;
  if (running_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.running_device)
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::release_running_device() {
  
  ::zb::dcts::node::NodeDevice* temp = running_device_;
  running_device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::unsafe_arena_release_running_device() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.running_device)
  
  ::zb::dcts::node::NodeDevice* temp = running_device_;
  running_device_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::_internal_mutable_running_device() {
  
  if (running_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    running_device_ = p;
  }
  return running_device_;
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::mutable_running_device() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.running_device)
  return _internal_mutable_running_device();
}
inline void OperationStatus::set_allocated_running_device(::zb::dcts::node::NodeDevice* running_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_device_);
  }
  if (running_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_device)->GetArena();
    if (message_arena != submessage_arena) {
      running_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, running_device, submessage_arena);
    }
    
  } else {
    
  }
  running_device_ = running_device;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.running_device)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool OperationStatus::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool OperationStatus::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& OperationStatus::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& OperationStatus::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.time_span)
  return _internal_time_span();
}
inline void OperationStatus::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.time_span)
}
inline ::zb::dcts::TimeSpan* OperationStatus::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* OperationStatus::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* OperationStatus::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* OperationStatus::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.time_span)
  return _internal_mutable_time_span();
}
inline void OperationStatus::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.time_span)
}

// uint32 total_sweep_count = 5;
inline void OperationStatus::clear_total_sweep_count() {
  total_sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::_internal_total_sweep_count() const {
  return total_sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::total_sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.total_sweep_count)
  return _internal_total_sweep_count();
}
inline void OperationStatus::_internal_set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_sweep_count_ = value;
}
inline void OperationStatus::set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.total_sweep_count)
}

// uint32 record_count = 6;
inline void OperationStatus::clear_record_count() {
  record_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::_internal_record_count() const {
  return record_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::record_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.record_count)
  return _internal_record_count();
}
inline void OperationStatus::_internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  record_count_ = value;
}
inline void OperationStatus::set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.record_count)
}

// repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
inline int OperationStatus::_internal_threshold_lines_size() const {
  return threshold_lines_.size();
}
inline int OperationStatus::threshold_lines_size() const {
  return _internal_threshold_lines_size();
}
inline ::zb::dcts::node::detection::ThresholdRefLine* OperationStatus::mutable_threshold_lines(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.threshold_lines)
  return threshold_lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >*
OperationStatus::mutable_threshold_lines() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.threshold_lines)
  return &threshold_lines_;
}
inline const ::zb::dcts::node::detection::ThresholdRefLine& OperationStatus::_internal_threshold_lines(int index) const {
  return threshold_lines_.Get(index);
}
inline const ::zb::dcts::node::detection::ThresholdRefLine& OperationStatus::threshold_lines(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.threshold_lines)
  return _internal_threshold_lines(index);
}
inline ::zb::dcts::node::detection::ThresholdRefLine* OperationStatus::_internal_add_threshold_lines() {
  return threshold_lines_.Add();
}
inline ::zb::dcts::node::detection::ThresholdRefLine* OperationStatus::add_threshold_lines() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.threshold_lines)
  return _internal_add_threshold_lines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >&
OperationStatus::threshold_lines() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus.threshold_lines)
  return threshold_lines_;
}

// -------------------------------------------------------------------

// RecogniseRequest

// repeated .zb.dcts.node.NodeDevice task_runner = 1;
inline int RecogniseRequest::_internal_task_runner_size() const {
  return task_runner_.size();
}
inline int RecogniseRequest::task_runner_size() const {
  return _internal_task_runner_size();
}
inline ::zb::dcts::node::NodeDevice* RecogniseRequest::mutable_task_runner(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.task_runner)
  return task_runner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
RecogniseRequest::mutable_task_runner() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.task_runner)
  return &task_runner_;
}
inline const ::zb::dcts::node::NodeDevice& RecogniseRequest::_internal_task_runner(int index) const {
  return task_runner_.Get(index);
}
inline const ::zb::dcts::node::NodeDevice& RecogniseRequest::task_runner(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.task_runner)
  return _internal_task_runner(index);
}
inline ::zb::dcts::node::NodeDevice* RecogniseRequest::_internal_add_task_runner() {
  return task_runner_.Add();
}
inline ::zb::dcts::node::NodeDevice* RecogniseRequest::add_task_runner() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.task_runner)
  return _internal_add_task_runner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
RecogniseRequest::task_runner() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.task_runner)
  return task_runner_;
}

// .zb.dcts.node.zczh.zhIFAnalysis.TaskParam param = 2;
inline bool RecogniseRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool RecogniseRequest::has_param() const {
  return _internal_has_param();
}
inline void RecogniseRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam& RecogniseRequest::_internal_param() const {
  const ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam&>(
      ::zb::dcts::node::zczh::zhIFAnalysis::_TaskParam_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam& RecogniseRequest::param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.param)
  return _internal_param();
}
inline void RecogniseRequest::unsafe_arena_set_allocated_param(
    ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.param)
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* RecogniseRequest::release_param() {
  
  ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* RecogniseRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.param)
  
  ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* RecogniseRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::TaskParam>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* RecogniseRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.param)
  return _internal_mutable_param();
}
inline void RecogniseRequest::set_allocated_param(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest.param)
}

// -------------------------------------------------------------------

// RecogniseParam

// .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 1;
inline void RecogniseParam::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType RecogniseParam::_internal_type() const {
  return static_cast< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType >(type_);
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType RecogniseParam::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam.type)
  return _internal_type();
}
inline void RecogniseParam::_internal_set_type(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType value) {
  
  type_ = value;
}
inline void RecogniseParam::set_type(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam.type)
}

// .zb.dcts.node.spectrum.FrequencySpan span = 2;
inline bool RecogniseParam::_internal_has_span() const {
  return this != internal_default_instance() && span_ != nullptr;
}
inline bool RecogniseParam::has_span() const {
  return _internal_has_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& RecogniseParam::_internal_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& RecogniseParam::span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam.span)
  return _internal_span();
}
inline void RecogniseParam::unsafe_arena_set_allocated_span(
    ::zb::dcts::node::spectrum::FrequencySpan* span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  span_ = span;
  if (span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam.span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RecogniseParam::release_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RecogniseParam::unsafe_arena_release_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam.span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RecogniseParam::_internal_mutable_span() {
  
  if (span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    span_ = p;
  }
  return span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RecogniseParam::mutable_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam.span)
  return _internal_mutable_span();
}
inline void RecogniseParam::set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  if (span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span)->GetArena();
    if (message_arena != submessage_arena) {
      span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam.span)
}

// double IF_bandwidth = 3;
inline void RecogniseParam::clear_if_bandwidth() {
  if_bandwidth_ = 0;
}
inline double RecogniseParam::_internal_if_bandwidth() const {
  return if_bandwidth_;
}
inline double RecogniseParam::if_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam.IF_bandwidth)
  return _internal_if_bandwidth();
}
inline void RecogniseParam::_internal_set_if_bandwidth(double value) {
  
  if_bandwidth_ = value;
}
inline void RecogniseParam::set_if_bandwidth(double value) {
  _internal_set_if_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam.IF_bandwidth)
}

// -------------------------------------------------------------------

// ChangeRequest

// .zb.dcts.node.TaskAccount task_account = 1;
inline bool ChangeRequest::_internal_has_task_account() const {
  return this != internal_default_instance() && task_account_ != nullptr;
}
inline bool ChangeRequest::has_task_account() const {
  return _internal_has_task_account();
}
inline const ::zb::dcts::node::TaskAccount& ChangeRequest::_internal_task_account() const {
  const ::zb::dcts::node::TaskAccount* p = task_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::TaskAccount&>(
      ::zb::dcts::node::_TaskAccount_default_instance_);
}
inline const ::zb::dcts::node::TaskAccount& ChangeRequest::task_account() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.task_account)
  return _internal_task_account();
}
inline void ChangeRequest::unsafe_arena_set_allocated_task_account(
    ::zb::dcts::node::TaskAccount* task_account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  task_account_ = task_account;
  if (task_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.task_account)
}
inline ::zb::dcts::node::TaskAccount* ChangeRequest::release_task_account() {
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::TaskAccount* ChangeRequest::unsafe_arena_release_task_account() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.task_account)
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::TaskAccount* ChangeRequest::_internal_mutable_task_account() {
  
  if (task_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::TaskAccount>(GetArena());
    task_account_ = p;
  }
  return task_account_;
}
inline ::zb::dcts::node::TaskAccount* ChangeRequest::mutable_task_account() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.task_account)
  return _internal_mutable_task_account();
}
inline void ChangeRequest::set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  if (task_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account)->GetArena();
    if (message_arena != submessage_arena) {
      task_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_account, submessage_arena);
    }
    
  } else {
    
  }
  task_account_ = task_account;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.task_account)
}

// .zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam recognise_param = 2;
inline bool ChangeRequest::_internal_has_recognise_param() const {
  return this != internal_default_instance() && recognise_param_ != nullptr;
}
inline bool ChangeRequest::has_recognise_param() const {
  return _internal_has_recognise_param();
}
inline void ChangeRequest::clear_recognise_param() {
  if (GetArena() == nullptr && recognise_param_ != nullptr) {
    delete recognise_param_;
  }
  recognise_param_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam& ChangeRequest::_internal_recognise_param() const {
  const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* p = recognise_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam&>(
      ::zb::dcts::node::zczh::zhIFAnalysis::_RecogniseParam_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam& ChangeRequest::recognise_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.recognise_param)
  return _internal_recognise_param();
}
inline void ChangeRequest::unsafe_arena_set_allocated_recognise_param(
    ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* recognise_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recognise_param_);
  }
  recognise_param_ = recognise_param;
  if (recognise_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.recognise_param)
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* ChangeRequest::release_recognise_param() {
  
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* temp = recognise_param_;
  recognise_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* ChangeRequest::unsafe_arena_release_recognise_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.recognise_param)
  
  ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* temp = recognise_param_;
  recognise_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* ChangeRequest::_internal_mutable_recognise_param() {
  
  if (recognise_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam>(GetArena());
    recognise_param_ = p;
  }
  return recognise_param_;
}
inline ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* ChangeRequest::mutable_recognise_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.recognise_param)
  return _internal_mutable_recognise_param();
}
inline void ChangeRequest::set_allocated_recognise_param(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* recognise_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete recognise_param_;
  }
  if (recognise_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(recognise_param);
    if (message_arena != submessage_arena) {
      recognise_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recognise_param, submessage_arena);
    }
    
  } else {
    
  }
  recognise_param_ = recognise_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest.recognise_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zhIFAnalysis
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth>() {
  return ::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::node::zczh::zhIFAnalysis::DemodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::zczh::zhIFAnalysis::DemodType>() {
  return ::zb::dcts::node::zczh::zhIFAnalysis::DemodType_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType>() {
  return ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType>() {
  return ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhIFAnalysis_2eproto
