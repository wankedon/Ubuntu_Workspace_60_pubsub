// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/zczh/ZhPScan.proto

#include "node/zczh/ZhPScan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhpscan {
constexpr CalibParam::CalibParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : antenna_mode_(0)
  , gain_(0)
  , downconverter_mode_(0)
  , downconverter_if_attenuation_(0)
  , receive_mode_(0)
  , receive_rf_attenuation_(0)
  , receive_if_attenuation_(0)
  , attenuation_mode_(0){}
struct CalibParamDefaultTypeInternal {
  constexpr CalibParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CalibParamDefaultTypeInternal() {}
  union {
    CalibParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CalibParamDefaultTypeInternal _CalibParam_default_instance_;
constexpr TaskParam::TaskParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : freq_span_(nullptr)
  , calib_param_(nullptr)
  , rbw_(0)
  , if_bandwidth_(0)

  , result_interval_(0)
  , status_interval_(0)
  , expected_points_(0)
  , average_count_(0)
  , attenuation_gain_(0)
  , antenna_(0)
  , receive_mode_(0)
  , ref_level_(0)
  , record_interval_(0){}
struct TaskParamDefaultTypeInternal {
  constexpr TaskParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskParamDefaultTypeInternal() {}
  union {
    TaskParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskParamDefaultTypeInternal _TaskParam_default_instance_;
constexpr TaskStartRequest::TaskStartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_runner_()
  , task_param_(nullptr){}
struct TaskStartRequestDefaultTypeInternal {
  constexpr TaskStartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskStartRequestDefaultTypeInternal() {}
  union {
    TaskStartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskStartRequestDefaultTypeInternal _TaskStartRequest_default_instance_;
constexpr RecordDescriptor::RecordDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(nullptr)
  , time_span_(nullptr)
  , freq_span_(nullptr)
  , sweep_points_(0u)
  , sweep_count_(0u)
  , record_count_(0u){}
struct RecordDescriptorDefaultTypeInternal {
  constexpr RecordDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordDescriptorDefaultTypeInternal() {}
  union {
    RecordDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordDescriptorDefaultTypeInternal _RecordDescriptor_default_instance_;
constexpr RecordRequest::RecordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , times_of_monitor_interval_(0){}
struct RecordRequestDefaultTypeInternal {
  constexpr RecordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordRequestDefaultTypeInternal() {}
  union {
    RecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordRequestDefaultTypeInternal _RecordRequest_default_instance_;
constexpr QueryRecordReply::QueryRecordReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matching_records_()
  , node_id_(nullptr){}
struct QueryRecordReplyDefaultTypeInternal {
  constexpr QueryRecordReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryRecordReplyDefaultTypeInternal() {}
  union {
    QueryRecordReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRecordReplyDefaultTypeInternal _QueryRecordReply_default_instance_;
constexpr ReplayStartRequest::ReplayStartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replay_id_(nullptr)
  , result_interval_(0)
  , expected_points_(0){}
struct ReplayStartRequestDefaultTypeInternal {
  constexpr ReplayStartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplayStartRequestDefaultTypeInternal() {}
  union {
    ReplayStartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplayStartRequestDefaultTypeInternal _ReplayStartRequest_default_instance_;
constexpr OperationStatus::OperationStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threshold_lines_()
  , running_device_(nullptr)
  , time_span_(nullptr)
  , total_sweep_count_(0u)
  , record_count_(0u){}
struct OperationStatusDefaultTypeInternal {
  constexpr OperationStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationStatusDefaultTypeInternal() {}
  union {
    OperationStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
constexpr Result::Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , panorama_view_(nullptr)
  , closeshot_view_(nullptr)
  , signal_list_(nullptr)
  , peak_amplitude_(0){}
struct ResultDefaultTypeInternal {
  constexpr ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;
constexpr QueryRecordRequest::QueryRecordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , time_span_(nullptr)
  , freq_span_(nullptr){}
struct QueryRecordRequestDefaultTypeInternal {
  constexpr QueryRecordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryRecordRequestDefaultTypeInternal() {}
  union {
    QueryRecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRecordRequestDefaultTypeInternal _QueryRecordRequest_default_instance_;
}  // namespace zhpscan
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fzczh_2fZhPScan_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fzczh_2fZhPScan_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fzczh_2fZhPScan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fzczh_2fZhPScan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::CalibParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::CalibParam, antenna_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::CalibParam, gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::CalibParam, downconverter_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::CalibParam, downconverter_if_attenuation_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::CalibParam, receive_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::CalibParam, receive_rf_attenuation_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::CalibParam, receive_if_attenuation_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::CalibParam, attenuation_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, rbw_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, if_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, result_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, status_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, expected_points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, average_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, antenna_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, receive_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, record_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, ref_level_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskParam, calib_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskStartRequest, task_runner_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::TaskStartRequest, task_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordDescriptor, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordDescriptor, from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordDescriptor, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordDescriptor, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordDescriptor, sweep_points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordDescriptor, sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordDescriptor, record_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::RecordRequest, times_of_monitor_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::QueryRecordReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::QueryRecordReply, node_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::QueryRecordReply, matching_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, replay_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, result_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, expected_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::OperationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::OperationStatus, running_device_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::OperationStatus, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::OperationStatus, total_sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::OperationStatus, record_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::OperationStatus, threshold_lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::Result, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::Result, panorama_view_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::Result, closeshot_view_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::Result, signal_list_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::Result, peak_amplitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::QueryRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::QueryRecordRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::QueryRecordRequest, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhpscan::QueryRecordRequest, freq_span_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::zczh::zhpscan::CalibParam)},
  { 13, -1, sizeof(::zb::dcts::node::zczh::zhpscan::TaskParam)},
  { 31, -1, sizeof(::zb::dcts::node::zczh::zhpscan::TaskStartRequest)},
  { 38, -1, sizeof(::zb::dcts::node::zczh::zhpscan::RecordDescriptor)},
  { 50, -1, sizeof(::zb::dcts::node::zczh::zhpscan::RecordRequest)},
  { 57, -1, sizeof(::zb::dcts::node::zczh::zhpscan::QueryRecordReply)},
  { 64, -1, sizeof(::zb::dcts::node::zczh::zhpscan::ReplayStartRequest)},
  { 72, -1, sizeof(::zb::dcts::node::zczh::zhpscan::OperationStatus)},
  { 82, -1, sizeof(::zb::dcts::node::zczh::zhpscan::Result)},
  { 92, -1, sizeof(::zb::dcts::node::zczh::zhpscan::QueryRecordRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_CalibParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_TaskParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_TaskStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_RecordDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_RecordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_QueryRecordReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_ReplayStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_OperationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhpscan::_QueryRecordRequest_default_instance_),
};

const char descriptor_table_protodef_node_2fzczh_2fZhPScan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027node/zczh/ZhPScan.proto\022\031zb.dcts.node."
  "zczh.zhpscan\032\ndcts.proto\032\017node/node.prot"
  "o\032\023node/spectrum.proto\032\021node/replay.prot"
  "o\032\024node/detection.proto\"\342\001\n\nCalibParam\022\024"
  "\n\014antenna_mode\030\001 \001(\005\022\014\n\004gain\030\002 \001(\005\022\032\n\022do"
  "wnconverter_mode\030\003 \001(\005\022$\n\034downconverter_"
  "if_attenuation\030\004 \001(\005\022\024\n\014receive_mode\030\005 \001"
  "(\005\022\036\n\026receive_rf_attenuation\030\006 \001(\005\022\036\n\026re"
  "ceive_if_attenuation\030\007 \001(\005\022\030\n\020attenuatio"
  "n_mode\030\010 \001(\005\"\232\003\n\tTaskParam\0227\n\tfreq_span\030"
  "\001 \001(\0132$.zb.dcts.node.spectrum.FrequencyS"
  "pan\022\013\n\003rbw\030\002 \001(\001\022<\n\014if_bandwidth\030\003 \001(\0162&"
  ".zb.dcts.node.zczh.zhpscan.IFBandWidth\022\027"
  "\n\017result_interval\030\004 \001(\005\022\027\n\017status_interv"
  "al\030\005 \001(\005\022\027\n\017expected_points\030\006 \001(\005\022\025\n\rave"
  "rage_count\030\007 \001(\005\022\030\n\020attenuation_gain\030\010 \001"
  "(\005\022\017\n\007antenna\030\t \001(\005\022\024\n\014receive_mode\030\n \001("
  "\005\022\027\n\017record_interval\030\013 \001(\005\022\021\n\tref_level\030"
  "\014 \001(\001\022:\n\013calib_param\030\r \001(\0132%.zb.dcts.nod"
  "e.zczh.zhpscan.CalibParam\"{\n\020TaskStartRe"
  "quest\022-\n\013task_runner\030\001 \003(\0132\030.zb.dcts.nod"
  "e.NodeDevice\0228\n\ntask_param\030\002 \001(\0132$.zb.dc"
  "ts.node.zczh.zhpscan.TaskParam\"\355\001\n\020Recor"
  "dDescriptor\022\021\n\trecord_id\030\001 \001(\t\022&\n\004from\030\002"
  " \001(\0132\030.zb.dcts.node.NodeDevice\022$\n\ttime_s"
  "pan\030\003 \001(\0132\021.zb.dcts.TimeSpan\0227\n\tfreq_spa"
  "n\030\004 \001(\0132$.zb.dcts.node.spectrum.Frequenc"
  "ySpan\022\024\n\014sweep_points\030\005 \001(\r\022\023\n\013sweep_cou"
  "nt\030\007 \001(\r\022\024\n\014record_count\030\t \001(\r\"c\n\rRecord"
  "Request\022/\n\014task_account\030\001 \001(\0132\031.zb.dcts."
  "node.TaskAccount\022!\n\031times_of_monitor_int"
  "erval\030\002 \001(\005\"\200\001\n\020QueryRecordReply\022%\n\007node"
  "_id\030\001 \001(\0132\024.zb.dcts.node.NodeId\022E\n\020match"
  "ing_records\030\002 \003(\0132+.zb.dcts.node.zczh.zh"
  "pscan.RecordDescriptor\"x\n\022ReplayStartReq"
  "uest\0220\n\treplay_id\030\001 \001(\0132\035.zb.dcts.node.r"
  "eplay.ReplayId\022\027\n\017result_interval\030\004 \001(\005\022"
  "\027\n\017expected_points\030\005 \001(\005\"\335\001\n\017OperationSt"
  "atus\0220\n\016running_device\030\001 \001(\0132\030.zb.dcts.n"
  "ode.NodeDevice\022$\n\ttime_span\030\003 \001(\0132\021.zb.d"
  "cts.TimeSpan\022\031\n\021total_sweep_count\030\005 \001(\r\022"
  "\024\n\014record_count\030\006 \001(\r\022A\n\017threshold_lines"
  "\030\007 \003(\0132(.zb.dcts.node.detection.Threshol"
  "dRefLine\"\361\001\n\006Result\022-\n\006header\030\001 \001(\0132\035.zb"
  ".dcts.node.spectrum.Header\0222\n\rpanorama_v"
  "iew\030\002 \001(\0132\033.zb.dcts.node.spectrum.View\0223"
  "\n\016closeshot_view\030\003 \001(\0132\033.zb.dcts.node.sp"
  "ectrum.View\0227\n\013signal_list\030\004 \001(\0132\".zb.dc"
  "ts.node.detection.SignalList\022\026\n\016peak_amp"
  "litude\030\005 \001(\002\"\244\001\n\022QueryRecordRequest\022/\n\014t"
  "ask_account\030\001 \001(\0132\031.zb.dcts.node.TaskAcc"
  "ount\022$\n\ttime_span\030\003 \001(\0132\021.zb.dcts.TimeSp"
  "an\0227\n\tfreq_span\030\005 \001(\0132$.zb.dcts.node.spe"
  "ctrum.FrequencySpan*\352\001\n\013IFBandWidth\022\013\n\007B"
  "AND_1K\020\000\022\013\n\007BAND_2K\020\001\022\013\n\007BAND_5K\020\002\022\014\n\010BA"
  "ND_10K\020\003\022\014\n\010BAND_20K\020\004\022\014\n\010BAND_50K\020\005\022\r\n\t"
  "BAND_100K\020\006\022\r\n\tBAND_200K\020\007\022\r\n\tBAND_500K\020"
  "\010\022\013\n\007BAND_1M\020\t\022\013\n\007BAND_2M\020\n\022\013\n\007BAND_5M\020\013"
  "\022\014\n\010BAND_10M\020\014\022\014\n\010BAND_20M\020\r\022\014\n\010BAND_40M"
  "\020\016\022\014\n\010BAND_80M\020\0172\314\r\n\016ZhPScanService\022Y\n\rR"
  "ealtimeStart\022+.zb.dcts.node.zczh.zhpscan"
  ".TaskStartRequest\032\031.zb.dcts.node.TaskAcc"
  "ount\"\000\022K\n\021GetRealtimeResult\022\017.zb.dcts.Ta"
  "skId\032!.zb.dcts.node.zczh.zhpscan.Result\""
  "\0000\001\022R\n\013RecordStart\022(.zb.dcts.node.zczh.z"
  "hpscan.RecordRequest\032\027.zb.dcts.node.Node"
  "Reply\"\000\022B\n\nRecordStop\022\031.zb.dcts.node.Tas"
  "kAccount\032\027.zb.dcts.node.NodeReply\"\000\022:\n\014R"
  "ealtimeStop\022\017.zb.dcts.TaskId\032\027.zb.dcts.n"
  "ode.NodeReply\"\000\022T\n\021GetRealtimeStatus\022\017.z"
  "b.dcts.TaskId\032*.zb.dcts.node.zczh.zhpsca"
  "n.OperationStatus\"\0000\001\022\\\n\017ReplayTaskStart"
  "\022,.zb.dcts.node.replay.CreateReplayTaskR"
  "equest\032\031.zb.dcts.node.TaskAccount\"\000\022s\n\021R"
  "eplayRecordQuery\022-.zb.dcts.node.zczh.zhp"
  "scan.QueryRecordRequest\032+.zb.dcts.node.z"
  "czh.zhpscan.QueryRecordReply\"\0000\001\022W\n\013Repl"
  "ayStart\022-.zb.dcts.node.zczh.zhpscan.Repl"
  "ayStartRequest\032\027.zb.dcts.node.NodeReply\""
  "\000\022W\n\017GetReplayResult\022\035.zb.dcts.node.repl"
  "ay.ReplayId\032!.zb.dcts.node.zczh.zhpscan."
  "Result\"\0000\001\022F\n\nReplayStop\022\035.zb.dcts.node."
  "replay.ReplayId\032\027.zb.dcts.node.NodeReply"
  "\"\000\022M\n\014ReplayAdjust\022\".zb.dcts.node.replay"
  ".AdjustRequest\032\027.zb.dcts.node.NodeReply\""
  "\000\022<\n\016ReplayTaskStop\022\017.zb.dcts.TaskId\032\027.z"
  "b.dcts.node.NodeReply\"\000\022M\n\nZoomInOpen\022$."
  "zb.dcts.node.spectrum.ZoomInRequest\032\027.zb"
  ".dcts.node.NodeReply\"\000\022C\n\013ZoomInClose\022\031."
  "zb.dcts.node.TaskAccount\032\027.zb.dcts.node."
  "NodeReply\"\000\022Q\n\014DataHoldOpen\022&.zb.dcts.no"
  "de.spectrum.DataHoldRequest\032\027.zb.dcts.no"
  "de.NodeReply\"\000\022R\n\rDataHoldReset\022&.zb.dct"
  "s.node.spectrum.DataHoldRequest\032\027.zb.dct"
  "s.node.NodeReply\"\000\022R\n\rDataHoldClose\022&.zb"
  ".dcts.node.spectrum.DataHoldRequest\032\027.zb"
  ".dcts.node.NodeReply\"\000\022T\n\rDetectionOpen\022"
  "(.zb.dcts.node.detection.DetectionReques"
  "t\032\027.zb.dcts.node.NodeReply\"\000\022F\n\016Detectio"
  "nClose\022\031.zb.dcts.node.TaskAccount\032\027.zb.d"
  "cts.node.NodeReply\"\000\022a\n\026SetSignalDetailK"
  "eeping\022,.zb.dcts.node.detection.DetailKe"
  "epingRequest\032\027.zb.dcts.node.NodeReply\"\000b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fzczh_2fZhPScan_2eproto_deps[5] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_node_2fdetection_2eproto,
  &::descriptor_table_node_2fnode_2eproto,
  &::descriptor_table_node_2freplay_2eproto,
  &::descriptor_table_node_2fspectrum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fzczh_2fZhPScan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fzczh_2fZhPScan_2eproto = {
  false, false, 4127, descriptor_table_protodef_node_2fzczh_2fZhPScan_2eproto, "node/zczh/ZhPScan.proto", 
  &descriptor_table_node_2fzczh_2fZhPScan_2eproto_once, descriptor_table_node_2fzczh_2fZhPScan_2eproto_deps, 5, 10,
  schemas, file_default_instances, TableStruct_node_2fzczh_2fZhPScan_2eproto::offsets,
  file_level_metadata_node_2fzczh_2fZhPScan_2eproto, file_level_enum_descriptors_node_2fzczh_2fZhPScan_2eproto, file_level_service_descriptors_node_2fzczh_2fZhPScan_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhPScan_2eproto);
  return descriptor_table_node_2fzczh_2fZhPScan_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fzczh_2fZhPScan_2eproto(&descriptor_table_node_2fzczh_2fZhPScan_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhpscan {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IFBandWidth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhPScan_2eproto);
  return file_level_enum_descriptors_node_2fzczh_2fZhPScan_2eproto[0];
}
bool IFBandWidth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CalibParam::_Internal {
 public:
};

CalibParam::CalibParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.CalibParam)
}
CalibParam::CalibParam(const CalibParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&antenna_mode_, &from.antenna_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&attenuation_mode_) -
    reinterpret_cast<char*>(&antenna_mode_)) + sizeof(attenuation_mode_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.CalibParam)
}

void CalibParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&antenna_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attenuation_mode_) -
    reinterpret_cast<char*>(&antenna_mode_)) + sizeof(attenuation_mode_));
}

CalibParam::~CalibParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.CalibParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalibParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CalibParam::ArenaDtor(void* object) {
  CalibParam* _this = reinterpret_cast< CalibParam* >(object);
  (void)_this;
}
void CalibParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalibParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CalibParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.CalibParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&antenna_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attenuation_mode_) -
      reinterpret_cast<char*>(&antenna_mode_)) + sizeof(attenuation_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalibParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 antenna_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          antenna_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 downconverter_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          downconverter_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 downconverter_if_attenuation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          downconverter_if_attenuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          receive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_rf_attenuation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          receive_rf_attenuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_if_attenuation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          receive_if_attenuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          attenuation_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.CalibParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 antenna_mode = 1;
  if (this->antenna_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_antenna_mode(), target);
  }

  // int32 gain = 2;
  if (this->gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gain(), target);
  }

  // int32 downconverter_mode = 3;
  if (this->downconverter_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_downconverter_mode(), target);
  }

  // int32 downconverter_if_attenuation = 4;
  if (this->downconverter_if_attenuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_downconverter_if_attenuation(), target);
  }

  // int32 receive_mode = 5;
  if (this->receive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_receive_mode(), target);
  }

  // int32 receive_rf_attenuation = 6;
  if (this->receive_rf_attenuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_receive_rf_attenuation(), target);
  }

  // int32 receive_if_attenuation = 7;
  if (this->receive_if_attenuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_receive_if_attenuation(), target);
  }

  // int32 attenuation_mode = 8;
  if (this->attenuation_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_attenuation_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.CalibParam)
  return target;
}

size_t CalibParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.CalibParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 antenna_mode = 1;
  if (this->antenna_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna_mode());
  }

  // int32 gain = 2;
  if (this->gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gain());
  }

  // int32 downconverter_mode = 3;
  if (this->downconverter_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_downconverter_mode());
  }

  // int32 downconverter_if_attenuation = 4;
  if (this->downconverter_if_attenuation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_downconverter_if_attenuation());
  }

  // int32 receive_mode = 5;
  if (this->receive_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_mode());
  }

  // int32 receive_rf_attenuation = 6;
  if (this->receive_rf_attenuation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_rf_attenuation());
  }

  // int32 receive_if_attenuation = 7;
  if (this->receive_if_attenuation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_if_attenuation());
  }

  // int32 attenuation_mode = 8;
  if (this->attenuation_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.CalibParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.CalibParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.CalibParam)
    MergeFrom(*source);
  }
}

void CalibParam::MergeFrom(const CalibParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.CalibParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.antenna_mode() != 0) {
    _internal_set_antenna_mode(from._internal_antenna_mode());
  }
  if (from.gain() != 0) {
    _internal_set_gain(from._internal_gain());
  }
  if (from.downconverter_mode() != 0) {
    _internal_set_downconverter_mode(from._internal_downconverter_mode());
  }
  if (from.downconverter_if_attenuation() != 0) {
    _internal_set_downconverter_if_attenuation(from._internal_downconverter_if_attenuation());
  }
  if (from.receive_mode() != 0) {
    _internal_set_receive_mode(from._internal_receive_mode());
  }
  if (from.receive_rf_attenuation() != 0) {
    _internal_set_receive_rf_attenuation(from._internal_receive_rf_attenuation());
  }
  if (from.receive_if_attenuation() != 0) {
    _internal_set_receive_if_attenuation(from._internal_receive_if_attenuation());
  }
  if (from.attenuation_mode() != 0) {
    _internal_set_attenuation_mode(from._internal_attenuation_mode());
  }
}

void CalibParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.CalibParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibParam::CopyFrom(const CalibParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.CalibParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibParam::IsInitialized() const {
  return true;
}

void CalibParam::InternalSwap(CalibParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibParam, attenuation_mode_)
      + sizeof(CalibParam::attenuation_mode_)
      - PROTOBUF_FIELD_OFFSET(CalibParam, antenna_mode_)>(
          reinterpret_cast<char*>(&antenna_mode_),
          reinterpret_cast<char*>(&other->antenna_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskParam::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& freq_span(const TaskParam* msg);
  static const ::zb::dcts::node::zczh::zhpscan::CalibParam& calib_param(const TaskParam* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
TaskParam::_Internal::freq_span(const TaskParam* msg) {
  return *msg->freq_span_;
}
const ::zb::dcts::node::zczh::zhpscan::CalibParam&
TaskParam::_Internal::calib_param(const TaskParam* msg) {
  return *msg->calib_param_;
}
void TaskParam::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
TaskParam::TaskParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.TaskParam)
}
TaskParam::TaskParam(const TaskParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  if (from._internal_has_calib_param()) {
    calib_param_ = new ::zb::dcts::node::zczh::zhpscan::CalibParam(*from.calib_param_);
  } else {
    calib_param_ = nullptr;
  }
  ::memcpy(&rbw_, &from.rbw_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_interval_) -
    reinterpret_cast<char*>(&rbw_)) + sizeof(record_interval_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.TaskParam)
}

void TaskParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&freq_span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_interval_) -
    reinterpret_cast<char*>(&freq_span_)) + sizeof(record_interval_));
}

TaskParam::~TaskParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.TaskParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
  if (this != internal_default_instance()) delete calib_param_;
}

void TaskParam::ArenaDtor(void* object) {
  TaskParam* _this = reinterpret_cast< TaskParam* >(object);
  (void)_this;
}
void TaskParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.TaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  if (GetArena() == nullptr && calib_param_ != nullptr) {
    delete calib_param_;
  }
  calib_param_ = nullptr;
  ::memset(&rbw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_interval_) -
      reinterpret_cast<char*>(&rbw_)) + sizeof(record_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rbw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          rbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhpscan.IFBandWidth if_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_if_bandwidth(static_cast<::zb::dcts::node::zczh::zhpscan::IFBandWidth>(val));
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expected_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          expected_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 average_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          average_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_gain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          receive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 record_interval = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          record_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ref_level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          ref_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhpscan.CalibParam calib_param = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_calib_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.TaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_span(this), target, stream);
  }

  // double rbw = 2;
  if (!(this->rbw() <= 0 && this->rbw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rbw(), target);
  }

  // .zb.dcts.node.zczh.zhpscan.IFBandWidth if_bandwidth = 3;
  if (this->if_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_if_bandwidth(), target);
  }

  // int32 result_interval = 4;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result_interval(), target);
  }

  // int32 status_interval = 5;
  if (this->status_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status_interval(), target);
  }

  // int32 expected_points = 6;
  if (this->expected_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_expected_points(), target);
  }

  // int32 average_count = 7;
  if (this->average_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_average_count(), target);
  }

  // int32 attenuation_gain = 8;
  if (this->attenuation_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_attenuation_gain(), target);
  }

  // int32 antenna = 9;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_antenna(), target);
  }

  // int32 receive_mode = 10;
  if (this->receive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_receive_mode(), target);
  }

  // int32 record_interval = 11;
  if (this->record_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_record_interval(), target);
  }

  // double ref_level = 12;
  if (!(this->ref_level() <= 0 && this->ref_level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_ref_level(), target);
  }

  // .zb.dcts.node.zczh.zhpscan.CalibParam calib_param = 13;
  if (this->has_calib_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::calib_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.TaskParam)
  return target;
}

size_t TaskParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.TaskParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // .zb.dcts.node.zczh.zhpscan.CalibParam calib_param = 13;
  if (this->has_calib_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calib_param_);
  }

  // double rbw = 2;
  if (!(this->rbw() <= 0 && this->rbw() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.node.zczh.zhpscan.IFBandWidth if_bandwidth = 3;
  if (this->if_bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_if_bandwidth());
  }

  // int32 result_interval = 4;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  // int32 status_interval = 5;
  if (this->status_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_interval());
  }

  // int32 expected_points = 6;
  if (this->expected_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expected_points());
  }

  // int32 average_count = 7;
  if (this->average_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_count());
  }

  // int32 attenuation_gain = 8;
  if (this->attenuation_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_gain());
  }

  // int32 antenna = 9;
  if (this->antenna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  // int32 receive_mode = 10;
  if (this->receive_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_mode());
  }

  // double ref_level = 12;
  if (!(this->ref_level() <= 0 && this->ref_level() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 record_interval = 11;
  if (this->record_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_record_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.TaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.TaskParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.TaskParam)
    MergeFrom(*source);
  }
}

void TaskParam::MergeFrom(const TaskParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.TaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (from.has_calib_param()) {
    _internal_mutable_calib_param()->::zb::dcts::node::zczh::zhpscan::CalibParam::MergeFrom(from._internal_calib_param());
  }
  if (!(from.rbw() <= 0 && from.rbw() >= 0)) {
    _internal_set_rbw(from._internal_rbw());
  }
  if (from.if_bandwidth() != 0) {
    _internal_set_if_bandwidth(from._internal_if_bandwidth());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
  if (from.status_interval() != 0) {
    _internal_set_status_interval(from._internal_status_interval());
  }
  if (from.expected_points() != 0) {
    _internal_set_expected_points(from._internal_expected_points());
  }
  if (from.average_count() != 0) {
    _internal_set_average_count(from._internal_average_count());
  }
  if (from.attenuation_gain() != 0) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
  if (from.receive_mode() != 0) {
    _internal_set_receive_mode(from._internal_receive_mode());
  }
  if (!(from.ref_level() <= 0 && from.ref_level() >= 0)) {
    _internal_set_ref_level(from._internal_ref_level());
  }
  if (from.record_interval() != 0) {
    _internal_set_record_interval(from._internal_record_interval());
  }
}

void TaskParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.TaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskParam::CopyFrom(const TaskParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.TaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskParam::IsInitialized() const {
  return true;
}

void TaskParam::InternalSwap(TaskParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskParam, record_interval_)
      + sizeof(TaskParam::record_interval_)
      - PROTOBUF_FIELD_OFFSET(TaskParam, freq_span_)>(
          reinterpret_cast<char*>(&freq_span_),
          reinterpret_cast<char*>(&other->freq_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskStartRequest::_Internal {
 public:
  static const ::zb::dcts::node::zczh::zhpscan::TaskParam& task_param(const TaskStartRequest* msg);
};

const ::zb::dcts::node::zczh::zhpscan::TaskParam&
TaskStartRequest::_Internal::task_param(const TaskStartRequest* msg) {
  return *msg->task_param_;
}
void TaskStartRequest::clear_task_runner() {
  task_runner_.Clear();
}
TaskStartRequest::TaskStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_runner_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
}
TaskStartRequest::TaskStartRequest(const TaskStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_runner_(from.task_runner_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_param()) {
    task_param_ = new ::zb::dcts::node::zczh::zhpscan::TaskParam(*from.task_param_);
  } else {
    task_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
}

void TaskStartRequest::SharedCtor() {
task_param_ = nullptr;
}

TaskStartRequest::~TaskStartRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_param_;
}

void TaskStartRequest::ArenaDtor(void* object) {
  TaskStartRequest* _this = reinterpret_cast< TaskStartRequest* >(object);
  (void)_this;
}
void TaskStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_runner_.Clear();
  if (GetArena() == nullptr && task_param_ != nullptr) {
    delete task_param_;
  }
  task_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.NodeDevice task_runner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_runner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhpscan.TaskParam task_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_runner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_task_runner(i), target, stream);
  }

  // .zb.dcts.node.zczh.zhpscan.TaskParam task_param = 2;
  if (this->has_task_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
  return target;
}

size_t TaskStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  total_size += 1UL * this->_internal_task_runner_size();
  for (const auto& msg : this->task_runner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.zczh.zhpscan.TaskParam task_param = 2;
  if (this->has_task_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
    MergeFrom(*source);
  }
}

void TaskStartRequest::MergeFrom(const TaskStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_runner_.MergeFrom(from.task_runner_);
  if (from.has_task_param()) {
    _internal_mutable_task_param()->::zb::dcts::node::zczh::zhpscan::TaskParam::MergeFrom(from._internal_task_param());
  }
}

void TaskStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStartRequest::CopyFrom(const TaskStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStartRequest::IsInitialized() const {
  return true;
}

void TaskStartRequest::InternalSwap(TaskStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_runner_.InternalSwap(&other->task_runner_);
  swap(task_param_, other->task_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecordDescriptor::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& from(const RecordDescriptor* msg);
  static const ::zb::dcts::TimeSpan& time_span(const RecordDescriptor* msg);
  static const ::zb::dcts::node::spectrum::FrequencySpan& freq_span(const RecordDescriptor* msg);
};

const ::zb::dcts::node::NodeDevice&
RecordDescriptor::_Internal::from(const RecordDescriptor* msg) {
  return *msg->from_;
}
const ::zb::dcts::TimeSpan&
RecordDescriptor::_Internal::time_span(const RecordDescriptor* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::node::spectrum::FrequencySpan&
RecordDescriptor::_Internal::freq_span(const RecordDescriptor* msg) {
  return *msg->freq_span_;
}
void RecordDescriptor::clear_from() {
  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void RecordDescriptor::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void RecordDescriptor::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
RecordDescriptor::RecordDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
}
RecordDescriptor::RecordDescriptor(const RecordDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  if (from._internal_has_from()) {
    from_ = new ::zb::dcts::node::NodeDevice(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  ::memcpy(&sweep_points_, &from.sweep_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&sweep_points_)) + sizeof(record_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
}

void RecordDescriptor::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&from_)) + sizeof(record_count_));
}

RecordDescriptor::~RecordDescriptor() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete freq_span_;
}

void RecordDescriptor::ArenaDtor(void* object) {
  RecordDescriptor* _this = reinterpret_cast< RecordDescriptor* >(object);
  (void)_this;
}
void RecordDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty();
  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  ::memset(&sweep_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_count_) -
      reinterpret_cast<char*>(&sweep_points_)) + sizeof(record_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string record_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.NodeDevice from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.FrequencySpan freq_span = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sweep_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          record_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_record_id(), target);
  }

  // .zb.dcts.node.NodeDevice from = 2;
  if (this->has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 4;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::freq_span(this), target, stream);
  }

  // uint32 sweep_points = 5;
  if (this->sweep_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sweep_points(), target);
  }

  // uint32 sweep_count = 7;
  if (this->sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sweep_count(), target);
  }

  // uint32 record_count = 9;
  if (this->record_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_record_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
  return target;
}

size_t RecordDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.node.NodeDevice from = 2;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 4;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // uint32 sweep_points = 5;
  if (this->sweep_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_points());
  }

  // uint32 sweep_count = 7;
  if (this->sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_count());
  }

  // uint32 record_count = 9;
  if (this->record_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
    MergeFrom(*source);
  }
}

void RecordDescriptor::MergeFrom(const RecordDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_from()) {
    _internal_mutable_from()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (from.sweep_points() != 0) {
    _internal_set_sweep_points(from._internal_sweep_points());
  }
  if (from.sweep_count() != 0) {
    _internal_set_sweep_count(from._internal_sweep_count());
  }
  if (from.record_count() != 0) {
    _internal_set_record_count(from._internal_record_count());
  }
}

void RecordDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordDescriptor::CopyFrom(const RecordDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordDescriptor::IsInitialized() const {
  return true;
}

void RecordDescriptor::InternalSwap(RecordDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordDescriptor, record_count_)
      + sizeof(RecordDescriptor::record_count_)
      - PROTOBUF_FIELD_OFFSET(RecordDescriptor, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecordRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const RecordRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
RecordRequest::_Internal::task_account(const RecordRequest* msg) {
  return *msg->task_account_;
}
void RecordRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
RecordRequest::RecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.RecordRequest)
}
RecordRequest::RecordRequest(const RecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  times_of_monitor_interval_ = from.times_of_monitor_interval_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.RecordRequest)
}

void RecordRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&times_of_monitor_interval_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(times_of_monitor_interval_));
}

RecordRequest::~RecordRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.RecordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
}

void RecordRequest::ArenaDtor(void* object) {
  RecordRequest* _this = reinterpret_cast< RecordRequest* >(object);
  (void)_this;
}
void RecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.RecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  times_of_monitor_interval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times_of_monitor_interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_of_monitor_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.RecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // int32 times_of_monitor_interval = 2;
  if (this->times_of_monitor_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times_of_monitor_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.RecordRequest)
  return target;
}

size_t RecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.RecordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // int32 times_of_monitor_interval = 2;
  if (this->times_of_monitor_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times_of_monitor_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.RecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.RecordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.RecordRequest)
    MergeFrom(*source);
  }
}

void RecordRequest::MergeFrom(const RecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.RecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.times_of_monitor_interval() != 0) {
    _internal_set_times_of_monitor_interval(from._internal_times_of_monitor_interval());
  }
}

void RecordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.RecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordRequest::CopyFrom(const RecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.RecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRequest::IsInitialized() const {
  return true;
}

void RecordRequest::InternalSwap(RecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordRequest, times_of_monitor_interval_)
      + sizeof(RecordRequest::times_of_monitor_interval_)
      - PROTOBUF_FIELD_OFFSET(RecordRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryRecordReply::_Internal {
 public:
  static const ::zb::dcts::node::NodeId& node_id(const QueryRecordReply* msg);
};

const ::zb::dcts::node::NodeId&
QueryRecordReply::_Internal::node_id(const QueryRecordReply* msg) {
  return *msg->node_id_;
}
void QueryRecordReply::clear_node_id() {
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
}
QueryRecordReply::QueryRecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matching_records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
}
QueryRecordReply::QueryRecordReply(const QueryRecordReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matching_records_(from.matching_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node_id()) {
    node_id_ = new ::zb::dcts::node::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
}

void QueryRecordReply::SharedCtor() {
node_id_ = nullptr;
}

QueryRecordReply::~QueryRecordReply() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRecordReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_id_;
}

void QueryRecordReply::ArenaDtor(void* object) {
  QueryRecordReply* _this = reinterpret_cast< QueryRecordReply* >(object);
  (void)_this;
}
void QueryRecordReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRecordReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRecordReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matching_records_.Clear();
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRecordReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeId node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.zczh.zhpscan.RecordDescriptor matching_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matching_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRecordReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_id(this), target, stream);
  }

  // repeated .zb.dcts.node.zczh.zhpscan.RecordDescriptor matching_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matching_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_matching_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
  return target;
}

size_t QueryRecordReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.zczh.zhpscan.RecordDescriptor matching_records = 2;
  total_size += 1UL * this->_internal_matching_records_size();
  for (const auto& msg : this->matching_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRecordReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRecordReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRecordReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
    MergeFrom(*source);
  }
}

void QueryRecordReply::MergeFrom(const QueryRecordReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matching_records_.MergeFrom(from.matching_records_);
  if (from.has_node_id()) {
    _internal_mutable_node_id()->::zb::dcts::node::NodeId::MergeFrom(from._internal_node_id());
  }
}

void QueryRecordReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRecordReply::CopyFrom(const QueryRecordReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRecordReply::IsInitialized() const {
  return true;
}

void QueryRecordReply::InternalSwap(QueryRecordReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matching_records_.InternalSwap(&other->matching_records_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRecordReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayStartRequest::_Internal {
 public:
  static const ::zb::dcts::node::replay::ReplayId& replay_id(const ReplayStartRequest* msg);
};

const ::zb::dcts::node::replay::ReplayId&
ReplayStartRequest::_Internal::replay_id(const ReplayStartRequest* msg) {
  return *msg->replay_id_;
}
void ReplayStartRequest::clear_replay_id() {
  if (GetArena() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
ReplayStartRequest::ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
}
ReplayStartRequest::ReplayStartRequest(const ReplayStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::zb::dcts::node::replay::ReplayId(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  ::memcpy(&result_interval_, &from.result_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&expected_points_) -
    reinterpret_cast<char*>(&result_interval_)) + sizeof(expected_points_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
}

void ReplayStartRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&replay_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expected_points_) -
    reinterpret_cast<char*>(&replay_id_)) + sizeof(expected_points_));
}

ReplayStartRequest::~ReplayStartRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete replay_id_;
}

void ReplayStartRequest::ArenaDtor(void* object) {
  ReplayStartRequest* _this = reinterpret_cast< ReplayStartRequest* >(object);
  (void)_this;
}
void ReplayStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplayStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  ::memset(&result_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_points_) -
      reinterpret_cast<char*>(&result_interval_)) + sizeof(expected_points_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.replay.ReplayId replay_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expected_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expected_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::replay_id(this), target, stream);
  }

  // int32 result_interval = 4;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result_interval(), target);
  }

  // int32 expected_points = 5;
  if (this->expected_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_expected_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
  return target;
}

size_t ReplayStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  // int32 result_interval = 4;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  // int32 expected_points = 5;
  if (this->expected_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expected_points());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
    MergeFrom(*source);
  }
}

void ReplayStartRequest::MergeFrom(const ReplayStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::zb::dcts::node::replay::ReplayId::MergeFrom(from._internal_replay_id());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
  if (from.expected_points() != 0) {
    _internal_set_expected_points(from._internal_expected_points());
  }
}

void ReplayStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayStartRequest::CopyFrom(const ReplayStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayStartRequest::IsInitialized() const {
  return true;
}

void ReplayStartRequest::InternalSwap(ReplayStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayStartRequest, expected_points_)
      + sizeof(ReplayStartRequest::expected_points_)
      - PROTOBUF_FIELD_OFFSET(ReplayStartRequest, replay_id_)>(
          reinterpret_cast<char*>(&replay_id_),
          reinterpret_cast<char*>(&other->replay_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationStatus::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& running_device(const OperationStatus* msg);
  static const ::zb::dcts::TimeSpan& time_span(const OperationStatus* msg);
};

const ::zb::dcts::node::NodeDevice&
OperationStatus::_Internal::running_device(const OperationStatus* msg) {
  return *msg->running_device_;
}
const ::zb::dcts::TimeSpan&
OperationStatus::_Internal::time_span(const OperationStatus* msg) {
  return *msg->time_span_;
}
void OperationStatus::clear_running_device() {
  if (GetArena() == nullptr && running_device_ != nullptr) {
    delete running_device_;
  }
  running_device_ = nullptr;
}
void OperationStatus::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void OperationStatus::clear_threshold_lines() {
  threshold_lines_.Clear();
}
OperationStatus::OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  threshold_lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.OperationStatus)
}
OperationStatus::OperationStatus(const OperationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      threshold_lines_(from.threshold_lines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_running_device()) {
    running_device_ = new ::zb::dcts::node::NodeDevice(*from.running_device_);
  } else {
    running_device_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  ::memcpy(&total_sweep_count_, &from.total_sweep_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&total_sweep_count_)) + sizeof(record_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.OperationStatus)
}

void OperationStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&running_device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&running_device_)) + sizeof(record_count_));
}

OperationStatus::~OperationStatus() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.OperationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete running_device_;
  if (this != internal_default_instance()) delete time_span_;
}

void OperationStatus::ArenaDtor(void* object) {
  OperationStatus* _this = reinterpret_cast< OperationStatus* >(object);
  (void)_this;
}
void OperationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.OperationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_lines_.Clear();
  if (GetArena() == nullptr && running_device_ != nullptr) {
    delete running_device_;
  }
  running_device_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  ::memset(&total_sweep_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_count_) -
      reinterpret_cast<char*>(&total_sweep_count_)) + sizeof(record_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeDevice running_device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_running_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_sweep_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          record_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threshold_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.OperationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeDevice running_device = 1;
  if (this->has_running_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::running_device(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // uint32 total_sweep_count = 5;
  if (this->total_sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_total_sweep_count(), target);
  }

  // uint32 record_count = 6;
  if (this->record_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_record_count(), target);
  }

  // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_threshold_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_threshold_lines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.OperationStatus)
  return target;
}

size_t OperationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.OperationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
  total_size += 1UL * this->_internal_threshold_lines_size();
  for (const auto& msg : this->threshold_lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.NodeDevice running_device = 1;
  if (this->has_running_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *running_device_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // uint32 total_sweep_count = 5;
  if (this->total_sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_sweep_count());
  }

  // uint32 record_count = 6;
  if (this->record_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.OperationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.OperationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.OperationStatus)
    MergeFrom(*source);
  }
}

void OperationStatus::MergeFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.OperationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threshold_lines_.MergeFrom(from.threshold_lines_);
  if (from.has_running_device()) {
    _internal_mutable_running_device()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_running_device());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.total_sweep_count() != 0) {
    _internal_set_total_sweep_count(from._internal_total_sweep_count());
  }
  if (from.record_count() != 0) {
    _internal_set_record_count(from._internal_record_count());
  }
}

void OperationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationStatus::CopyFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStatus::IsInitialized() const {
  return true;
}

void OperationStatus::InternalSwap(OperationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  threshold_lines_.InternalSwap(&other->threshold_lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStatus, record_count_)
      + sizeof(OperationStatus::record_count_)
      - PROTOBUF_FIELD_OFFSET(OperationStatus, running_device_)>(
          reinterpret_cast<char*>(&running_device_),
          reinterpret_cast<char*>(&other->running_device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Result::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::Header& header(const Result* msg);
  static const ::zb::dcts::node::spectrum::View& panorama_view(const Result* msg);
  static const ::zb::dcts::node::spectrum::View& closeshot_view(const Result* msg);
  static const ::zb::dcts::node::detection::SignalList& signal_list(const Result* msg);
};

const ::zb::dcts::node::spectrum::Header&
Result::_Internal::header(const Result* msg) {
  return *msg->header_;
}
const ::zb::dcts::node::spectrum::View&
Result::_Internal::panorama_view(const Result* msg) {
  return *msg->panorama_view_;
}
const ::zb::dcts::node::spectrum::View&
Result::_Internal::closeshot_view(const Result* msg) {
  return *msg->closeshot_view_;
}
const ::zb::dcts::node::detection::SignalList&
Result::_Internal::signal_list(const Result* msg) {
  return *msg->signal_list_;
}
void Result::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void Result::clear_panorama_view() {
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
}
void Result::clear_closeshot_view() {
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
}
void Result::clear_signal_list() {
  if (GetArena() == nullptr && signal_list_ != nullptr) {
    delete signal_list_;
  }
  signal_list_ = nullptr;
}
Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::node::spectrum::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_panorama_view()) {
    panorama_view_ = new ::zb::dcts::node::spectrum::View(*from.panorama_view_);
  } else {
    panorama_view_ = nullptr;
  }
  if (from._internal_has_closeshot_view()) {
    closeshot_view_ = new ::zb::dcts::node::spectrum::View(*from.closeshot_view_);
  } else {
    closeshot_view_ = nullptr;
  }
  if (from._internal_has_signal_list()) {
    signal_list_ = new ::zb::dcts::node::detection::SignalList(*from.signal_list_);
  } else {
    signal_list_ = nullptr;
  }
  peak_amplitude_ = from.peak_amplitude_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.Result)
}

void Result::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&peak_amplitude_) -
    reinterpret_cast<char*>(&header_)) + sizeof(peak_amplitude_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete panorama_view_;
  if (this != internal_default_instance()) delete closeshot_view_;
  if (this != internal_default_instance()) delete signal_list_;
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
  if (GetArena() == nullptr && signal_list_ != nullptr) {
    delete signal_list_;
  }
  signal_list_ = nullptr;
  peak_amplitude_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.View panorama_view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_panorama_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.View closeshot_view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_closeshot_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.SignalList signal_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float peak_amplitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          peak_amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.node.spectrum.View panorama_view = 2;
  if (this->has_panorama_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::panorama_view(this), target, stream);
  }

  // .zb.dcts.node.spectrum.View closeshot_view = 3;
  if (this->has_closeshot_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::closeshot_view(this), target, stream);
  }

  // .zb.dcts.node.detection.SignalList signal_list = 4;
  if (this->has_signal_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::signal_list(this), target, stream);
  }

  // float peak_amplitude = 5;
  if (!(this->peak_amplitude() <= 0 && this->peak_amplitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_peak_amplitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.node.spectrum.View panorama_view = 2;
  if (this->has_panorama_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *panorama_view_);
  }

  // .zb.dcts.node.spectrum.View closeshot_view = 3;
  if (this->has_closeshot_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *closeshot_view_);
  }

  // .zb.dcts.node.detection.SignalList signal_list = 4;
  if (this->has_signal_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_list_);
  }

  // float peak_amplitude = 5;
  if (!(this->peak_amplitude() <= 0 && this->peak_amplitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::node::spectrum::Header::MergeFrom(from._internal_header());
  }
  if (from.has_panorama_view()) {
    _internal_mutable_panorama_view()->::zb::dcts::node::spectrum::View::MergeFrom(from._internal_panorama_view());
  }
  if (from.has_closeshot_view()) {
    _internal_mutable_closeshot_view()->::zb::dcts::node::spectrum::View::MergeFrom(from._internal_closeshot_view());
  }
  if (from.has_signal_list()) {
    _internal_mutable_signal_list()->::zb::dcts::node::detection::SignalList::MergeFrom(from._internal_signal_list());
  }
  if (!(from.peak_amplitude() <= 0 && from.peak_amplitude() >= 0)) {
    _internal_set_peak_amplitude(from._internal_peak_amplitude());
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Result, peak_amplitude_)
      + sizeof(Result::peak_amplitude_)
      - PROTOBUF_FIELD_OFFSET(Result, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryRecordRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const QueryRecordRequest* msg);
  static const ::zb::dcts::TimeSpan& time_span(const QueryRecordRequest* msg);
  static const ::zb::dcts::node::spectrum::FrequencySpan& freq_span(const QueryRecordRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
QueryRecordRequest::_Internal::task_account(const QueryRecordRequest* msg) {
  return *msg->task_account_;
}
const ::zb::dcts::TimeSpan&
QueryRecordRequest::_Internal::time_span(const QueryRecordRequest* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::node::spectrum::FrequencySpan&
QueryRecordRequest::_Internal::freq_span(const QueryRecordRequest* msg) {
  return *msg->freq_span_;
}
void QueryRecordRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
void QueryRecordRequest::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void QueryRecordRequest::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
QueryRecordRequest::QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
}
QueryRecordRequest::QueryRecordRequest(const QueryRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
}

void QueryRecordRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&freq_span_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(freq_span_));
}

QueryRecordRequest::~QueryRecordRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete freq_span_;
}

void QueryRecordRequest::ArenaDtor(void* object) {
  QueryRecordRequest* _this = reinterpret_cast< QueryRecordRequest* >(object);
  (void)_this;
}
void QueryRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRecordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::freq_span(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
  return target;
}

size_t QueryRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRecordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRecordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRecordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
    MergeFrom(*source);
  }
}

void QueryRecordRequest::MergeFrom(const QueryRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
}

void QueryRecordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRecordRequest::CopyFrom(const QueryRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRecordRequest::IsInitialized() const {
  return true;
}

void QueryRecordRequest::InternalSwap(QueryRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRecordRequest, freq_span_)
      + sizeof(QueryRecordRequest::freq_span_)
      - PROTOBUF_FIELD_OFFSET(QueryRecordRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRecordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zhpscan
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::CalibParam* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::CalibParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::CalibParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::TaskParam* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::TaskParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::TaskParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::TaskStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::TaskStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::RecordDescriptor* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::RecordDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::RecordDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::RecordRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::RecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::RecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::QueryRecordReply* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::OperationStatus* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::OperationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::OperationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::Result* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
