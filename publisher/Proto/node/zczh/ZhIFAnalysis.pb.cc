// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/zczh/ZhIFAnalysis.proto

#include "node/zczh/ZhIFAnalysis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIFAnalysis {
constexpr TaskParam::TaskParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : span_(nullptr)
  , if_bandwidth_(0)

  , result_interval_(0)
  , status_interval_(0)
  , expected_points_(0)
  , average_count_(0)
  , attenuation_gain_(0)
  , antenna_(0)
  , receive_mode_(0)
  , mode_(0)
  , value_(0)
  , type_(0)

  , demod_type_(0)

  , ref_level_(0)
  , iq_sweep_count_(0){}
struct TaskParamDefaultTypeInternal {
  constexpr TaskParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskParamDefaultTypeInternal() {}
  union {
    TaskParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskParamDefaultTypeInternal _TaskParam_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_from_(nullptr)
  , time_span_(nullptr)
  , device_position_(nullptr)
  , sequence_number_(0u)
  , sweep_count_(0u){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr TransmissionResult::TransmissionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trans_type_(0)
{}
struct TransmissionResultDefaultTypeInternal {
  constexpr TransmissionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransmissionResultDefaultTypeInternal() {}
  union {
    TransmissionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransmissionResultDefaultTypeInternal _TransmissionResult_default_instance_;
constexpr AudioBlock::AudioBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pcm_bitstream_()
  , _pcm_bitstream_cached_byte_size_(){}
struct AudioBlockDefaultTypeInternal {
  constexpr AudioBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioBlockDefaultTypeInternal() {}
  union {
    AudioBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioBlockDefaultTypeInternal _AudioBlock_default_instance_;
constexpr AudioResult::AudioResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocks_(){}
struct AudioResultDefaultTypeInternal {
  constexpr AudioResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioResultDefaultTypeInternal() {}
  union {
    AudioResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioResultDefaultTypeInternal _AudioResult_default_instance_;
constexpr Result::Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , spectrum_(nullptr)
  , recognize_result_(nullptr)
  , trans_result_(nullptr)
  , audio_result_(nullptr)
  , signal_list_(nullptr){}
struct ResultDefaultTypeInternal {
  constexpr ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;
constexpr RecordDescriptor::RecordDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(nullptr)
  , time_span_(nullptr)
  , analysis_band_(nullptr)
  , record_count_(0u){}
struct RecordDescriptorDefaultTypeInternal {
  constexpr RecordDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordDescriptorDefaultTypeInternal() {}
  union {
    RecordDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordDescriptorDefaultTypeInternal _RecordDescriptor_default_instance_;
constexpr QueryRecordReply::QueryRecordReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matching_records_()
  , node_id_(nullptr){}
struct QueryRecordReplyDefaultTypeInternal {
  constexpr QueryRecordReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryRecordReplyDefaultTypeInternal() {}
  union {
    QueryRecordReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRecordReplyDefaultTypeInternal _QueryRecordReply_default_instance_;
constexpr ReplayStartRequest::ReplayStartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replay_id_(nullptr)
  , result_interval_(0)
  , expected_points_(0){}
struct ReplayStartRequestDefaultTypeInternal {
  constexpr ReplayStartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplayStartRequestDefaultTypeInternal() {}
  union {
    ReplayStartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplayStartRequestDefaultTypeInternal _ReplayStartRequest_default_instance_;
constexpr QueryRecordRequest::QueryRecordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , time_span_(nullptr)
  , freq_span_(nullptr){}
struct QueryRecordRequestDefaultTypeInternal {
  constexpr QueryRecordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryRecordRequestDefaultTypeInternal() {}
  union {
    QueryRecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRecordRequestDefaultTypeInternal _QueryRecordRequest_default_instance_;
constexpr OperationStatus::OperationStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threshold_lines_()
  , running_device_(nullptr)
  , time_span_(nullptr)
  , total_sweep_count_(0u)
  , record_count_(0u){}
struct OperationStatusDefaultTypeInternal {
  constexpr OperationStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationStatusDefaultTypeInternal() {}
  union {
    OperationStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
constexpr RecogniseRequest::RecogniseRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_runner_()
  , param_(nullptr){}
struct RecogniseRequestDefaultTypeInternal {
  constexpr RecogniseRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecogniseRequestDefaultTypeInternal() {}
  union {
    RecogniseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecogniseRequestDefaultTypeInternal _RecogniseRequest_default_instance_;
constexpr RecogniseParam::RecogniseParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : span_(nullptr)
  , if_bandwidth_(0)
  , type_(0)
{}
struct RecogniseParamDefaultTypeInternal {
  constexpr RecogniseParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecogniseParamDefaultTypeInternal() {}
  union {
    RecogniseParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecogniseParamDefaultTypeInternal _RecogniseParam_default_instance_;
constexpr ChangeRequest::ChangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , recognise_param_(nullptr){}
struct ChangeRequestDefaultTypeInternal {
  constexpr ChangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeRequestDefaultTypeInternal() {}
  union {
    ChangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeRequestDefaultTypeInternal _ChangeRequest_default_instance_;
}  // namespace zhIFAnalysis
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fzczh_2fZhIFAnalysis_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fzczh_2fZhIFAnalysis_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fzczh_2fZhIFAnalysis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, if_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, result_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, status_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, expected_points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, average_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, antenna_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, receive_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, value_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, demod_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, ref_level_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam, iq_sweep_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Header, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Header, sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Header, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult, trans_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock, pcm_bitstream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::AudioResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::AudioResult, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Result, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Result, spectrum_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Result, recognize_result_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Result, trans_result_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Result, audio_result_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::Result, signal_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor, from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor, analysis_band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor, record_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply, node_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply, matching_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, replay_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, result_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, expected_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest, freq_span_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus, running_device_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus, total_sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus, record_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus, threshold_lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, task_runner_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam, span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam, if_bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, recognise_param_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::TaskParam)},
  { 20, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::Header)},
  { 31, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult)},
  { 37, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock)},
  { 43, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::AudioResult)},
  { 49, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::Result)},
  { 60, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor)},
  { 70, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply)},
  { 77, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest)},
  { 85, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest)},
  { 93, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus)},
  { 103, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest)},
  { 110, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam)},
  { 118, -1, sizeof(::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_TaskParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_TransmissionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_AudioBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_AudioResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_RecordDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_QueryRecordReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_ReplayStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_QueryRecordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_OperationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_RecogniseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_RecogniseParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhIFAnalysis::_ChangeRequest_default_instance_),
};

const char descriptor_table_protodef_node_2fzczh_2fZhIFAnalysis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034node/zczh/ZhIFAnalysis.proto\022\036zb.dcts."
  "node.zczh.zhIFAnalysis\032\ndcts.proto\032\017node"
  "/node.proto\032\025node/modulation.proto\032\023node"
  "/spectrum.proto\032\024node/detection.proto\032\021n"
  "ode/replay.proto\"\351\003\n\tTaskParam\0222\n\004span\030\001"
  " \001(\0132$.zb.dcts.node.spectrum.FrequencySp"
  "an\022A\n\014IF_bandwidth\030\002 \001(\0162+.zb.dcts.node."
  "zczh.zhIFAnalysis.IFBandWidth\022\027\n\017result_"
  "interval\030\003 \001(\005\022\027\n\017status_interval\030\004 \001(\005\022"
  "\027\n\017expected_points\030\005 \001(\005\022\025\n\raverage_coun"
  "t\030\006 \001(\005\022\030\n\020attenuation_gain\030\007 \001(\005\022\017\n\007ant"
  "enna\030\010 \001(\005\022\024\n\014receive_mode\030\t \001(\005\022\014\n\004mode"
  "\030\n \001(\005\022\r\n\005value\030\013 \001(\005\022;\n\004type\030\014 \001(\0162-.zb"
  ".dcts.node.zczh.zhIFAnalysis.RecogniseTy"
  "pe\022=\n\ndemod_type\030\r \001(\0162).zb.dcts.node.zc"
  "zh.zhIFAnalysis.DemodType\022\021\n\tref_level\030\016"
  " \001(\001\022\026\n\016iq_sweep_count\030\017 \001(\005\"\312\001\n\006Header\022"
  "-\n\013result_from\030\001 \001(\0132\030.zb.dcts.node.Node"
  "Device\022\021\n\trecord_id\030\002 \001(\t\022\027\n\017sequence_nu"
  "mber\030\003 \001(\r\022\023\n\013sweep_count\030\004 \001(\r\022$\n\ttime_"
  "span\030\005 \001(\0132\021.zb.dcts.TimeSpan\022*\n\017device_"
  "position\030\006 \001(\0132\021.zb.dcts.Position\"Z\n\022Tra"
  "nsmissionResult\022D\n\ntrans_type\030\001 \001(\01620.zb"
  ".dcts.node.zczh.zhIFAnalysis.Transmissio"
  "nType\"#\n\nAudioBlock\022\025\n\rpcm_bitstream\030\001 \003"
  "(\005\"I\n\013AudioResult\022:\n\006blocks\030\001 \003(\0132*.zb.d"
  "cts.node.zczh.zhIFAnalysis.AudioBlock\"\371\002"
  "\n\006Result\0226\n\006header\030\001 \001(\0132&.zb.dcts.node."
  "zczh.zhIFAnalysis.Header\022-\n\010spectrum\030\002 \001"
  "(\0132\033.zb.dcts.node.spectrum.View\022B\n\020recog"
  "nize_result\030\003 \001(\0132(.zb.dcts.node.modulat"
  "ion.RecognizeResult\022H\n\014trans_result\030\004 \001("
  "\01322.zb.dcts.node.zczh.zhIFAnalysis.Trans"
  "missionResult\022A\n\014audio_Result\030\005 \001(\0132+.zb"
  ".dcts.node.zczh.zhIFAnalysis.AudioResult"
  "\0227\n\013signal_list\030\006 \001(\0132\".zb.dcts.node.det"
  "ection.SignalList\"\303\001\n\020RecordDescriptor\022\021"
  "\n\trecord_id\030\001 \001(\t\022&\n\004from\030\002 \001(\0132\030.zb.dct"
  "s.node.NodeDevice\022$\n\ttime_span\030\003 \001(\0132\021.z"
  "b.dcts.TimeSpan\0228\n\ranalysis_band\030\004 \001(\0132!"
  ".zb.dcts.node.spectrum.SignalBand\022\024\n\014rec"
  "ord_count\030\005 \001(\r\"\205\001\n\020QueryRecordReply\022%\n\007"
  "node_id\030\001 \001(\0132\024.zb.dcts.node.NodeId\022J\n\020m"
  "atching_records\030\002 \003(\01320.zb.dcts.node.zcz"
  "h.zhIFAnalysis.RecordDescriptor\"x\n\022Repla"
  "yStartRequest\0220\n\treplay_id\030\001 \001(\0132\035.zb.dc"
  "ts.node.replay.ReplayId\022\027\n\017result_interv"
  "al\030\004 \001(\005\022\027\n\017expected_points\030\005 \001(\005\"\244\001\n\022Qu"
  "eryRecordRequest\022/\n\014task_account\030\001 \001(\0132\031"
  ".zb.dcts.node.TaskAccount\022$\n\ttime_span\030\003"
  " \001(\0132\021.zb.dcts.TimeSpan\0227\n\tfreq_span\030\005 \001"
  "(\0132$.zb.dcts.node.spectrum.FrequencySpan"
  "\"\335\001\n\017OperationStatus\0220\n\016running_device\030\001"
  " \001(\0132\030.zb.dcts.node.NodeDevice\022$\n\ttime_s"
  "pan\030\003 \001(\0132\021.zb.dcts.TimeSpan\022\031\n\021total_sw"
  "eep_count\030\005 \001(\r\022\024\n\014record_count\030\006 \001(\r\022A\n"
  "\017threshold_lines\030\007 \003(\0132(.zb.dcts.node.de"
  "tection.ThresholdRefLine\"{\n\020RecogniseReq"
  "uest\022-\n\013task_runner\030\001 \003(\0132\030.zb.dcts.node"
  ".NodeDevice\0228\n\005param\030\002 \001(\0132).zb.dcts.nod"
  "e.zczh.zhIFAnalysis.TaskParam\"\227\001\n\016Recogn"
  "iseParam\022;\n\004type\030\001 \001(\0162-.zb.dcts.node.zc"
  "zh.zhIFAnalysis.RecogniseType\0222\n\004span\030\002 "
  "\001(\0132$.zb.dcts.node.spectrum.FrequencySpa"
  "n\022\024\n\014IF_bandwidth\030\003 \001(\001\"\211\001\n\rChangeReques"
  "t\022/\n\014task_account\030\001 \001(\0132\031.zb.dcts.node.T"
  "askAccount\022G\n\017recognise_param\030\002 \001(\0132..zb"
  ".dcts.node.zczh.zhIFAnalysis.RecognisePa"
  "ram*\352\001\n\013IFBandWidth\022\013\n\007BAND_1K\020\000\022\013\n\007BAND"
  "_2K\020\001\022\013\n\007BAND_5K\020\002\022\014\n\010BAND_10K\020\003\022\014\n\010BAND"
  "_20K\020\004\022\014\n\010BAND_50K\020\005\022\r\n\tBAND_100K\020\006\022\r\n\tB"
  "AND_200K\020\007\022\r\n\tBAND_500K\020\010\022\013\n\007BAND_1M\020\t\022\013"
  "\n\007BAND_2M\020\n\022\013\n\007BAND_5M\020\013\022\014\n\010BAND_10M\020\014\022\014"
  "\n\010BAND_20M\020\r\022\014\n\010BAND_40M\020\016\022\014\n\010BAND_80M\020\017"
  "*\215\001\n\tDemodType\022\025\n\021Demodulation_none\020\000\022\023\n"
  "\017Demodulation_AM\020\001\022\023\n\017Demodulation_FM\020\002\022"
  "\023\n\017Demodulation_CW\020\003\022\024\n\020Demodulation_LSB"
  "\020\004\022\024\n\020Demodulation_USB\020\005*_\n\rRecogniseTyp"
  "e\022\016\n\nMODULATION\020\000\022\020\n\014TRANSMISSION\020\001\022\021\n\rH"
  "OPPFREQUENCY\020\002\022\t\n\005DEMOD\020\003\022\016\n\nIQ_ACQUIRE\020"
  "\004*\212\001\n\020TransmissionType\022\017\n\013UNKNOWN_TSR\020\000\022"
  "\007\n\003GSM\020\001\022\014\n\010CDMA2000\020\002\022\t\n\005WCDMA\020\003\022\014\n\010TD_"
  "SCDMA\020\004\022\r\n\tFourG_TDD\020\005\022\r\n\tFourG_FDD\020\006\022\t\n"
  "\005FiveG\020\007\022\014\n\010DoingRec\020\0102\304\r\n\023ZhIFAnalysisS"
  "ervice\022_\n\016StartRecognise\0220.zb.dcts.node."
  "zczh.zhIFAnalysis.RecogniseRequest\032\031.zb."
  "dcts.node.TaskAccount\"\000\022Q\n\022GetRecogniseR"
  "esult\022\017.zb.dcts.TaskId\032&.zb.dcts.node.zc"
  "zh.zhIFAnalysis.Result\"\0000\001\022;\n\rStopRecogn"
  "ise\022\017.zb.dcts.TaskId\032\027.zb.dcts.node.Node"
  "Reply\"\000\022[\n\017ChangeRecognise\022-.zb.dcts.nod"
  "e.zczh.zhIFAnalysis.ChangeRequest\032\027.zb.d"
  "cts.node.NodeReply\"\000\022Y\n\021GetRealtimeStatu"
  "s\022\017.zb.dcts.TaskId\032/.zb.dcts.node.zczh.z"
  "hIFAnalysis.OperationStatus\"\0000\001\022\\\n\017Repla"
  "yTaskStart\022,.zb.dcts.node.replay.CreateR"
  "eplayTaskRequest\032\031.zb.dcts.node.TaskAcco"
  "unt\"\000\022}\n\021ReplayRecordQuery\0222.zb.dcts.nod"
  "e.zczh.zhIFAnalysis.QueryRecordRequest\0320"
  ".zb.dcts.node.zczh.zhIFAnalysis.QueryRec"
  "ordReply\"\0000\001\022\\\n\013ReplayStart\0222.zb.dcts.no"
  "de.zczh.zhIFAnalysis.ReplayStartRequest\032"
  "\027.zb.dcts.node.NodeReply\"\000\022d\n\027GetReplayS"
  "pectrumResult\022\035.zb.dcts.node.replay.Repl"
  "ayId\032&.zb.dcts.node.zczh.zhIFAnalysis.Re"
  "sult\"\0000\001\022F\n\nReplayStop\022\035.zb.dcts.node.re"
  "play.ReplayId\032\027.zb.dcts.node.NodeReply\"\000"
  "\022M\n\014ReplayAdjust\022\".zb.dcts.node.replay.A"
  "djustRequest\032\027.zb.dcts.node.NodeReply\"\000\022"
  "<\n\016ReplayTaskStop\022\017.zb.dcts.TaskId\032\027.zb."
  "dcts.node.NodeReply\"\000\022M\n\nZoomInOpen\022$.zb"
  ".dcts.node.spectrum.ZoomInRequest\032\027.zb.d"
  "cts.node.NodeReply\"\000\022C\n\013ZoomInClose\022\031.zb"
  ".dcts.node.TaskAccount\032\027.zb.dcts.node.No"
  "deReply\"\000\022Q\n\014DataHoldOpen\022&.zb.dcts.node"
  ".spectrum.DataHoldRequest\032\027.zb.dcts.node"
  ".NodeReply\"\000\022R\n\rDataHoldReset\022&.zb.dcts."
  "node.spectrum.DataHoldRequest\032\027.zb.dcts."
  "node.NodeReply\"\000\022R\n\rDataHoldClose\022&.zb.d"
  "cts.node.spectrum.DataHoldRequest\032\027.zb.d"
  "cts.node.NodeReply\"\000\022T\n\rDetectionOpen\022(."
  "zb.dcts.node.detection.DetectionRequest\032"
  "\027.zb.dcts.node.NodeReply\"\000\022F\n\016DetectionC"
  "lose\022\031.zb.dcts.node.TaskAccount\032\027.zb.dct"
  "s.node.NodeReply\"\000\022a\n\026SetSignalDetailKee"
  "ping\022,.zb.dcts.node.detection.DetailKeep"
  "ingRequest\032\027.zb.dcts.node.NodeReply\"\000b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_deps[6] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_node_2fdetection_2eproto,
  &::descriptor_table_node_2fmodulation_2eproto,
  &::descriptor_table_node_2fnode_2eproto,
  &::descriptor_table_node_2freplay_2eproto,
  &::descriptor_table_node_2fspectrum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto = {
  false, false, 5085, descriptor_table_protodef_node_2fzczh_2fZhIFAnalysis_2eproto, "node/zczh/ZhIFAnalysis.proto", 
  &descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_once, descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_deps, 6, 14,
  schemas, file_default_instances, TableStruct_node_2fzczh_2fZhIFAnalysis_2eproto::offsets,
  file_level_metadata_node_2fzczh_2fZhIFAnalysis_2eproto, file_level_enum_descriptors_node_2fzczh_2fZhIFAnalysis_2eproto, file_level_service_descriptors_node_2fzczh_2fZhIFAnalysis_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto);
  return descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fzczh_2fZhIFAnalysis_2eproto(&descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIFAnalysis {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IFBandWidth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto);
  return file_level_enum_descriptors_node_2fzczh_2fZhIFAnalysis_2eproto[0];
}
bool IFBandWidth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DemodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto);
  return file_level_enum_descriptors_node_2fzczh_2fZhIFAnalysis_2eproto[1];
}
bool DemodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecogniseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto);
  return file_level_enum_descriptors_node_2fzczh_2fZhIFAnalysis_2eproto[2];
}
bool RecogniseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransmissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhIFAnalysis_2eproto);
  return file_level_enum_descriptors_node_2fzczh_2fZhIFAnalysis_2eproto[3];
}
bool TransmissionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TaskParam::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& span(const TaskParam* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
TaskParam::_Internal::span(const TaskParam* msg) {
  return *msg->span_;
}
void TaskParam::clear_span() {
  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
}
TaskParam::TaskParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
}
TaskParam::TaskParam(const TaskParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_span()) {
    span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.span_);
  } else {
    span_ = nullptr;
  }
  ::memcpy(&if_bandwidth_, &from.if_bandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&iq_sweep_count_) -
    reinterpret_cast<char*>(&if_bandwidth_)) + sizeof(iq_sweep_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
}

void TaskParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iq_sweep_count_) -
    reinterpret_cast<char*>(&span_)) + sizeof(iq_sweep_count_));
}

TaskParam::~TaskParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete span_;
}

void TaskParam::ArenaDtor(void* object) {
  TaskParam* _this = reinterpret_cast< TaskParam* >(object);
  (void)_this;
}
void TaskParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  ::memset(&if_bandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iq_sweep_count_) -
      reinterpret_cast<char*>(&if_bandwidth_)) + sizeof(iq_sweep_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencySpan span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIFAnalysis.IFBandWidth IF_bandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_if_bandwidth(static_cast<::zb::dcts::node::zczh::zhIFAnalysis::IFBandWidth>(val));
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expected_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expected_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 average_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          average_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_gain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          receive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIFAnalysis.DemodType demod_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_demod_type(static_cast<::zb::dcts::node::zczh::zhIFAnalysis::DemodType>(val));
        } else goto handle_unusual;
        continue;
      // double ref_level = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          ref_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 iq_sweep_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          iq_sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  if (this->has_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::span(this), target, stream);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.IFBandWidth IF_bandwidth = 2;
  if (this->if_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_if_bandwidth(), target);
  }

  // int32 result_interval = 3;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result_interval(), target);
  }

  // int32 status_interval = 4;
  if (this->status_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status_interval(), target);
  }

  // int32 expected_points = 5;
  if (this->expected_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_expected_points(), target);
  }

  // int32 average_count = 6;
  if (this->average_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_average_count(), target);
  }

  // int32 attenuation_gain = 7;
  if (this->attenuation_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_attenuation_gain(), target);
  }

  // int32 antenna = 8;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_antenna(), target);
  }

  // int32 receive_mode = 9;
  if (this->receive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_receive_mode(), target);
  }

  // int32 mode = 10;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_mode(), target);
  }

  // int32 value = 11;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_value(), target);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 12;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_type(), target);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.DemodType demod_type = 13;
  if (this->demod_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_demod_type(), target);
  }

  // double ref_level = 14;
  if (!(this->ref_level() <= 0 && this->ref_level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_ref_level(), target);
  }

  // int32 iq_sweep_count = 15;
  if (this->iq_sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_iq_sweep_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
  return target;
}

size_t TaskParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  if (this->has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.IFBandWidth IF_bandwidth = 2;
  if (this->if_bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_if_bandwidth());
  }

  // int32 result_interval = 3;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  // int32 status_interval = 4;
  if (this->status_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_interval());
  }

  // int32 expected_points = 5;
  if (this->expected_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expected_points());
  }

  // int32 average_count = 6;
  if (this->average_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_count());
  }

  // int32 attenuation_gain = 7;
  if (this->attenuation_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_gain());
  }

  // int32 antenna = 8;
  if (this->antenna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  // int32 receive_mode = 9;
  if (this->receive_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_mode());
  }

  // int32 mode = 10;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 value = 11;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.DemodType demod_type = 13;
  if (this->demod_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_demod_type());
  }

  // double ref_level = 14;
  if (!(this->ref_level() <= 0 && this->ref_level() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 iq_sweep_count = 15;
  if (this->iq_sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iq_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
    MergeFrom(*source);
  }
}

void TaskParam::MergeFrom(const TaskParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    _internal_mutable_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_span());
  }
  if (from.if_bandwidth() != 0) {
    _internal_set_if_bandwidth(from._internal_if_bandwidth());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
  if (from.status_interval() != 0) {
    _internal_set_status_interval(from._internal_status_interval());
  }
  if (from.expected_points() != 0) {
    _internal_set_expected_points(from._internal_expected_points());
  }
  if (from.average_count() != 0) {
    _internal_set_average_count(from._internal_average_count());
  }
  if (from.attenuation_gain() != 0) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
  if (from.receive_mode() != 0) {
    _internal_set_receive_mode(from._internal_receive_mode());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.demod_type() != 0) {
    _internal_set_demod_type(from._internal_demod_type());
  }
  if (!(from.ref_level() <= 0 && from.ref_level() >= 0)) {
    _internal_set_ref_level(from._internal_ref_level());
  }
  if (from.iq_sweep_count() != 0) {
    _internal_set_iq_sweep_count(from._internal_iq_sweep_count());
  }
}

void TaskParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskParam::CopyFrom(const TaskParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.TaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskParam::IsInitialized() const {
  return true;
}

void TaskParam::InternalSwap(TaskParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskParam, iq_sweep_count_)
      + sizeof(TaskParam::iq_sweep_count_)
      - PROTOBUF_FIELD_OFFSET(TaskParam, span_)>(
          reinterpret_cast<char*>(&span_),
          reinterpret_cast<char*>(&other->span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Header::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& result_from(const Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const Header* msg);
  static const ::zb::dcts::Position& device_position(const Header* msg);
};

const ::zb::dcts::node::NodeDevice&
Header::_Internal::result_from(const Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
Header::_Internal::time_span(const Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
Header::_Internal::device_position(const Header* msg) {
  return *msg->device_position_;
}
void Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::node::NodeDevice(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.Header)
}

void Header::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&result_from_)) + sizeof(sweep_count_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty();
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_count_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeDevice result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string record_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.zczh.zhIFAnalysis.Header.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeDevice result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.zczh.zhIFAnalysis.Header.record_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_record_id(), target);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sweep_count(), target);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.node.NodeDevice result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.sweep_count() != 0) {
    _internal_set_sweep_count(from._internal_sweep_count());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, sweep_count_)
      + sizeof(Header::sweep_count_)
      - PROTOBUF_FIELD_OFFSET(Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransmissionResult::_Internal {
 public:
};

TransmissionResult::TransmissionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
}
TransmissionResult::TransmissionResult(const TransmissionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trans_type_ = from.trans_type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
}

void TransmissionResult::SharedCtor() {
trans_type_ = 0;
}

TransmissionResult::~TransmissionResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransmissionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransmissionResult::ArenaDtor(void* object) {
  TransmissionResult* _this = reinterpret_cast< TransmissionResult* >(object);
  (void)_this;
}
void TransmissionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransmissionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransmissionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trans_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransmissionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.zczh.zhIFAnalysis.TransmissionType trans_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trans_type(static_cast<::zb::dcts::node::zczh::zhIFAnalysis::TransmissionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransmissionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.zczh.zhIFAnalysis.TransmissionType trans_type = 1;
  if (this->trans_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trans_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
  return target;
}

size_t TransmissionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.zczh.zhIFAnalysis.TransmissionType trans_type = 1;
  if (this->trans_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trans_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransmissionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TransmissionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransmissionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
    MergeFrom(*source);
  }
}

void TransmissionResult::MergeFrom(const TransmissionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trans_type() != 0) {
    _internal_set_trans_type(from._internal_trans_type());
  }
}

void TransmissionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmissionResult::CopyFrom(const TransmissionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmissionResult::IsInitialized() const {
  return true;
}

void TransmissionResult::InternalSwap(TransmissionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(trans_type_, other->trans_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransmissionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioBlock::_Internal {
 public:
};

AudioBlock::AudioBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pcm_bitstream_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
}
AudioBlock::AudioBlock(const AudioBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pcm_bitstream_(from.pcm_bitstream_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
}

void AudioBlock::SharedCtor() {
}

AudioBlock::~AudioBlock() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioBlock::ArenaDtor(void* object) {
  AudioBlock* _this = reinterpret_cast< AudioBlock* >(object);
  (void)_this;
}
void AudioBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pcm_bitstream_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 pcm_bitstream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pcm_bitstream(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 pcm_bitstream = 1;
  {
    int byte_size = _pcm_bitstream_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_pcm_bitstream(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
  return target;
}

size_t AudioBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pcm_bitstream = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pcm_bitstream_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pcm_bitstream_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
    MergeFrom(*source);
  }
}

void AudioBlock::MergeFrom(const AudioBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pcm_bitstream_.MergeFrom(from.pcm_bitstream_);
}

void AudioBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioBlock::CopyFrom(const AudioBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.AudioBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioBlock::IsInitialized() const {
  return true;
}

void AudioBlock::InternalSwap(AudioBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pcm_bitstream_.InternalSwap(&other->pcm_bitstream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioResult::_Internal {
 public:
};

AudioResult::AudioResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
}
AudioResult::AudioResult(const AudioResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
}

void AudioResult::SharedCtor() {
}

AudioResult::~AudioResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioResult::ArenaDtor(void* object) {
  AudioResult* _this = reinterpret_cast< AudioResult* >(object);
  (void)_this;
}
void AudioResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.zczh.zhIFAnalysis.AudioBlock blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.zczh.zhIFAnalysis.AudioBlock blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
  return target;
}

size_t AudioResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.zczh.zhIFAnalysis.AudioBlock blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
    MergeFrom(*source);
  }
}

void AudioResult::MergeFrom(const AudioResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
}

void AudioResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioResult::CopyFrom(const AudioResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.AudioResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioResult::IsInitialized() const {
  return true;
}

void AudioResult::InternalSwap(AudioResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Result::_Internal {
 public:
  static const ::zb::dcts::node::zczh::zhIFAnalysis::Header& header(const Result* msg);
  static const ::zb::dcts::node::spectrum::View& spectrum(const Result* msg);
  static const ::zb::dcts::node::modulation::RecognizeResult& recognize_result(const Result* msg);
  static const ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult& trans_result(const Result* msg);
  static const ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult& audio_result(const Result* msg);
  static const ::zb::dcts::node::detection::SignalList& signal_list(const Result* msg);
};

const ::zb::dcts::node::zczh::zhIFAnalysis::Header&
Result::_Internal::header(const Result* msg) {
  return *msg->header_;
}
const ::zb::dcts::node::spectrum::View&
Result::_Internal::spectrum(const Result* msg) {
  return *msg->spectrum_;
}
const ::zb::dcts::node::modulation::RecognizeResult&
Result::_Internal::recognize_result(const Result* msg) {
  return *msg->recognize_result_;
}
const ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult&
Result::_Internal::trans_result(const Result* msg) {
  return *msg->trans_result_;
}
const ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult&
Result::_Internal::audio_result(const Result* msg) {
  return *msg->audio_result_;
}
const ::zb::dcts::node::detection::SignalList&
Result::_Internal::signal_list(const Result* msg) {
  return *msg->signal_list_;
}
void Result::clear_spectrum() {
  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
}
void Result::clear_recognize_result() {
  if (GetArena() == nullptr && recognize_result_ != nullptr) {
    delete recognize_result_;
  }
  recognize_result_ = nullptr;
}
void Result::clear_signal_list() {
  if (GetArena() == nullptr && signal_list_ != nullptr) {
    delete signal_list_;
  }
  signal_list_ = nullptr;
}
Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::node::zczh::zhIFAnalysis::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_spectrum()) {
    spectrum_ = new ::zb::dcts::node::spectrum::View(*from.spectrum_);
  } else {
    spectrum_ = nullptr;
  }
  if (from._internal_has_recognize_result()) {
    recognize_result_ = new ::zb::dcts::node::modulation::RecognizeResult(*from.recognize_result_);
  } else {
    recognize_result_ = nullptr;
  }
  if (from._internal_has_trans_result()) {
    trans_result_ = new ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult(*from.trans_result_);
  } else {
    trans_result_ = nullptr;
  }
  if (from._internal_has_audio_result()) {
    audio_result_ = new ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult(*from.audio_result_);
  } else {
    audio_result_ = nullptr;
  }
  if (from._internal_has_signal_list()) {
    signal_list_ = new ::zb::dcts::node::detection::SignalList(*from.signal_list_);
  } else {
    signal_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.Result)
}

void Result::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signal_list_) -
    reinterpret_cast<char*>(&header_)) + sizeof(signal_list_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete spectrum_;
  if (this != internal_default_instance()) delete recognize_result_;
  if (this != internal_default_instance()) delete trans_result_;
  if (this != internal_default_instance()) delete audio_result_;
  if (this != internal_default_instance()) delete signal_list_;
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
  if (GetArena() == nullptr && recognize_result_ != nullptr) {
    delete recognize_result_;
  }
  recognize_result_ = nullptr;
  if (GetArena() == nullptr && trans_result_ != nullptr) {
    delete trans_result_;
  }
  trans_result_ = nullptr;
  if (GetArena() == nullptr && audio_result_ != nullptr) {
    delete audio_result_;
  }
  audio_result_ = nullptr;
  if (GetArena() == nullptr && signal_list_ != nullptr) {
    delete signal_list_;
  }
  signal_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.zczh.zhIFAnalysis.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.View spectrum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spectrum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.modulation.RecognizeResult recognize_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_recognize_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult trans_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIFAnalysis.AudioResult audio_Result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.SignalList signal_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.zczh.zhIFAnalysis.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.node.spectrum.View spectrum = 2;
  if (this->has_spectrum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spectrum(this), target, stream);
  }

  // .zb.dcts.node.modulation.RecognizeResult recognize_result = 3;
  if (this->has_recognize_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::recognize_result(this), target, stream);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult trans_result = 4;
  if (this->has_trans_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::trans_result(this), target, stream);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.AudioResult audio_Result = 5;
  if (this->has_audio_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::audio_result(this), target, stream);
  }

  // .zb.dcts.node.detection.SignalList signal_list = 6;
  if (this->has_signal_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::signal_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.zczh.zhIFAnalysis.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.node.spectrum.View spectrum = 2;
  if (this->has_spectrum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spectrum_);
  }

  // .zb.dcts.node.modulation.RecognizeResult recognize_result = 3;
  if (this->has_recognize_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recognize_result_);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.TransmissionResult trans_result = 4;
  if (this->has_trans_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trans_result_);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.AudioResult audio_Result = 5;
  if (this->has_audio_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_result_);
  }

  // .zb.dcts.node.detection.SignalList signal_list = 6;
  if (this->has_signal_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::node::zczh::zhIFAnalysis::Header::MergeFrom(from._internal_header());
  }
  if (from.has_spectrum()) {
    _internal_mutable_spectrum()->::zb::dcts::node::spectrum::View::MergeFrom(from._internal_spectrum());
  }
  if (from.has_recognize_result()) {
    _internal_mutable_recognize_result()->::zb::dcts::node::modulation::RecognizeResult::MergeFrom(from._internal_recognize_result());
  }
  if (from.has_trans_result()) {
    _internal_mutable_trans_result()->::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult::MergeFrom(from._internal_trans_result());
  }
  if (from.has_audio_result()) {
    _internal_mutable_audio_result()->::zb::dcts::node::zczh::zhIFAnalysis::AudioResult::MergeFrom(from._internal_audio_result());
  }
  if (from.has_signal_list()) {
    _internal_mutable_signal_list()->::zb::dcts::node::detection::SignalList::MergeFrom(from._internal_signal_list());
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Result, signal_list_)
      + sizeof(Result::signal_list_)
      - PROTOBUF_FIELD_OFFSET(Result, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecordDescriptor::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& from(const RecordDescriptor* msg);
  static const ::zb::dcts::TimeSpan& time_span(const RecordDescriptor* msg);
  static const ::zb::dcts::node::spectrum::SignalBand& analysis_band(const RecordDescriptor* msg);
};

const ::zb::dcts::node::NodeDevice&
RecordDescriptor::_Internal::from(const RecordDescriptor* msg) {
  return *msg->from_;
}
const ::zb::dcts::TimeSpan&
RecordDescriptor::_Internal::time_span(const RecordDescriptor* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::node::spectrum::SignalBand&
RecordDescriptor::_Internal::analysis_band(const RecordDescriptor* msg) {
  return *msg->analysis_band_;
}
void RecordDescriptor::clear_from() {
  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void RecordDescriptor::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void RecordDescriptor::clear_analysis_band() {
  if (GetArena() == nullptr && analysis_band_ != nullptr) {
    delete analysis_band_;
  }
  analysis_band_ = nullptr;
}
RecordDescriptor::RecordDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
}
RecordDescriptor::RecordDescriptor(const RecordDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  if (from._internal_has_from()) {
    from_ = new ::zb::dcts::node::NodeDevice(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_analysis_band()) {
    analysis_band_ = new ::zb::dcts::node::spectrum::SignalBand(*from.analysis_band_);
  } else {
    analysis_band_ = nullptr;
  }
  record_count_ = from.record_count_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
}

void RecordDescriptor::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&from_)) + sizeof(record_count_));
}

RecordDescriptor::~RecordDescriptor() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete analysis_band_;
}

void RecordDescriptor::ArenaDtor(void* object) {
  RecordDescriptor* _this = reinterpret_cast< RecordDescriptor* >(object);
  (void)_this;
}
void RecordDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty();
  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && analysis_band_ != nullptr) {
    delete analysis_band_;
  }
  analysis_band_ = nullptr;
  record_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string record_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.NodeDevice from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.SignalBand analysis_band = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_analysis_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          record_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor.record_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_record_id(), target);
  }

  // .zb.dcts.node.NodeDevice from = 2;
  if (this->has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.node.spectrum.SignalBand analysis_band = 4;
  if (this->has_analysis_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::analysis_band(this), target, stream);
  }

  // uint32 record_count = 5;
  if (this->record_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_record_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
  return target;
}

size_t RecordDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.node.NodeDevice from = 2;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.node.spectrum.SignalBand analysis_band = 4;
  if (this->has_analysis_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *analysis_band_);
  }

  // uint32 record_count = 5;
  if (this->record_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
    MergeFrom(*source);
  }
}

void RecordDescriptor::MergeFrom(const RecordDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_from()) {
    _internal_mutable_from()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_analysis_band()) {
    _internal_mutable_analysis_band()->::zb::dcts::node::spectrum::SignalBand::MergeFrom(from._internal_analysis_band());
  }
  if (from.record_count() != 0) {
    _internal_set_record_count(from._internal_record_count());
  }
}

void RecordDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordDescriptor::CopyFrom(const RecordDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordDescriptor::IsInitialized() const {
  return true;
}

void RecordDescriptor::InternalSwap(RecordDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordDescriptor, record_count_)
      + sizeof(RecordDescriptor::record_count_)
      - PROTOBUF_FIELD_OFFSET(RecordDescriptor, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryRecordReply::_Internal {
 public:
  static const ::zb::dcts::node::NodeId& node_id(const QueryRecordReply* msg);
};

const ::zb::dcts::node::NodeId&
QueryRecordReply::_Internal::node_id(const QueryRecordReply* msg) {
  return *msg->node_id_;
}
void QueryRecordReply::clear_node_id() {
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
}
QueryRecordReply::QueryRecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matching_records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
}
QueryRecordReply::QueryRecordReply(const QueryRecordReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matching_records_(from.matching_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node_id()) {
    node_id_ = new ::zb::dcts::node::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
}

void QueryRecordReply::SharedCtor() {
node_id_ = nullptr;
}

QueryRecordReply::~QueryRecordReply() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRecordReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_id_;
}

void QueryRecordReply::ArenaDtor(void* object) {
  QueryRecordReply* _this = reinterpret_cast< QueryRecordReply* >(object);
  (void)_this;
}
void QueryRecordReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRecordReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRecordReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matching_records_.Clear();
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRecordReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeId node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor matching_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matching_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRecordReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_id(this), target, stream);
  }

  // repeated .zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor matching_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matching_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_matching_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
  return target;
}

size_t QueryRecordReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.zczh.zhIFAnalysis.RecordDescriptor matching_records = 2;
  total_size += 1UL * this->_internal_matching_records_size();
  for (const auto& msg : this->matching_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRecordReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRecordReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRecordReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
    MergeFrom(*source);
  }
}

void QueryRecordReply::MergeFrom(const QueryRecordReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matching_records_.MergeFrom(from.matching_records_);
  if (from.has_node_id()) {
    _internal_mutable_node_id()->::zb::dcts::node::NodeId::MergeFrom(from._internal_node_id());
  }
}

void QueryRecordReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRecordReply::CopyFrom(const QueryRecordReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRecordReply::IsInitialized() const {
  return true;
}

void QueryRecordReply::InternalSwap(QueryRecordReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matching_records_.InternalSwap(&other->matching_records_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRecordReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayStartRequest::_Internal {
 public:
  static const ::zb::dcts::node::replay::ReplayId& replay_id(const ReplayStartRequest* msg);
};

const ::zb::dcts::node::replay::ReplayId&
ReplayStartRequest::_Internal::replay_id(const ReplayStartRequest* msg) {
  return *msg->replay_id_;
}
void ReplayStartRequest::clear_replay_id() {
  if (GetArena() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
ReplayStartRequest::ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
}
ReplayStartRequest::ReplayStartRequest(const ReplayStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::zb::dcts::node::replay::ReplayId(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  ::memcpy(&result_interval_, &from.result_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&expected_points_) -
    reinterpret_cast<char*>(&result_interval_)) + sizeof(expected_points_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
}

void ReplayStartRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&replay_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expected_points_) -
    reinterpret_cast<char*>(&replay_id_)) + sizeof(expected_points_));
}

ReplayStartRequest::~ReplayStartRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete replay_id_;
}

void ReplayStartRequest::ArenaDtor(void* object) {
  ReplayStartRequest* _this = reinterpret_cast< ReplayStartRequest* >(object);
  (void)_this;
}
void ReplayStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplayStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  ::memset(&result_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_points_) -
      reinterpret_cast<char*>(&result_interval_)) + sizeof(expected_points_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.replay.ReplayId replay_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expected_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expected_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::replay_id(this), target, stream);
  }

  // int32 result_interval = 4;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result_interval(), target);
  }

  // int32 expected_points = 5;
  if (this->expected_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_expected_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
  return target;
}

size_t ReplayStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  // int32 result_interval = 4;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  // int32 expected_points = 5;
  if (this->expected_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expected_points());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
    MergeFrom(*source);
  }
}

void ReplayStartRequest::MergeFrom(const ReplayStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::zb::dcts::node::replay::ReplayId::MergeFrom(from._internal_replay_id());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
  if (from.expected_points() != 0) {
    _internal_set_expected_points(from._internal_expected_points());
  }
}

void ReplayStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayStartRequest::CopyFrom(const ReplayStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.ReplayStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayStartRequest::IsInitialized() const {
  return true;
}

void ReplayStartRequest::InternalSwap(ReplayStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayStartRequest, expected_points_)
      + sizeof(ReplayStartRequest::expected_points_)
      - PROTOBUF_FIELD_OFFSET(ReplayStartRequest, replay_id_)>(
          reinterpret_cast<char*>(&replay_id_),
          reinterpret_cast<char*>(&other->replay_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryRecordRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const QueryRecordRequest* msg);
  static const ::zb::dcts::TimeSpan& time_span(const QueryRecordRequest* msg);
  static const ::zb::dcts::node::spectrum::FrequencySpan& freq_span(const QueryRecordRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
QueryRecordRequest::_Internal::task_account(const QueryRecordRequest* msg) {
  return *msg->task_account_;
}
const ::zb::dcts::TimeSpan&
QueryRecordRequest::_Internal::time_span(const QueryRecordRequest* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::node::spectrum::FrequencySpan&
QueryRecordRequest::_Internal::freq_span(const QueryRecordRequest* msg) {
  return *msg->freq_span_;
}
void QueryRecordRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
void QueryRecordRequest::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void QueryRecordRequest::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
QueryRecordRequest::QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
}
QueryRecordRequest::QueryRecordRequest(const QueryRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
}

void QueryRecordRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&freq_span_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(freq_span_));
}

QueryRecordRequest::~QueryRecordRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete freq_span_;
}

void QueryRecordRequest::ArenaDtor(void* object) {
  QueryRecordRequest* _this = reinterpret_cast< QueryRecordRequest* >(object);
  (void)_this;
}
void QueryRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRecordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::freq_span(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
  return target;
}

size_t QueryRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRecordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRecordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRecordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
    MergeFrom(*source);
  }
}

void QueryRecordRequest::MergeFrom(const QueryRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
}

void QueryRecordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRecordRequest::CopyFrom(const QueryRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.QueryRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRecordRequest::IsInitialized() const {
  return true;
}

void QueryRecordRequest::InternalSwap(QueryRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRecordRequest, freq_span_)
      + sizeof(QueryRecordRequest::freq_span_)
      - PROTOBUF_FIELD_OFFSET(QueryRecordRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRecordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationStatus::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& running_device(const OperationStatus* msg);
  static const ::zb::dcts::TimeSpan& time_span(const OperationStatus* msg);
};

const ::zb::dcts::node::NodeDevice&
OperationStatus::_Internal::running_device(const OperationStatus* msg) {
  return *msg->running_device_;
}
const ::zb::dcts::TimeSpan&
OperationStatus::_Internal::time_span(const OperationStatus* msg) {
  return *msg->time_span_;
}
void OperationStatus::clear_running_device() {
  if (GetArena() == nullptr && running_device_ != nullptr) {
    delete running_device_;
  }
  running_device_ = nullptr;
}
void OperationStatus::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void OperationStatus::clear_threshold_lines() {
  threshold_lines_.Clear();
}
OperationStatus::OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  threshold_lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
}
OperationStatus::OperationStatus(const OperationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      threshold_lines_(from.threshold_lines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_running_device()) {
    running_device_ = new ::zb::dcts::node::NodeDevice(*from.running_device_);
  } else {
    running_device_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  ::memcpy(&total_sweep_count_, &from.total_sweep_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&total_sweep_count_)) + sizeof(record_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
}

void OperationStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&running_device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&running_device_)) + sizeof(record_count_));
}

OperationStatus::~OperationStatus() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete running_device_;
  if (this != internal_default_instance()) delete time_span_;
}

void OperationStatus::ArenaDtor(void* object) {
  OperationStatus* _this = reinterpret_cast< OperationStatus* >(object);
  (void)_this;
}
void OperationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_lines_.Clear();
  if (GetArena() == nullptr && running_device_ != nullptr) {
    delete running_device_;
  }
  running_device_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  ::memset(&total_sweep_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_count_) -
      reinterpret_cast<char*>(&total_sweep_count_)) + sizeof(record_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeDevice running_device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_running_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_sweep_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          record_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threshold_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeDevice running_device = 1;
  if (this->has_running_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::running_device(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // uint32 total_sweep_count = 5;
  if (this->total_sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_total_sweep_count(), target);
  }

  // uint32 record_count = 6;
  if (this->record_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_record_count(), target);
  }

  // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_threshold_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_threshold_lines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
  return target;
}

size_t OperationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
  total_size += 1UL * this->_internal_threshold_lines_size();
  for (const auto& msg : this->threshold_lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.NodeDevice running_device = 1;
  if (this->has_running_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *running_device_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // uint32 total_sweep_count = 5;
  if (this->total_sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_sweep_count());
  }

  // uint32 record_count = 6;
  if (this->record_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
    MergeFrom(*source);
  }
}

void OperationStatus::MergeFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threshold_lines_.MergeFrom(from.threshold_lines_);
  if (from.has_running_device()) {
    _internal_mutable_running_device()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_running_device());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.total_sweep_count() != 0) {
    _internal_set_total_sweep_count(from._internal_total_sweep_count());
  }
  if (from.record_count() != 0) {
    _internal_set_record_count(from._internal_record_count());
  }
}

void OperationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationStatus::CopyFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStatus::IsInitialized() const {
  return true;
}

void OperationStatus::InternalSwap(OperationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  threshold_lines_.InternalSwap(&other->threshold_lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStatus, record_count_)
      + sizeof(OperationStatus::record_count_)
      - PROTOBUF_FIELD_OFFSET(OperationStatus, running_device_)>(
          reinterpret_cast<char*>(&running_device_),
          reinterpret_cast<char*>(&other->running_device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecogniseRequest::_Internal {
 public:
  static const ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam& param(const RecogniseRequest* msg);
};

const ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam&
RecogniseRequest::_Internal::param(const RecogniseRequest* msg) {
  return *msg->param_;
}
void RecogniseRequest::clear_task_runner() {
  task_runner_.Clear();
}
RecogniseRequest::RecogniseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_runner_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
}
RecogniseRequest::RecogniseRequest(const RecogniseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_runner_(from.task_runner_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_param()) {
    param_ = new ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam(*from.param_);
  } else {
    param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
}

void RecogniseRequest::SharedCtor() {
param_ = nullptr;
}

RecogniseRequest::~RecogniseRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecogniseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete param_;
}

void RecogniseRequest::ArenaDtor(void* object) {
  RecogniseRequest* _this = reinterpret_cast< RecogniseRequest* >(object);
  (void)_this;
}
void RecogniseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecogniseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecogniseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_runner_.Clear();
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecogniseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.NodeDevice task_runner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_runner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIFAnalysis.TaskParam param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecogniseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_runner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_task_runner(i), target, stream);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.TaskParam param = 2;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
  return target;
}

size_t RecogniseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  total_size += 1UL * this->_internal_task_runner_size();
  for (const auto& msg : this->task_runner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.TaskParam param = 2;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecogniseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecogniseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecogniseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
    MergeFrom(*source);
  }
}

void RecogniseRequest::MergeFrom(const RecogniseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_runner_.MergeFrom(from.task_runner_);
  if (from.has_param()) {
    _internal_mutable_param()->::zb::dcts::node::zczh::zhIFAnalysis::TaskParam::MergeFrom(from._internal_param());
  }
}

void RecogniseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecogniseRequest::CopyFrom(const RecogniseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecogniseRequest::IsInitialized() const {
  return true;
}

void RecogniseRequest::InternalSwap(RecogniseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_runner_.InternalSwap(&other->task_runner_);
  swap(param_, other->param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecogniseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecogniseParam::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& span(const RecogniseParam* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
RecogniseParam::_Internal::span(const RecogniseParam* msg) {
  return *msg->span_;
}
void RecogniseParam::clear_span() {
  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
}
RecogniseParam::RecogniseParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
}
RecogniseParam::RecogniseParam(const RecogniseParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_span()) {
    span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.span_);
  } else {
    span_ = nullptr;
  }
  ::memcpy(&if_bandwidth_, &from.if_bandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&if_bandwidth_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
}

void RecogniseParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&span_)) + sizeof(type_));
}

RecogniseParam::~RecogniseParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecogniseParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete span_;
}

void RecogniseParam::ArenaDtor(void* object) {
  RecogniseParam* _this = reinterpret_cast< RecogniseParam* >(object);
  (void)_this;
}
void RecogniseParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecogniseParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecogniseParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  ::memset(&if_bandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&if_bandwidth_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecogniseParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::node::zczh::zhIFAnalysis::RecogniseType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.FrequencySpan span = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double IF_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          if_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecogniseParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .zb.dcts.node.spectrum.FrequencySpan span = 2;
  if (this->has_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::span(this), target, stream);
  }

  // double IF_bandwidth = 3;
  if (!(this->if_bandwidth() <= 0 && this->if_bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_if_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
  return target;
}

size_t RecogniseParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan span = 2;
  if (this->has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  // double IF_bandwidth = 3;
  if (!(this->if_bandwidth() <= 0 && this->if_bandwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecogniseParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RecogniseParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecogniseParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
    MergeFrom(*source);
  }
}

void RecogniseParam::MergeFrom(const RecogniseParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    _internal_mutable_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_span());
  }
  if (!(from.if_bandwidth() <= 0 && from.if_bandwidth() >= 0)) {
    _internal_set_if_bandwidth(from._internal_if_bandwidth());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RecogniseParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecogniseParam::CopyFrom(const RecogniseParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecogniseParam::IsInitialized() const {
  return true;
}

void RecogniseParam::InternalSwap(RecogniseParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecogniseParam, type_)
      + sizeof(RecogniseParam::type_)
      - PROTOBUF_FIELD_OFFSET(RecogniseParam, span_)>(
          reinterpret_cast<char*>(&span_),
          reinterpret_cast<char*>(&other->span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecogniseParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const ChangeRequest* msg);
  static const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam& recognise_param(const ChangeRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
ChangeRequest::_Internal::task_account(const ChangeRequest* msg) {
  return *msg->task_account_;
}
const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam&
ChangeRequest::_Internal::recognise_param(const ChangeRequest* msg) {
  return *msg->recognise_param_;
}
void ChangeRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
ChangeRequest::ChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
}
ChangeRequest::ChangeRequest(const ChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  if (from._internal_has_recognise_param()) {
    recognise_param_ = new ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam(*from.recognise_param_);
  } else {
    recognise_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
}

void ChangeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recognise_param_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(recognise_param_));
}

ChangeRequest::~ChangeRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
  if (this != internal_default_instance()) delete recognise_param_;
}

void ChangeRequest::ArenaDtor(void* object) {
  ChangeRequest* _this = reinterpret_cast< ChangeRequest* >(object);
  (void)_this;
}
void ChangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  if (GetArena() == nullptr && recognise_param_ != nullptr) {
    delete recognise_param_;
  }
  recognise_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam recognise_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_recognise_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam recognise_param = 2;
  if (this->has_recognise_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::recognise_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
  return target;
}

size_t ChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // .zb.dcts.node.zczh.zhIFAnalysis.RecogniseParam recognise_param = 2;
  if (this->has_recognise_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recognise_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
    MergeFrom(*source);
  }
}

void ChangeRequest::MergeFrom(const ChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.has_recognise_param()) {
    _internal_mutable_recognise_param()->::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam::MergeFrom(from._internal_recognise_param());
  }
}

void ChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRequest::CopyFrom(const ChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhIFAnalysis.ChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRequest::IsInitialized() const {
  return true;
}

void ChangeRequest::InternalSwap(ChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeRequest, recognise_param_)
      + sizeof(ChangeRequest::recognise_param_)
      - PROTOBUF_FIELD_OFFSET(ChangeRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zhIFAnalysis
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::TaskParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::Header* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::TransmissionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::AudioBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::AudioResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::Result* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::RecordDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
