// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/zczh/ZhDirection.proto

#include "node/zczh/ZhDirection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhdirection {
constexpr TaskParam::TaskParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_frequency_(0)
  , if_bandwidth_(0)

  , df_bandwidth_(0)

  , result_interval_(0)
  , status_interval_(0)
  , expected_points_(0)
  , average_count_(0)
  , attenuation_gain_(0)
  , antenna_(0)
  , receive_mode_(0)
  , mode_(0)
  , value_(0)
  , target_count_(0)
  , ref_level_(0)
  , record_interval_(0){}
struct TaskParamDefaultTypeInternal {
  constexpr TaskParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskParamDefaultTypeInternal() {}
  union {
    TaskParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskParamDefaultTypeInternal _TaskParam_default_instance_;
constexpr DirectionRequest::DirectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_runner_()
  , task_param_(nullptr){}
struct DirectionRequestDefaultTypeInternal {
  constexpr DirectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionRequestDefaultTypeInternal() {}
  union {
    DirectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionRequestDefaultTypeInternal _DirectionRequest_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_from_(nullptr)
  , time_span_(nullptr)
  , device_position_(nullptr)
  , sequence_number_(0u)
  , sweep_count_(0u){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr TargetDirection::TargetDirection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_frequency_(0)
  , direction_(0)
  , confidence_(0)
  , amplitude_(0){}
struct TargetDirectionDefaultTypeInternal {
  constexpr TargetDirectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetDirectionDefaultTypeInternal() {}
  union {
    TargetDirection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetDirectionDefaultTypeInternal _TargetDirection_default_instance_;
constexpr Result::Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , target_detection_(nullptr)
  , df_spectrum_(nullptr)
  , signal_list_(nullptr){}
struct ResultDefaultTypeInternal {
  constexpr ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;
constexpr RecordRequest::RecordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , times_of_monitor_interval_(0){}
struct RecordRequestDefaultTypeInternal {
  constexpr RecordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordRequestDefaultTypeInternal() {}
  union {
    RecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordRequestDefaultTypeInternal _RecordRequest_default_instance_;
constexpr RecordDescriptor::RecordDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_span_(nullptr)
  , task_param_(nullptr){}
struct RecordDescriptorDefaultTypeInternal {
  constexpr RecordDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordDescriptorDefaultTypeInternal() {}
  union {
    RecordDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordDescriptorDefaultTypeInternal _RecordDescriptor_default_instance_;
constexpr RecordReply::RecordReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : records_(){}
struct RecordReplyDefaultTypeInternal {
  constexpr RecordReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordReplyDefaultTypeInternal() {}
  union {
    RecordReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordReplyDefaultTypeInternal _RecordReply_default_instance_;
constexpr ReplayStartRequest::ReplayStartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_interval_(0){}
struct ReplayStartRequestDefaultTypeInternal {
  constexpr ReplayStartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplayStartRequestDefaultTypeInternal() {}
  union {
    ReplayStartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplayStartRequestDefaultTypeInternal _ReplayStartRequest_default_instance_;
constexpr PosRequest::PosRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acquire_time_(nullptr){}
struct PosRequestDefaultTypeInternal {
  constexpr PosRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosRequestDefaultTypeInternal() {}
  union {
    PosRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosRequestDefaultTypeInternal _PosRequest_default_instance_;
constexpr PosTaskId::PosTaskId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct PosTaskIdDefaultTypeInternal {
  constexpr PosTaskIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosTaskIdDefaultTypeInternal() {}
  union {
    PosTaskId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosTaskIdDefaultTypeInternal _PosTaskId_default_instance_;
constexpr PosResult::PosResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_position_(nullptr){}
struct PosResultDefaultTypeInternal {
  constexpr PosResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosResultDefaultTypeInternal() {}
  union {
    PosResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosResultDefaultTypeInternal _PosResult_default_instance_;
constexpr OperationStatus::OperationStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threshold_lines_()
  , running_device_(nullptr)
  , time_span_(nullptr)
  , total_sweep_count_(0u)
  , record_count_(0u){}
struct OperationStatusDefaultTypeInternal {
  constexpr OperationStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationStatusDefaultTypeInternal() {}
  union {
    OperationStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
}  // namespace zhdirection
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fzczh_2fZhDirection_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fzczh_2fZhDirection_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fzczh_2fZhDirection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fzczh_2fZhDirection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, if_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, df_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, result_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, status_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, expected_points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, average_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, antenna_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, receive_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, value_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, target_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, record_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TaskParam, ref_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::DirectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::DirectionRequest, task_runner_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::DirectionRequest, task_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Header, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Header, sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Header, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TargetDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TargetDirection, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TargetDirection, direction_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TargetDirection, confidence_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::TargetDirection, amplitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Result, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Result, target_detection_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Result, df_spectrum_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::Result, signal_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::RecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::RecordRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::RecordRequest, times_of_monitor_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::RecordDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::RecordDescriptor, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::RecordDescriptor, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::RecordDescriptor, task_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::RecordReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::RecordReply, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, result_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::PosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::PosRequest, acquire_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::PosTaskId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::PosTaskId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::PosResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::PosResult, target_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::OperationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::OperationStatus, running_device_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::OperationStatus, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::OperationStatus, total_sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::OperationStatus, record_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::zczh::zhdirection::OperationStatus, threshold_lines_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::zczh::zhdirection::TaskParam)},
  { 20, -1, sizeof(::zb::dcts::node::zczh::zhdirection::DirectionRequest)},
  { 27, -1, sizeof(::zb::dcts::node::zczh::zhdirection::Header)},
  { 38, -1, sizeof(::zb::dcts::node::zczh::zhdirection::TargetDirection)},
  { 47, -1, sizeof(::zb::dcts::node::zczh::zhdirection::Result)},
  { 56, -1, sizeof(::zb::dcts::node::zczh::zhdirection::RecordRequest)},
  { 63, -1, sizeof(::zb::dcts::node::zczh::zhdirection::RecordDescriptor)},
  { 71, -1, sizeof(::zb::dcts::node::zczh::zhdirection::RecordReply)},
  { 77, -1, sizeof(::zb::dcts::node::zczh::zhdirection::ReplayStartRequest)},
  { 84, -1, sizeof(::zb::dcts::node::zczh::zhdirection::PosRequest)},
  { 90, -1, sizeof(::zb::dcts::node::zczh::zhdirection::PosTaskId)},
  { 96, -1, sizeof(::zb::dcts::node::zczh::zhdirection::PosResult)},
  { 102, -1, sizeof(::zb::dcts::node::zczh::zhdirection::OperationStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_TaskParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_DirectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_TargetDirection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_RecordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_RecordDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_RecordReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_ReplayStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_PosRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_PosTaskId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_PosResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::zczh::zhdirection::_OperationStatus_default_instance_),
};

const char descriptor_table_protodef_node_2fzczh_2fZhDirection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033node/zczh/ZhDirection.proto\022\035zb.dcts.n"
  "ode.zczh.zhdirection\032\ndcts.proto\032\017node/n"
  "ode.proto\032\023node/spectrum.proto\032\024node/det"
  "ection.proto\032\021node/replay.proto\032\033google/"
  "protobuf/empty.proto\"\253\003\n\tTaskParam\022\030\n\020ce"
  "nter_frequency\030\001 \001(\001\022@\n\014if_bandwidth\030\002 \001"
  "(\0162*.zb.dcts.node.zczh.zhdirection.IFBan"
  "dWidth\022@\n\014df_bandwidth\030\003 \001(\0162*.zb.dcts.n"
  "ode.zczh.zhdirection.DFBandWidth\022\027\n\017resu"
  "lt_interval\030\004 \001(\005\022\027\n\017status_interval\030\005 \001"
  "(\005\022\027\n\017expected_points\030\006 \001(\005\022\025\n\raverage_c"
  "ount\030\007 \001(\005\022\030\n\020attenuation_gain\030\010 \001(\005\022\017\n\007"
  "antenna\030\t \001(\005\022\024\n\014receive_mode\030\n \001(\005\022\014\n\004m"
  "ode\030\013 \001(\005\022\r\n\005value\030\014 \001(\005\022\024\n\014target_count"
  "\030\r \001(\005\022\027\n\017record_interval\030\016 \001(\005\022\021\n\tref_l"
  "evel\030\017 \001(\001\"\177\n\020DirectionRequest\022-\n\013task_r"
  "unner\030\001 \003(\0132\030.zb.dcts.node.NodeDevice\022<\n"
  "\ntask_param\030\002 \001(\0132(.zb.dcts.node.zczh.zh"
  "direction.TaskParam\"\312\001\n\006Header\022-\n\013result"
  "_from\030\001 \001(\0132\030.zb.dcts.node.NodeDevice\022\021\n"
  "\trecord_id\030\002 \001(\t\022\027\n\017sequence_number\030\003 \001("
  "\r\022\023\n\013sweep_count\030\004 \001(\r\022$\n\ttime_span\030\005 \001("
  "\0132\021.zb.dcts.TimeSpan\022*\n\017device_position\030"
  "\006 \001(\0132\021.zb.dcts.Position\"e\n\017TargetDirect"
  "ion\022\030\n\020center_frequency\030\001 \001(\001\022\021\n\tdirecti"
  "on\030\002 \001(\001\022\022\n\nconfidence\030\003 \001(\005\022\021\n\tamplitud"
  "e\030\004 \001(\002\"\364\001\n\006Result\0225\n\006header\030\001 \001(\0132%.zb."
  "dcts.node.zczh.zhdirection.Header\022H\n\020tar"
  "get_detection\030\002 \001(\0132..zb.dcts.node.zczh."
  "zhdirection.TargetDirection\0220\n\013df_spectr"
  "um\030\003 \001(\0132\033.zb.dcts.node.spectrum.View\0227\n"
  "\013signal_list\030\004 \001(\0132\".zb.dcts.node.detect"
  "ion.SignalList\"c\n\rRecordRequest\022/\n\014task_"
  "account\030\001 \001(\0132\031.zb.dcts.node.TaskAccount"
  "\022!\n\031times_of_monitor_interval\030\002 \001(\005\"\211\001\n\020"
  "RecordDescriptor\022\021\n\trecord_id\030\001 \001(\t\022$\n\tt"
  "ime_span\030\002 \001(\0132\021.zb.dcts.TimeSpan\022<\n\ntas"
  "k_param\030\003 \001(\0132(.zb.dcts.node.zczh.zhdire"
  "ction.TaskParam\"O\n\013RecordReply\022@\n\007record"
  "s\030\001 \003(\0132/.zb.dcts.node.zczh.zhdirection."
  "RecordDescriptor\"@\n\022ReplayStartRequest\022\021"
  "\n\trecord_id\030\001 \001(\t\022\027\n\017result_interval\030\002 \001"
  "(\005\"6\n\nPosRequest\022(\n\014acquire_time\030\001 \001(\0132\022"
  ".zb.dcts.Timestamp\"(\n\tPosTaskId\022\033\n\002id\030\001 "
  "\001(\0132\017.zb.dcts.TaskId\"7\n\tPosResult\022*\n\017tar"
  "get_position\030\001 \001(\0132\021.zb.dcts.Position\"\335\001"
  "\n\017OperationStatus\0220\n\016running_device\030\001 \001("
  "\0132\030.zb.dcts.node.NodeDevice\022$\n\ttime_span"
  "\030\003 \001(\0132\021.zb.dcts.TimeSpan\022\031\n\021total_sweep"
  "_count\030\005 \001(\r\022\024\n\014record_count\030\006 \001(\r\022A\n\017th"
  "reshold_lines\030\007 \003(\0132(.zb.dcts.node.detec"
  "tion.ThresholdRefLine*\352\001\n\013IFBandWidth\022\013\n"
  "\007BAND_1K\020\000\022\013\n\007BAND_2K\020\001\022\013\n\007BAND_5K\020\002\022\014\n\010"
  "BAND_10K\020\003\022\014\n\010BAND_20K\020\004\022\014\n\010BAND_50K\020\005\022\r"
  "\n\tBAND_100K\020\006\022\r\n\tBAND_200K\020\007\022\r\n\tBAND_500"
  "K\020\010\022\013\n\007BAND_1M\020\t\022\013\n\007BAND_2M\020\n\022\013\n\007BAND_5M"
  "\020\013\022\014\n\010BAND_10M\020\014\022\014\n\010BAND_20M\020\r\022\014\n\010BAND_4"
  "0M\020\016\022\014\n\010BAND_80M\020\017*\240\002\n\013DFBandWidth\022\021\n\rDF"
  "_BAND_100hz\020\000\022\021\n\rDF_BAND_200hz\020\001\022\021\n\rDF_B"
  "AND_500hz\020\002\022\016\n\nDF_BAND_1K\020\003\022\016\n\nDF_BAND_2"
  "K\020\004\022\016\n\nDF_BAND_5K\020\005\022\017\n\013DF_BAND_10K\020\006\022\017\n\013"
  "DF_BAND_20K\020\007\022\017\n\013DF_BAND_50K\020\010\022\020\n\014DF_BAN"
  "D_100K\020\t\022\020\n\014DF_BAND_200K\020\n\022\020\n\014DF_BAND_50"
  "0K\020\013\022\016\n\nDF_BAND_1M\020\014\022\016\n\nDF_BAND_2M\020\r\022\016\n\n"
  "DF_BAND_5M\020\016\022\017\n\013DF_BAND_10M\020\0172\310\n\n\022ZhDire"
  "ctionService\022^\n\016StartDirection\022/.zb.dcts"
  ".node.zczh.zhdirection.DirectionRequest\032"
  "\031.zb.dcts.node.TaskAccount\"\000\022;\n\rStopDire"
  "ction\022\017.zb.dcts.TaskId\032\027.zb.dcts.node.No"
  "deReply\"\000\022P\n\022GetDirectionResult\022\017.zb.dct"
  "s.TaskId\032%.zb.dcts.node.zczh.zhdirection"
  ".Result\"\0000\001\022V\n\013RecordStart\022,.zb.dcts.nod"
  "e.zczh.zhdirection.RecordRequest\032\027.zb.dc"
  "ts.node.NodeReply\"\000\022B\n\nRecordStop\022\031.zb.d"
  "cts.node.TaskAccount\032\027.zb.dcts.node.Node"
  "Reply\"\000\022Q\n\014DataHoldOpen\022&.zb.dcts.node.s"
  "pectrum.DataHoldRequest\032\027.zb.dcts.node.N"
  "odeReply\"\000\022R\n\rDataHoldReset\022&.zb.dcts.no"
  "de.spectrum.DataHoldRequest\032\027.zb.dcts.no"
  "de.NodeReply\"\000\022R\n\rDataHoldClose\022&.zb.dct"
  "s.node.spectrum.DataHoldRequest\032\027.zb.dct"
  "s.node.NodeReply\"\000\022a\n\010StartPos\022).zb.dcts"
  ".node.zczh.zhdirection.PosRequest\032(.zb.d"
  "cts.node.zczh.zhdirection.PosTaskId\"\000\022f\n"
  "\014GetPosResult\022(.zb.dcts.node.zczh.zhdire"
  "ction.PosTaskId\032(.zb.dcts.node.zczh.zhdi"
  "rection.PosResult\"\0000\001\022M\n\007StopPos\022(.zb.dc"
  "ts.node.zczh.zhdirection.PosTaskId\032\026.goo"
  "gle.protobuf.Empty\"\000\022T\n\021DirectRecordQuer"
  "y\022\021.zb.dcts.TimeSpan\032*.zb.dcts.node.zczh"
  ".zhdirection.RecordReply\"\000\022]\n\013ReplayStar"
  "t\0221.zb.dcts.node.zczh.zhdirection.Replay"
  "StartRequest\032\031.zb.dcts.node.TaskAccount\""
  "\000\0227\n\nReplayStop\022\017.zb.dcts.TaskId\032\026.googl"
  "e.protobuf.Empty\"\000\022L\n\014ReplayAdjust\022\".zb."
  "dcts.node.replay.AdjustRequest\032\026.google."
  "protobuf.Empty\"\000\022V\n\030GetReplayDirectionRe"
  "sult\022\017.zb.dcts.TaskId\032%.zb.dcts.node.zcz"
  "h.zhdirection.Result\"\0000\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fzczh_2fZhDirection_2eproto_deps[6] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_node_2fdetection_2eproto,
  &::descriptor_table_node_2fnode_2eproto,
  &::descriptor_table_node_2freplay_2eproto,
  &::descriptor_table_node_2fspectrum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fzczh_2fZhDirection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fzczh_2fZhDirection_2eproto = {
  false, false, 3952, descriptor_table_protodef_node_2fzczh_2fZhDirection_2eproto, "node/zczh/ZhDirection.proto", 
  &descriptor_table_node_2fzczh_2fZhDirection_2eproto_once, descriptor_table_node_2fzczh_2fZhDirection_2eproto_deps, 6, 13,
  schemas, file_default_instances, TableStruct_node_2fzczh_2fZhDirection_2eproto::offsets,
  file_level_metadata_node_2fzczh_2fZhDirection_2eproto, file_level_enum_descriptors_node_2fzczh_2fZhDirection_2eproto, file_level_service_descriptors_node_2fzczh_2fZhDirection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fzczh_2fZhDirection_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhDirection_2eproto);
  return descriptor_table_node_2fzczh_2fZhDirection_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fzczh_2fZhDirection_2eproto(&descriptor_table_node_2fzczh_2fZhDirection_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhdirection {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IFBandWidth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhDirection_2eproto);
  return file_level_enum_descriptors_node_2fzczh_2fZhDirection_2eproto[0];
}
bool IFBandWidth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DFBandWidth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fzczh_2fZhDirection_2eproto);
  return file_level_enum_descriptors_node_2fzczh_2fZhDirection_2eproto[1];
}
bool DFBandWidth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TaskParam::_Internal {
 public:
};

TaskParam::TaskParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.TaskParam)
}
TaskParam::TaskParam(const TaskParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&center_frequency_, &from.center_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_interval_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(record_interval_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.TaskParam)
}

void TaskParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_frequency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_interval_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(record_interval_));
}

TaskParam::~TaskParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.TaskParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskParam::ArenaDtor(void* object) {
  TaskParam* _this = reinterpret_cast< TaskParam* >(object);
  (void)_this;
}
void TaskParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.TaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_interval_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(record_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double center_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhdirection.IFBandWidth if_bandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_if_bandwidth(static_cast<::zb::dcts::node::zczh::zhdirection::IFBandWidth>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhdirection.DFBandWidth df_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_df_bandwidth(static_cast<::zb::dcts::node::zczh::zhdirection::DFBandWidth>(val));
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expected_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          expected_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 average_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          average_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_gain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          receive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          target_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 record_interval = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          record_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ref_level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          ref_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.TaskParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_center_frequency(), target);
  }

  // .zb.dcts.node.zczh.zhdirection.IFBandWidth if_bandwidth = 2;
  if (this->if_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_if_bandwidth(), target);
  }

  // .zb.dcts.node.zczh.zhdirection.DFBandWidth df_bandwidth = 3;
  if (this->df_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_df_bandwidth(), target);
  }

  // int32 result_interval = 4;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result_interval(), target);
  }

  // int32 status_interval = 5;
  if (this->status_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status_interval(), target);
  }

  // int32 expected_points = 6;
  if (this->expected_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_expected_points(), target);
  }

  // int32 average_count = 7;
  if (this->average_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_average_count(), target);
  }

  // int32 attenuation_gain = 8;
  if (this->attenuation_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_attenuation_gain(), target);
  }

  // int32 antenna = 9;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_antenna(), target);
  }

  // int32 receive_mode = 10;
  if (this->receive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_receive_mode(), target);
  }

  // int32 mode = 11;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_mode(), target);
  }

  // int32 value = 12;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_value(), target);
  }

  // int32 target_count = 13;
  if (this->target_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_target_count(), target);
  }

  // int32 record_interval = 14;
  if (this->record_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_record_interval(), target);
  }

  // double ref_level = 15;
  if (!(this->ref_level() <= 0 && this->ref_level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_ref_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.TaskParam)
  return target;
}

size_t TaskParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.TaskParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.node.zczh.zhdirection.IFBandWidth if_bandwidth = 2;
  if (this->if_bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_if_bandwidth());
  }

  // .zb.dcts.node.zczh.zhdirection.DFBandWidth df_bandwidth = 3;
  if (this->df_bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_df_bandwidth());
  }

  // int32 result_interval = 4;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  // int32 status_interval = 5;
  if (this->status_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_interval());
  }

  // int32 expected_points = 6;
  if (this->expected_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expected_points());
  }

  // int32 average_count = 7;
  if (this->average_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_count());
  }

  // int32 attenuation_gain = 8;
  if (this->attenuation_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_gain());
  }

  // int32 antenna = 9;
  if (this->antenna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  // int32 receive_mode = 10;
  if (this->receive_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_mode());
  }

  // int32 mode = 11;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 value = 12;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  // int32 target_count = 13;
  if (this->target_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_count());
  }

  // double ref_level = 15;
  if (!(this->ref_level() <= 0 && this->ref_level() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 record_interval = 14;
  if (this->record_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_record_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.TaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.TaskParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.TaskParam)
    MergeFrom(*source);
  }
}

void TaskParam::MergeFrom(const TaskParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.TaskParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (from.if_bandwidth() != 0) {
    _internal_set_if_bandwidth(from._internal_if_bandwidth());
  }
  if (from.df_bandwidth() != 0) {
    _internal_set_df_bandwidth(from._internal_df_bandwidth());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
  if (from.status_interval() != 0) {
    _internal_set_status_interval(from._internal_status_interval());
  }
  if (from.expected_points() != 0) {
    _internal_set_expected_points(from._internal_expected_points());
  }
  if (from.average_count() != 0) {
    _internal_set_average_count(from._internal_average_count());
  }
  if (from.attenuation_gain() != 0) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
  if (from.receive_mode() != 0) {
    _internal_set_receive_mode(from._internal_receive_mode());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.target_count() != 0) {
    _internal_set_target_count(from._internal_target_count());
  }
  if (!(from.ref_level() <= 0 && from.ref_level() >= 0)) {
    _internal_set_ref_level(from._internal_ref_level());
  }
  if (from.record_interval() != 0) {
    _internal_set_record_interval(from._internal_record_interval());
  }
}

void TaskParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.TaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskParam::CopyFrom(const TaskParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.TaskParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskParam::IsInitialized() const {
  return true;
}

void TaskParam::InternalSwap(TaskParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskParam, record_interval_)
      + sizeof(TaskParam::record_interval_)
      - PROTOBUF_FIELD_OFFSET(TaskParam, center_frequency_)>(
          reinterpret_cast<char*>(&center_frequency_),
          reinterpret_cast<char*>(&other->center_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectionRequest::_Internal {
 public:
  static const ::zb::dcts::node::zczh::zhdirection::TaskParam& task_param(const DirectionRequest* msg);
};

const ::zb::dcts::node::zczh::zhdirection::TaskParam&
DirectionRequest::_Internal::task_param(const DirectionRequest* msg) {
  return *msg->task_param_;
}
void DirectionRequest::clear_task_runner() {
  task_runner_.Clear();
}
DirectionRequest::DirectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_runner_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.DirectionRequest)
}
DirectionRequest::DirectionRequest(const DirectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_runner_(from.task_runner_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_param()) {
    task_param_ = new ::zb::dcts::node::zczh::zhdirection::TaskParam(*from.task_param_);
  } else {
    task_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.DirectionRequest)
}

void DirectionRequest::SharedCtor() {
task_param_ = nullptr;
}

DirectionRequest::~DirectionRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.DirectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_param_;
}

void DirectionRequest::ArenaDtor(void* object) {
  DirectionRequest* _this = reinterpret_cast< DirectionRequest* >(object);
  (void)_this;
}
void DirectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.DirectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_runner_.Clear();
  if (GetArena() == nullptr && task_param_ != nullptr) {
    delete task_param_;
  }
  task_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.NodeDevice task_runner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_runner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.DirectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_runner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_task_runner(i), target, stream);
  }

  // .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 2;
  if (this->has_task_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.DirectionRequest)
  return target;
}

size_t DirectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.DirectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  total_size += 1UL * this->_internal_task_runner_size();
  for (const auto& msg : this->task_runner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 2;
  if (this->has_task_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.DirectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.DirectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.DirectionRequest)
    MergeFrom(*source);
  }
}

void DirectionRequest::MergeFrom(const DirectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.DirectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_runner_.MergeFrom(from.task_runner_);
  if (from.has_task_param()) {
    _internal_mutable_task_param()->::zb::dcts::node::zczh::zhdirection::TaskParam::MergeFrom(from._internal_task_param());
  }
}

void DirectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.DirectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionRequest::CopyFrom(const DirectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.DirectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionRequest::IsInitialized() const {
  return true;
}

void DirectionRequest::InternalSwap(DirectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_runner_.InternalSwap(&other->task_runner_);
  swap(task_param_, other->task_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Header::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& result_from(const Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const Header* msg);
  static const ::zb::dcts::Position& device_position(const Header* msg);
};

const ::zb::dcts::node::NodeDevice&
Header::_Internal::result_from(const Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
Header::_Internal::time_span(const Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
Header::_Internal::device_position(const Header* msg) {
  return *msg->device_position_;
}
void Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::node::NodeDevice(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.Header)
}

void Header::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&result_from_)) + sizeof(sweep_count_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty();
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_count_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeDevice result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string record_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.zczh.zhdirection.Header.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeDevice result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.zczh.zhdirection.Header.record_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_record_id(), target);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sweep_count(), target);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.node.NodeDevice result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.sweep_count() != 0) {
    _internal_set_sweep_count(from._internal_sweep_count());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, sweep_count_)
      + sizeof(Header::sweep_count_)
      - PROTOBUF_FIELD_OFFSET(Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TargetDirection::_Internal {
 public:
};

TargetDirection::TargetDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.TargetDirection)
}
TargetDirection::TargetDirection(const TargetDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&center_frequency_, &from.center_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&amplitude_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(amplitude_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.TargetDirection)
}

void TargetDirection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_frequency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amplitude_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(amplitude_));
}

TargetDirection::~TargetDirection() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.TargetDirection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TargetDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TargetDirection::ArenaDtor(void* object) {
  TargetDirection* _this = reinterpret_cast< TargetDirection* >(object);
  (void)_this;
}
void TargetDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.TargetDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amplitude_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(amplitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double center_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float amplitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.TargetDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_center_frequency(), target);
  }

  // double direction = 2;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_direction(), target);
  }

  // int32 confidence = 3;
  if (this->confidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_confidence(), target);
  }

  // float amplitude = 4;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_amplitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.TargetDirection)
  return target;
}

size_t TargetDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.TargetDirection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double direction = 2;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float amplitude = 4;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetDirection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.TargetDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetDirection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetDirection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.TargetDirection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.TargetDirection)
    MergeFrom(*source);
  }
}

void TargetDirection::MergeFrom(const TargetDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.TargetDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.amplitude() <= 0 && from.amplitude() >= 0)) {
    _internal_set_amplitude(from._internal_amplitude());
  }
}

void TargetDirection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.TargetDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetDirection::CopyFrom(const TargetDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.TargetDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDirection::IsInitialized() const {
  return true;
}

void TargetDirection::InternalSwap(TargetDirection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetDirection, amplitude_)
      + sizeof(TargetDirection::amplitude_)
      - PROTOBUF_FIELD_OFFSET(TargetDirection, center_frequency_)>(
          reinterpret_cast<char*>(&center_frequency_),
          reinterpret_cast<char*>(&other->center_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetDirection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Result::_Internal {
 public:
  static const ::zb::dcts::node::zczh::zhdirection::Header& header(const Result* msg);
  static const ::zb::dcts::node::zczh::zhdirection::TargetDirection& target_detection(const Result* msg);
  static const ::zb::dcts::node::spectrum::View& df_spectrum(const Result* msg);
  static const ::zb::dcts::node::detection::SignalList& signal_list(const Result* msg);
};

const ::zb::dcts::node::zczh::zhdirection::Header&
Result::_Internal::header(const Result* msg) {
  return *msg->header_;
}
const ::zb::dcts::node::zczh::zhdirection::TargetDirection&
Result::_Internal::target_detection(const Result* msg) {
  return *msg->target_detection_;
}
const ::zb::dcts::node::spectrum::View&
Result::_Internal::df_spectrum(const Result* msg) {
  return *msg->df_spectrum_;
}
const ::zb::dcts::node::detection::SignalList&
Result::_Internal::signal_list(const Result* msg) {
  return *msg->signal_list_;
}
void Result::clear_df_spectrum() {
  if (GetArena() == nullptr && df_spectrum_ != nullptr) {
    delete df_spectrum_;
  }
  df_spectrum_ = nullptr;
}
void Result::clear_signal_list() {
  if (GetArena() == nullptr && signal_list_ != nullptr) {
    delete signal_list_;
  }
  signal_list_ = nullptr;
}
Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::node::zczh::zhdirection::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_target_detection()) {
    target_detection_ = new ::zb::dcts::node::zczh::zhdirection::TargetDirection(*from.target_detection_);
  } else {
    target_detection_ = nullptr;
  }
  if (from._internal_has_df_spectrum()) {
    df_spectrum_ = new ::zb::dcts::node::spectrum::View(*from.df_spectrum_);
  } else {
    df_spectrum_ = nullptr;
  }
  if (from._internal_has_signal_list()) {
    signal_list_ = new ::zb::dcts::node::detection::SignalList(*from.signal_list_);
  } else {
    signal_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.Result)
}

void Result::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signal_list_) -
    reinterpret_cast<char*>(&header_)) + sizeof(signal_list_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete target_detection_;
  if (this != internal_default_instance()) delete df_spectrum_;
  if (this != internal_default_instance()) delete signal_list_;
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && target_detection_ != nullptr) {
    delete target_detection_;
  }
  target_detection_ = nullptr;
  if (GetArena() == nullptr && df_spectrum_ != nullptr) {
    delete df_spectrum_;
  }
  df_spectrum_ = nullptr;
  if (GetArena() == nullptr && signal_list_ != nullptr) {
    delete signal_list_;
  }
  signal_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.zczh.zhdirection.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhdirection.TargetDirection target_detection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_detection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.View df_spectrum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_df_spectrum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.SignalList signal_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.zczh.zhdirection.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.node.zczh.zhdirection.TargetDirection target_detection = 2;
  if (this->has_target_detection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_detection(this), target, stream);
  }

  // .zb.dcts.node.spectrum.View df_spectrum = 3;
  if (this->has_df_spectrum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::df_spectrum(this), target, stream);
  }

  // .zb.dcts.node.detection.SignalList signal_list = 4;
  if (this->has_signal_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::signal_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.zczh.zhdirection.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.node.zczh.zhdirection.TargetDirection target_detection = 2;
  if (this->has_target_detection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_detection_);
  }

  // .zb.dcts.node.spectrum.View df_spectrum = 3;
  if (this->has_df_spectrum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *df_spectrum_);
  }

  // .zb.dcts.node.detection.SignalList signal_list = 4;
  if (this->has_signal_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::node::zczh::zhdirection::Header::MergeFrom(from._internal_header());
  }
  if (from.has_target_detection()) {
    _internal_mutable_target_detection()->::zb::dcts::node::zczh::zhdirection::TargetDirection::MergeFrom(from._internal_target_detection());
  }
  if (from.has_df_spectrum()) {
    _internal_mutable_df_spectrum()->::zb::dcts::node::spectrum::View::MergeFrom(from._internal_df_spectrum());
  }
  if (from.has_signal_list()) {
    _internal_mutable_signal_list()->::zb::dcts::node::detection::SignalList::MergeFrom(from._internal_signal_list());
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Result, signal_list_)
      + sizeof(Result::signal_list_)
      - PROTOBUF_FIELD_OFFSET(Result, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecordRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const RecordRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
RecordRequest::_Internal::task_account(const RecordRequest* msg) {
  return *msg->task_account_;
}
void RecordRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
RecordRequest::RecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.RecordRequest)
}
RecordRequest::RecordRequest(const RecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  times_of_monitor_interval_ = from.times_of_monitor_interval_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.RecordRequest)
}

void RecordRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&times_of_monitor_interval_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(times_of_monitor_interval_));
}

RecordRequest::~RecordRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.RecordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
}

void RecordRequest::ArenaDtor(void* object) {
  RecordRequest* _this = reinterpret_cast< RecordRequest* >(object);
  (void)_this;
}
void RecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.RecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  times_of_monitor_interval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times_of_monitor_interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_of_monitor_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.RecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // int32 times_of_monitor_interval = 2;
  if (this->times_of_monitor_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times_of_monitor_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.RecordRequest)
  return target;
}

size_t RecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.RecordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // int32 times_of_monitor_interval = 2;
  if (this->times_of_monitor_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times_of_monitor_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.RecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.RecordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.RecordRequest)
    MergeFrom(*source);
  }
}

void RecordRequest::MergeFrom(const RecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.RecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.times_of_monitor_interval() != 0) {
    _internal_set_times_of_monitor_interval(from._internal_times_of_monitor_interval());
  }
}

void RecordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.RecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordRequest::CopyFrom(const RecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.RecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRequest::IsInitialized() const {
  return true;
}

void RecordRequest::InternalSwap(RecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordRequest, times_of_monitor_interval_)
      + sizeof(RecordRequest::times_of_monitor_interval_)
      - PROTOBUF_FIELD_OFFSET(RecordRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecordDescriptor::_Internal {
 public:
  static const ::zb::dcts::TimeSpan& time_span(const RecordDescriptor* msg);
  static const ::zb::dcts::node::zczh::zhdirection::TaskParam& task_param(const RecordDescriptor* msg);
};

const ::zb::dcts::TimeSpan&
RecordDescriptor::_Internal::time_span(const RecordDescriptor* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::node::zczh::zhdirection::TaskParam&
RecordDescriptor::_Internal::task_param(const RecordDescriptor* msg) {
  return *msg->task_param_;
}
void RecordDescriptor::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
RecordDescriptor::RecordDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
}
RecordDescriptor::RecordDescriptor(const RecordDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_task_param()) {
    task_param_ = new ::zb::dcts::node::zczh::zhdirection::TaskParam(*from.task_param_);
  } else {
    task_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
}

void RecordDescriptor::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&task_param_) -
    reinterpret_cast<char*>(&time_span_)) + sizeof(task_param_));
}

RecordDescriptor::~RecordDescriptor() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete task_param_;
}

void RecordDescriptor::ArenaDtor(void* object) {
  RecordDescriptor* _this = reinterpret_cast< RecordDescriptor* >(object);
  (void)_this;
}
void RecordDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty();
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && task_param_ != nullptr) {
    delete task_param_;
  }
  task_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string record_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.zczh.zhdirection.RecordDescriptor.record_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_record_id(), target);
  }

  // .zb.dcts.TimeSpan time_span = 2;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 3;
  if (this->has_task_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::task_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
  return target;
}

size_t RecordDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.TimeSpan time_span = 2;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.node.zczh.zhdirection.TaskParam task_param = 3;
  if (this->has_task_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
    MergeFrom(*source);
  }
}

void RecordDescriptor::MergeFrom(const RecordDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_task_param()) {
    _internal_mutable_task_param()->::zb::dcts::node::zczh::zhdirection::TaskParam::MergeFrom(from._internal_task_param());
  }
}

void RecordDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordDescriptor::CopyFrom(const RecordDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.RecordDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordDescriptor::IsInitialized() const {
  return true;
}

void RecordDescriptor::InternalSwap(RecordDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordDescriptor, task_param_)
      + sizeof(RecordDescriptor::task_param_)
      - PROTOBUF_FIELD_OFFSET(RecordDescriptor, time_span_)>(
          reinterpret_cast<char*>(&time_span_),
          reinterpret_cast<char*>(&other->time_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecordReply::_Internal {
 public:
};

RecordReply::RecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.RecordReply)
}
RecordReply::RecordReply(const RecordReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.RecordReply)
}

void RecordReply::SharedCtor() {
}

RecordReply::~RecordReply() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.RecordReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecordReply::ArenaDtor(void* object) {
  RecordReply* _this = reinterpret_cast< RecordReply* >(object);
  (void)_this;
}
void RecordReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.RecordReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.zczh.zhdirection.RecordDescriptor records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.RecordReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.zczh.zhdirection.RecordDescriptor records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.RecordReply)
  return target;
}

size_t RecordReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.RecordReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.zczh.zhdirection.RecordDescriptor records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.RecordReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.RecordReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.RecordReply)
    MergeFrom(*source);
  }
}

void RecordReply::MergeFrom(const RecordReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.RecordReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void RecordReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.RecordReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordReply::CopyFrom(const RecordReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.RecordReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordReply::IsInitialized() const {
  return true;
}

void RecordReply::InternalSwap(RecordReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayStartRequest::_Internal {
 public:
};

ReplayStartRequest::ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
}
ReplayStartRequest::ReplayStartRequest(const ReplayStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_id(), 
      GetArena());
  }
  result_interval_ = from.result_interval_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
}

void ReplayStartRequest::SharedCtor() {
record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_interval_ = 0;
}

ReplayStartRequest::~ReplayStartRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplayStartRequest::ArenaDtor(void* object) {
  ReplayStartRequest* _this = reinterpret_cast< ReplayStartRequest* >(object);
  (void)_this;
}
void ReplayStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplayStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty();
  result_interval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string record_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.zczh.zhdirection.ReplayStartRequest.record_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_record_id(), target);
  }

  // int32 result_interval = 2;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
  return target;
}

size_t ReplayStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 1;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // int32 result_interval = 2;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
    MergeFrom(*source);
  }
}

void ReplayStartRequest::MergeFrom(const ReplayStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
}

void ReplayStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayStartRequest::CopyFrom(const ReplayStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.ReplayStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayStartRequest::IsInitialized() const {
  return true;
}

void ReplayStartRequest::InternalSwap(ReplayStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_interval_, other->result_interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PosRequest::_Internal {
 public:
  static const ::zb::dcts::Timestamp& acquire_time(const PosRequest* msg);
};

const ::zb::dcts::Timestamp&
PosRequest::_Internal::acquire_time(const PosRequest* msg) {
  return *msg->acquire_time_;
}
void PosRequest::clear_acquire_time() {
  if (GetArena() == nullptr && acquire_time_ != nullptr) {
    delete acquire_time_;
  }
  acquire_time_ = nullptr;
}
PosRequest::PosRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.PosRequest)
}
PosRequest::PosRequest(const PosRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acquire_time()) {
    acquire_time_ = new ::zb::dcts::Timestamp(*from.acquire_time_);
  } else {
    acquire_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.PosRequest)
}

void PosRequest::SharedCtor() {
acquire_time_ = nullptr;
}

PosRequest::~PosRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.PosRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete acquire_time_;
}

void PosRequest::ArenaDtor(void* object) {
  PosRequest* _this = reinterpret_cast< PosRequest* >(object);
  (void)_this;
}
void PosRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.PosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && acquire_time_ != nullptr) {
    delete acquire_time_;
  }
  acquire_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.Timestamp acquire_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acquire_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.PosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.Timestamp acquire_time = 1;
  if (this->has_acquire_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::acquire_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.PosRequest)
  return target;
}

size_t PosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.PosRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.Timestamp acquire_time = 1;
  if (this->has_acquire_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acquire_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.PosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PosRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.PosRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.PosRequest)
    MergeFrom(*source);
  }
}

void PosRequest::MergeFrom(const PosRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.PosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acquire_time()) {
    _internal_mutable_acquire_time()->::zb::dcts::Timestamp::MergeFrom(from._internal_acquire_time());
  }
}

void PosRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.PosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosRequest::CopyFrom(const PosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.PosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosRequest::IsInitialized() const {
  return true;
}

void PosRequest::InternalSwap(PosRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(acquire_time_, other->acquire_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PosRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PosTaskId::_Internal {
 public:
  static const ::zb::dcts::TaskId& id(const PosTaskId* msg);
};

const ::zb::dcts::TaskId&
PosTaskId::_Internal::id(const PosTaskId* msg) {
  return *msg->id_;
}
void PosTaskId::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
PosTaskId::PosTaskId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.PosTaskId)
}
PosTaskId::PosTaskId(const PosTaskId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::TaskId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.PosTaskId)
}

void PosTaskId::SharedCtor() {
id_ = nullptr;
}

PosTaskId::~PosTaskId() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.PosTaskId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosTaskId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void PosTaskId::ArenaDtor(void* object) {
  PosTaskId* _this = reinterpret_cast< PosTaskId* >(object);
  (void)_this;
}
void PosTaskId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosTaskId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosTaskId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.PosTaskId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosTaskId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TaskId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosTaskId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.PosTaskId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TaskId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.PosTaskId)
  return target;
}

size_t PosTaskId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.PosTaskId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.TaskId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosTaskId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.PosTaskId)
  GOOGLE_DCHECK_NE(&from, this);
  const PosTaskId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosTaskId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.PosTaskId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.PosTaskId)
    MergeFrom(*source);
  }
}

void PosTaskId::MergeFrom(const PosTaskId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.PosTaskId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::TaskId::MergeFrom(from._internal_id());
  }
}

void PosTaskId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.PosTaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosTaskId::CopyFrom(const PosTaskId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.PosTaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosTaskId::IsInitialized() const {
  return true;
}

void PosTaskId::InternalSwap(PosTaskId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PosTaskId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PosResult::_Internal {
 public:
  static const ::zb::dcts::Position& target_position(const PosResult* msg);
};

const ::zb::dcts::Position&
PosResult::_Internal::target_position(const PosResult* msg) {
  return *msg->target_position_;
}
void PosResult::clear_target_position() {
  if (GetArena() == nullptr && target_position_ != nullptr) {
    delete target_position_;
  }
  target_position_ = nullptr;
}
PosResult::PosResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.PosResult)
}
PosResult::PosResult(const PosResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_position()) {
    target_position_ = new ::zb::dcts::Position(*from.target_position_);
  } else {
    target_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.PosResult)
}

void PosResult::SharedCtor() {
target_position_ = nullptr;
}

PosResult::~PosResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.PosResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete target_position_;
}

void PosResult::ArenaDtor(void* object) {
  PosResult* _this = reinterpret_cast< PosResult* >(object);
  (void)_this;
}
void PosResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.PosResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && target_position_ != nullptr) {
    delete target_position_;
  }
  target_position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.Position target_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.PosResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.Position target_position = 1;
  if (this->has_target_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.PosResult)
  return target;
}

size_t PosResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.PosResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.Position target_position = 1;
  if (this->has_target_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.PosResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PosResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.PosResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.PosResult)
    MergeFrom(*source);
  }
}

void PosResult::MergeFrom(const PosResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.PosResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_position()) {
    _internal_mutable_target_position()->::zb::dcts::Position::MergeFrom(from._internal_target_position());
  }
}

void PosResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.PosResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosResult::CopyFrom(const PosResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.PosResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosResult::IsInitialized() const {
  return true;
}

void PosResult::InternalSwap(PosResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(target_position_, other->target_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PosResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationStatus::_Internal {
 public:
  static const ::zb::dcts::node::NodeDevice& running_device(const OperationStatus* msg);
  static const ::zb::dcts::TimeSpan& time_span(const OperationStatus* msg);
};

const ::zb::dcts::node::NodeDevice&
OperationStatus::_Internal::running_device(const OperationStatus* msg) {
  return *msg->running_device_;
}
const ::zb::dcts::TimeSpan&
OperationStatus::_Internal::time_span(const OperationStatus* msg) {
  return *msg->time_span_;
}
void OperationStatus::clear_running_device() {
  if (GetArena() == nullptr && running_device_ != nullptr) {
    delete running_device_;
  }
  running_device_ = nullptr;
}
void OperationStatus::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void OperationStatus::clear_threshold_lines() {
  threshold_lines_.Clear();
}
OperationStatus::OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  threshold_lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.zczh.zhdirection.OperationStatus)
}
OperationStatus::OperationStatus(const OperationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      threshold_lines_(from.threshold_lines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_running_device()) {
    running_device_ = new ::zb::dcts::node::NodeDevice(*from.running_device_);
  } else {
    running_device_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  ::memcpy(&total_sweep_count_, &from.total_sweep_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&total_sweep_count_)) + sizeof(record_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.zczh.zhdirection.OperationStatus)
}

void OperationStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&running_device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&running_device_)) + sizeof(record_count_));
}

OperationStatus::~OperationStatus() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.zczh.zhdirection.OperationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete running_device_;
  if (this != internal_default_instance()) delete time_span_;
}

void OperationStatus::ArenaDtor(void* object) {
  OperationStatus* _this = reinterpret_cast< OperationStatus* >(object);
  (void)_this;
}
void OperationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.zczh.zhdirection.OperationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_lines_.Clear();
  if (GetArena() == nullptr && running_device_ != nullptr) {
    delete running_device_;
  }
  running_device_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  ::memset(&total_sweep_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_count_) -
      reinterpret_cast<char*>(&total_sweep_count_)) + sizeof(record_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeDevice running_device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_running_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_sweep_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          record_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threshold_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.zczh.zhdirection.OperationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeDevice running_device = 1;
  if (this->has_running_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::running_device(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // uint32 total_sweep_count = 5;
  if (this->total_sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_total_sweep_count(), target);
  }

  // uint32 record_count = 6;
  if (this->record_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_record_count(), target);
  }

  // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_threshold_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_threshold_lines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.zczh.zhdirection.OperationStatus)
  return target;
}

size_t OperationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.zczh.zhdirection.OperationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
  total_size += 1UL * this->_internal_threshold_lines_size();
  for (const auto& msg : this->threshold_lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.NodeDevice running_device = 1;
  if (this->has_running_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *running_device_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // uint32 total_sweep_count = 5;
  if (this->total_sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_sweep_count());
  }

  // uint32 record_count = 6;
  if (this->record_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.zczh.zhdirection.OperationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.zczh.zhdirection.OperationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.zczh.zhdirection.OperationStatus)
    MergeFrom(*source);
  }
}

void OperationStatus::MergeFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.zczh.zhdirection.OperationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threshold_lines_.MergeFrom(from.threshold_lines_);
  if (from.has_running_device()) {
    _internal_mutable_running_device()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_running_device());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.total_sweep_count() != 0) {
    _internal_set_total_sweep_count(from._internal_total_sweep_count());
  }
  if (from.record_count() != 0) {
    _internal_set_record_count(from._internal_record_count());
  }
}

void OperationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.zczh.zhdirection.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationStatus::CopyFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.zczh.zhdirection.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStatus::IsInitialized() const {
  return true;
}

void OperationStatus::InternalSwap(OperationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  threshold_lines_.InternalSwap(&other->threshold_lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStatus, record_count_)
      + sizeof(OperationStatus::record_count_)
      - PROTOBUF_FIELD_OFFSET(OperationStatus, running_device_)>(
          reinterpret_cast<char*>(&running_device_),
          reinterpret_cast<char*>(&other->running_device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zhdirection
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::TaskParam* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::TaskParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::TaskParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::DirectionRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::DirectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::DirectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::Header* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::TargetDirection* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::TargetDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::TargetDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::Result* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::RecordRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::RecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::RecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::RecordDescriptor* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::RecordDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::RecordDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::RecordReply* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::RecordReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::RecordReply >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::PosRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::PosRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::PosRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::PosTaskId* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::PosTaskId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::PosTaskId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::PosResult* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::PosResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::PosResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::zczh::zhdirection::OperationStatus* Arena::CreateMaybeMessage< ::zb::dcts::node::zczh::zhdirection::OperationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::zczh::zhdirection::OperationStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
