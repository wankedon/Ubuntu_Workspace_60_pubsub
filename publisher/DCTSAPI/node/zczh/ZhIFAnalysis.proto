syntax = "proto3";
package zb.dcts.node.zczh.zhIFAnalysis;
import "dcts.proto";
import "node/node.proto";
import "node/modulation.proto";
import "node/spectrum.proto";
import "node/detection.proto";
import "node/replay.proto";

enum IFBandWidth
{
	BAND_1K = 0;
	BAND_2K = 1;
    BAND_5K = 2;
	BAND_10K = 3;
    BAND_20K = 4;
	BAND_50K = 5;
    BAND_100K = 6;
	BAND_200K = 7;
    BAND_500K = 8;
	BAND_1M = 9;
    BAND_2M = 10;
	BAND_5M = 11;
    BAND_10M = 12;
    BAND_20M = 13;
	BAND_40M = 14;
    BAND_80M = 15;
}

enum DemodType
{
	Demodulation_none = 0;
	Demodulation_AM = 1;
	Demodulation_FM = 2;
	Demodulation_CW = 3;
	Demodulation_LSB = 4;
	Demodulation_USB = 5;
}

enum RecogniseType
{
    MODULATION = 0;       //调制方式
    TRANSMISSION = 1;     //制式识别
    HOPPFREQUENCY = 2;    //跳频检测
    DEMOD = 3;            //解调
    IQ_ACQUIRE = 4;       //IQ
}

//定频分析任务参数
message TaskParam 
{
    spectrum.FrequencySpan span = 1; //频段范围（单位：Hz） 
    IFBandWidth IF_bandwidth = 2;	 //中频带宽（单位：Hz）
    int32  result_interval = 3;      //监测结果回传间隔,单位ms，0代表每次扫描均上传
    int32  status_interval = 4;      //状态回传间隔,单位ms，不低于result_interval，最低100ms
    int32  expected_points = 5;      //希望显示的点数，0代表按原始点数上传，非零时应为偶数
    int32  average_count = 6;        //平均次数[0,128]
    int32  attenuation_gain = 7;     //衰减增益[-30, 20]
    int32  antenna = 8;              //天线模式 1-放大模式；2-直通模式；3-测试模式
    int32  receive_mode = 9;         //接收机模式 1-低噪声；2-常规；3-低失真
    int32  mode = 10; 	             //门限模式 0-手动，1：自动
	int32  value = 11; 	             //门限值
    RecogniseType  type = 12;        //识别类型
    DemodType demod_type = 13;       //解调类型
    double  ref_level = 14;          //参考电平
    int32   iq_sweep_count = 15;     //IQ扫描次数，0：一直采
}

message Header
{
  NodeDevice result_from = 1;         //数据来源
  string record_id = 2;               //记录id，仅在回放时有效
  uint32 sequence_number = 3;         //顺序号，每个任务执行者维护自身的顺序号
  uint32 sweep_count = 4;             //当前上报周期内的扫描次数
  TimeSpan time_span = 5;             //当前上报周期内的首段和末端采集时刻（由设备提供的时间）
  Position device_position = 6;       //设备位置
}

enum TransmissionType
{
    UNKNOWN_TSR = 0;
    GSM = 1;
    CDMA2000 = 2;
    WCDMA = 3;
    TD_SCDMA = 4;
    FourG_TDD = 5;
    FourG_FDD = 6;
    FiveG = 7;
    DoingRec = 8;
}

message TransmissionResult
{
    TransmissionType trans_type = 1;
}

//音频结果
message AudioBlock
{
  repeated int32 pcm_bitstream = 1;    //音频PCM码流
}

message AudioResult
{
  repeated AudioBlock blocks = 1;   //音频码流
}

//定频分析结果
message Result
{
  Header header = 1;                                //结果头
  spectrum.View spectrum = 2;                       //频谱
  modulation.RecognizeResult recognize_result = 3;  //信号识别结果
  TransmissionResult  trans_result = 4;             //制式识别结果
  AudioResult audio_Result = 5;                     //音频结果
  detection.SignalList signal_list = 6;             //结果时间段内检出的信号列表
}

message RecordDescriptor
{
    string record_id = 1;
    NodeDevice from = 2;
    TimeSpan time_span = 3;
    spectrum.SignalBand analysis_band = 4;
    uint32 record_count = 5;
}

message QueryRecordReply
 {
     NodeId node_id = 1;
     repeated RecordDescriptor matching_records = 2;
 }
 
message ReplayStartRequest
 {
     replay.ReplayId replay_id = 1;
     int32 result_interval = 4;             
     int32 expected_points = 5;
 }

 message QueryRecordRequest
{
    TaskAccount task_account = 1;
    TimeSpan time_span = 3;
    spectrum.FrequencySpan freq_span = 5;
}

message OperationStatus //任务运行状态
{
    NodeDevice running_device = 1;  //执行任务的节点设备id
    TimeSpan time_span = 3; //任务已运行的时间段（由设备提供的时间）
    uint32 total_sweep_count = 5;   //从任务开始的扫描次数计数
    uint32 record_count = 6;        //已保存的数据记录个数
    repeated detection.ThresholdRefLine threshold_lines = 7;  //门限线信息，不一定每次都回传
}

message RecogniseRequest
{
    repeated NodeDevice task_runner = 1; //参与任务的节点设备
    TaskParam param = 2;                 //参数 
}

message RecogniseParam
{
    RecogniseType type = 1;
    spectrum.FrequencySpan span = 2; //频段范围（单位：Hz） 
    double IF_bandwidth = 3;	     //中频带宽（单位：Hz）
}

message ChangeRequest
{
    TaskAccount task_account = 1;
    RecogniseParam recognise_param = 2;
}

service ZhIFAnalysisService 
{
	//realtime 
    rpc StartRecognise(RecogniseRequest) returns(TaskAccount){}   //开始信号识别
    rpc GetRecogniseResult(TaskId) returns(stream Result){}       //获取信号识别结果
    rpc StopRecognise(TaskId) returns(NodeReply){}                //停止信号识别
    rpc ChangeRecognise(ChangeRequest) returns(NodeReply){}       //干预指令 改变识别参数
    rpc GetRealtimeStatus(TaskId)returns (stream OperationStatus) {}    //获取任务状态

    //replay
    rpc ReplayTaskStart(replay.CreateReplayTaskRequest) returns(TaskAccount) {}     //创建回放任务
    rpc ReplayRecordQuery(QueryRecordRequest) returns (stream QueryRecordReply){}   //查询记录条目
    rpc ReplayStart(ReplayStartRequest) returns(NodeReply){}                        //启动一条记录的回放（一个节点上只允许一个记录在回放）
    rpc GetReplaySpectrumResult(replay.ReplayId) returns (stream Result) {}         //获取回放结果
    rpc ReplayStop(replay.ReplayId) returns(NodeReply){}                            //停止一条记录的回放
    rpc ReplayAdjust(replay.AdjustRequest) returns(NodeReply){}                     //回放进度、速度调整
    rpc ReplayTaskStop(TaskId) returns(NodeReply){}                                 //关闭回放任务
    //通用操作
    rpc ZoomInOpen(spectrum.ZoomInRequest) returns (NodeReply) {}                    //选择一个近景观测范围,注意:不改变实际的扫描范围
    rpc ZoomInClose(TaskAccount) returns (NodeReply) {}                              //关闭近景观测
    rpc DataHoldOpen(spectrum.DataHoldRequest) returns (NodeReply) {}                //开启数据保持
    rpc DataHoldReset(spectrum.DataHoldRequest)returns (NodeReply) {}                //数据保持重置
    rpc DataHoldClose(spectrum.DataHoldRequest)returns (NodeReply) {}                //关闭数据保持
    rpc DetectionOpen(detection.DetectionRequest) returns (NodeReply) {}             //开启信号检测
    rpc DetectionClose(TaskAccount)returns (NodeReply) {}                            //关闭信号检测
    rpc SetSignalDetailKeeping(detection.DetailKeepingRequest) returns(NodeReply){}
}