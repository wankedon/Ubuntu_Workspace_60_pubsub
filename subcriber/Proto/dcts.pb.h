// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dcts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dcts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dcts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dcts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dcts_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_dcts_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
class Boolean;
struct BooleanDefaultTypeInternal;
extern BooleanDefaultTypeInternal _Boolean_default_instance_;
class ComplexNumber;
struct ComplexNumberDefaultTypeInternal;
extern ComplexNumberDefaultTypeInternal _ComplexNumber_default_instance_;
class DRange;
struct DRangeDefaultTypeInternal;
extern DRangeDefaultTypeInternal _DRange_default_instance_;
class Direction;
struct DirectionDefaultTypeInternal;
extern DirectionDefaultTypeInternal _Direction_default_instance_;
class HeartbeatCfg;
struct HeartbeatCfgDefaultTypeInternal;
extern HeartbeatCfgDefaultTypeInternal _HeartbeatCfg_default_instance_;
class IPv4Address;
struct IPv4AddressDefaultTypeInternal;
extern IPv4AddressDefaultTypeInternal _IPv4Address_default_instance_;
class IRange;
struct IRangeDefaultTypeInternal;
extern IRangeDefaultTypeInternal _IRange_default_instance_;
class Integer;
struct IntegerDefaultTypeInternal;
extern IntegerDefaultTypeInternal _Integer_default_instance_;
class MsgSendOption;
struct MsgSendOptionDefaultTypeInternal;
extern MsgSendOptionDefaultTypeInternal _MsgSendOption_default_instance_;
class Physical;
struct PhysicalDefaultTypeInternal;
extern PhysicalDefaultTypeInternal _Physical_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Posture;
struct PostureDefaultTypeInternal;
extern PostureDefaultTypeInternal _Posture_default_instance_;
class RealNumber;
struct RealNumberDefaultTypeInternal;
extern RealNumberDefaultTypeInternal _RealNumber_default_instance_;
class ReconnectionCfg;
struct ReconnectionCfgDefaultTypeInternal;
extern ReconnectionCfgDefaultTypeInternal _ReconnectionCfg_default_instance_;
class StatisticVal;
struct StatisticValDefaultTypeInternal;
extern StatisticValDefaultTypeInternal _StatisticVal_default_instance_;
class TaskId;
struct TaskIdDefaultTypeInternal;
extern TaskIdDefaultTypeInternal _TaskId_default_instance_;
class TimeSpan;
struct TimeSpanDefaultTypeInternal;
extern TimeSpanDefaultTypeInternal _TimeSpan_default_instance_;
class TimerParam;
struct TimerParamDefaultTypeInternal;
extern TimerParamDefaultTypeInternal _TimerParam_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class ZeromqLinkCfg;
struct ZeromqLinkCfgDefaultTypeInternal;
extern ZeromqLinkCfgDefaultTypeInternal _ZeromqLinkCfg_default_instance_;
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::Boolean* Arena::CreateMaybeMessage<::zb::dcts::Boolean>(Arena*);
template<> ::zb::dcts::ComplexNumber* Arena::CreateMaybeMessage<::zb::dcts::ComplexNumber>(Arena*);
template<> ::zb::dcts::DRange* Arena::CreateMaybeMessage<::zb::dcts::DRange>(Arena*);
template<> ::zb::dcts::Direction* Arena::CreateMaybeMessage<::zb::dcts::Direction>(Arena*);
template<> ::zb::dcts::HeartbeatCfg* Arena::CreateMaybeMessage<::zb::dcts::HeartbeatCfg>(Arena*);
template<> ::zb::dcts::IPv4Address* Arena::CreateMaybeMessage<::zb::dcts::IPv4Address>(Arena*);
template<> ::zb::dcts::IRange* Arena::CreateMaybeMessage<::zb::dcts::IRange>(Arena*);
template<> ::zb::dcts::Integer* Arena::CreateMaybeMessage<::zb::dcts::Integer>(Arena*);
template<> ::zb::dcts::MsgSendOption* Arena::CreateMaybeMessage<::zb::dcts::MsgSendOption>(Arena*);
template<> ::zb::dcts::Physical* Arena::CreateMaybeMessage<::zb::dcts::Physical>(Arena*);
template<> ::zb::dcts::Position* Arena::CreateMaybeMessage<::zb::dcts::Position>(Arena*);
template<> ::zb::dcts::Posture* Arena::CreateMaybeMessage<::zb::dcts::Posture>(Arena*);
template<> ::zb::dcts::RealNumber* Arena::CreateMaybeMessage<::zb::dcts::RealNumber>(Arena*);
template<> ::zb::dcts::ReconnectionCfg* Arena::CreateMaybeMessage<::zb::dcts::ReconnectionCfg>(Arena*);
template<> ::zb::dcts::StatisticVal* Arena::CreateMaybeMessage<::zb::dcts::StatisticVal>(Arena*);
template<> ::zb::dcts::TaskId* Arena::CreateMaybeMessage<::zb::dcts::TaskId>(Arena*);
template<> ::zb::dcts::TimeSpan* Arena::CreateMaybeMessage<::zb::dcts::TimeSpan>(Arena*);
template<> ::zb::dcts::TimerParam* Arena::CreateMaybeMessage<::zb::dcts::TimerParam>(Arena*);
template<> ::zb::dcts::Timestamp* Arena::CreateMaybeMessage<::zb::dcts::Timestamp>(Arena*);
template<> ::zb::dcts::ZeromqLinkCfg* Arena::CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {

enum Physical_Type : int {
  Physical_Type_TEMPERATURE = 0,
  Physical_Type_HUMIDITY = 1,
  Physical_Type_ANGLE = 2,
  Physical_Type_DISTANCE = 3,
  Physical_Type_VELOCITY = 4,
  Physical_Type_ANGULAR_VELOCITY = 5,
  Physical_Type_VOTAGE = 6,
  Physical_Type_POWER = 7,
  Physical_Type_CURRENT = 8,
  Physical_Type_Physical_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Physical_Type_Physical_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Physical_Type_IsValid(int value);
constexpr Physical_Type Physical_Type_Type_MIN = Physical_Type_TEMPERATURE;
constexpr Physical_Type Physical_Type_Type_MAX = Physical_Type_CURRENT;
constexpr int Physical_Type_Type_ARRAYSIZE = Physical_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Physical_Type_descriptor();
template<typename T>
inline const std::string& Physical_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Physical_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Physical_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Physical_Type_descriptor(), enum_t_value);
}
inline bool Physical_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Physical_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Physical_Type>(
    Physical_Type_descriptor(), name, value);
}
// ===================================================================

class TaskId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.TaskId) */ {
 public:
  inline TaskId() : TaskId(nullptr) {}
  virtual ~TaskId();
  explicit constexpr TaskId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskId(const TaskId& from);
  TaskId(TaskId&& from) noexcept
    : TaskId() {
    *this = ::std::move(from);
  }

  inline TaskId& operator=(const TaskId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskId& operator=(TaskId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskId& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskId* internal_default_instance() {
    return reinterpret_cast<const TaskId*>(
               &_TaskId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskId& a, TaskId& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskId* New() const final {
    return CreateMaybeMessage<TaskId>(nullptr);
  }

  TaskId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskId& from);
  void MergeFrom(const TaskId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.TaskId";
  }
  protected:
  explicit TaskId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.TaskId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class Timestamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  virtual ~Timestamp();
  explicit constexpr Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // uint32 seconds = 1;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nanos = 2;
  void clear_nanos();
  ::PROTOBUF_NAMESPACE_ID::uint32 nanos() const;
  void set_nanos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nanos() const;
  void _internal_set_nanos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nanos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class TimeSpan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.TimeSpan) */ {
 public:
  inline TimeSpan() : TimeSpan(nullptr) {}
  virtual ~TimeSpan();
  explicit constexpr TimeSpan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSpan(const TimeSpan& from);
  TimeSpan(TimeSpan&& from) noexcept
    : TimeSpan() {
    *this = ::std::move(from);
  }

  inline TimeSpan& operator=(const TimeSpan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSpan& operator=(TimeSpan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSpan& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSpan* internal_default_instance() {
    return reinterpret_cast<const TimeSpan*>(
               &_TimeSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeSpan& a, TimeSpan& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSpan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSpan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSpan* New() const final {
    return CreateMaybeMessage<TimeSpan>(nullptr);
  }

  TimeSpan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSpan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSpan& from);
  void MergeFrom(const TimeSpan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSpan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.TimeSpan";
  }
  protected:
  explicit TimeSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kStopTimeFieldNumber = 2,
  };
  // .zb.dcts.Timestamp start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::zb::dcts::Timestamp& start_time() const;
  ::zb::dcts::Timestamp* release_start_time();
  ::zb::dcts::Timestamp* mutable_start_time();
  void set_allocated_start_time(::zb::dcts::Timestamp* start_time);
  private:
  const ::zb::dcts::Timestamp& _internal_start_time() const;
  ::zb::dcts::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::zb::dcts::Timestamp* start_time);
  ::zb::dcts::Timestamp* unsafe_arena_release_start_time();

  // .zb.dcts.Timestamp stop_time = 2;
  bool has_stop_time() const;
  private:
  bool _internal_has_stop_time() const;
  public:
  void clear_stop_time();
  const ::zb::dcts::Timestamp& stop_time() const;
  ::zb::dcts::Timestamp* release_stop_time();
  ::zb::dcts::Timestamp* mutable_stop_time();
  void set_allocated_stop_time(::zb::dcts::Timestamp* stop_time);
  private:
  const ::zb::dcts::Timestamp& _internal_stop_time() const;
  ::zb::dcts::Timestamp* _internal_mutable_stop_time();
  public:
  void unsafe_arena_set_allocated_stop_time(
      ::zb::dcts::Timestamp* stop_time);
  ::zb::dcts::Timestamp* unsafe_arena_release_stop_time();

  // @@protoc_insertion_point(class_scope:zb.dcts.TimeSpan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::Timestamp* start_time_;
  ::zb::dcts::Timestamp* stop_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  virtual ~Position();
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_;
  double longitude_;
  double altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class Posture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.Posture) */ {
 public:
  inline Posture() : Posture(nullptr) {}
  virtual ~Posture();
  explicit constexpr Posture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Posture(const Posture& from);
  Posture(Posture&& from) noexcept
    : Posture() {
    *this = ::std::move(from);
  }

  inline Posture& operator=(const Posture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Posture& operator=(Posture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Posture& default_instance() {
    return *internal_default_instance();
  }
  static inline const Posture* internal_default_instance() {
    return reinterpret_cast<const Posture*>(
               &_Posture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Posture& a, Posture& b) {
    a.Swap(&b);
  }
  inline void Swap(Posture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Posture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Posture* New() const final {
    return CreateMaybeMessage<Posture>(nullptr);
  }

  Posture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Posture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Posture& from);
  void MergeFrom(const Posture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Posture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.Posture";
  }
  protected:
  explicit Posture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // double yaw = 1;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // double pitch = 2;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double roll = 3;
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.Posture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double yaw_;
  double pitch_;
  double roll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class Direction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.Direction) */ {
 public:
  inline Direction() : Direction(nullptr) {}
  virtual ~Direction();
  explicit constexpr Direction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Direction(const Direction& from);
  Direction(Direction&& from) noexcept
    : Direction() {
    *this = ::std::move(from);
  }

  inline Direction& operator=(const Direction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Direction& operator=(Direction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Direction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Direction* internal_default_instance() {
    return reinterpret_cast<const Direction*>(
               &_Direction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Direction& a, Direction& b) {
    a.Swap(&b);
  }
  inline void Swap(Direction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Direction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Direction* New() const final {
    return CreateMaybeMessage<Direction>(nullptr);
  }

  Direction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Direction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Direction& from);
  void MergeFrom(const Direction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Direction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.Direction";
  }
  protected:
  explicit Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAzimuthFieldNumber = 1,
    kPitchFieldNumber = 2,
  };
  // double azimuth = 1;
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // double pitch = 2;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.Direction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double azimuth_;
  double pitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class DRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.DRange) */ {
 public:
  inline DRange() : DRange(nullptr) {}
  virtual ~DRange();
  explicit constexpr DRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DRange(const DRange& from);
  DRange(DRange&& from) noexcept
    : DRange() {
    *this = ::std::move(from);
  }

  inline DRange& operator=(const DRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DRange& operator=(DRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const DRange* internal_default_instance() {
    return reinterpret_cast<const DRange*>(
               &_DRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DRange& a, DRange& b) {
    a.Swap(&b);
  }
  inline void Swap(DRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DRange* New() const final {
    return CreateMaybeMessage<DRange>(nullptr);
  }

  DRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DRange& from);
  void MergeFrom(const DRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.DRange";
  }
  protected:
  explicit DRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kStopFieldNumber = 2,
  };
  // double start = 1;
  void clear_start();
  double start() const;
  void set_start(double value);
  private:
  double _internal_start() const;
  void _internal_set_start(double value);
  public:

  // double stop = 2;
  void clear_stop();
  double stop() const;
  void set_stop(double value);
  private:
  double _internal_stop() const;
  void _internal_set_stop(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.DRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double start_;
  double stop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class IRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.IRange) */ {
 public:
  inline IRange() : IRange(nullptr) {}
  virtual ~IRange();
  explicit constexpr IRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IRange(const IRange& from);
  IRange(IRange&& from) noexcept
    : IRange() {
    *this = ::std::move(from);
  }

  inline IRange& operator=(const IRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline IRange& operator=(IRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const IRange* internal_default_instance() {
    return reinterpret_cast<const IRange*>(
               &_IRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IRange& a, IRange& b) {
    a.Swap(&b);
  }
  inline void Swap(IRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IRange* New() const final {
    return CreateMaybeMessage<IRange>(nullptr);
  }

  IRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IRange& from);
  void MergeFrom(const IRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.IRange";
  }
  protected:
  explicit IRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kStopFieldNumber = 2,
  };
  // int32 start = 1;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stop = 2;
  void clear_stop();
  ::PROTOBUF_NAMESPACE_ID::int32 stop() const;
  void set_stop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stop() const;
  void _internal_set_stop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.IRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 stop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class Physical PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.Physical) */ {
 public:
  inline Physical() : Physical(nullptr) {}
  virtual ~Physical();
  explicit constexpr Physical(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Physical(const Physical& from);
  Physical(Physical&& from) noexcept
    : Physical() {
    *this = ::std::move(from);
  }

  inline Physical& operator=(const Physical& from) {
    CopyFrom(from);
    return *this;
  }
  inline Physical& operator=(Physical&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Physical& default_instance() {
    return *internal_default_instance();
  }
  static inline const Physical* internal_default_instance() {
    return reinterpret_cast<const Physical*>(
               &_Physical_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Physical& a, Physical& b) {
    a.Swap(&b);
  }
  inline void Swap(Physical* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Physical* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Physical* New() const final {
    return CreateMaybeMessage<Physical>(nullptr);
  }

  Physical* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Physical>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Physical& from);
  void MergeFrom(const Physical& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Physical* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.Physical";
  }
  protected:
  explicit Physical(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Physical_Type Type;
  static constexpr Type TEMPERATURE =
    Physical_Type_TEMPERATURE;
  static constexpr Type HUMIDITY =
    Physical_Type_HUMIDITY;
  static constexpr Type ANGLE =
    Physical_Type_ANGLE;
  static constexpr Type DISTANCE =
    Physical_Type_DISTANCE;
  static constexpr Type VELOCITY =
    Physical_Type_VELOCITY;
  static constexpr Type ANGULAR_VELOCITY =
    Physical_Type_ANGULAR_VELOCITY;
  static constexpr Type VOTAGE =
    Physical_Type_VOTAGE;
  static constexpr Type POWER =
    Physical_Type_POWER;
  static constexpr Type CURRENT =
    Physical_Type_CURRENT;
  static inline bool Type_IsValid(int value) {
    return Physical_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Physical_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Physical_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Physical_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Physical_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Physical_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Physical_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 3,
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string unit = 3;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // .zb.dcts.Physical.Type type = 1;
  void clear_type();
  ::zb::dcts::Physical_Type type() const;
  void set_type(::zb::dcts::Physical_Type value);
  private:
  ::zb::dcts::Physical_Type _internal_type() const;
  void _internal_set_type(::zb::dcts::Physical_Type value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.Physical)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  double value_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class Integer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.Integer) */ {
 public:
  inline Integer() : Integer(nullptr) {}
  virtual ~Integer();
  explicit constexpr Integer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Integer(const Integer& from);
  Integer(Integer&& from) noexcept
    : Integer() {
    *this = ::std::move(from);
  }

  inline Integer& operator=(const Integer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Integer& operator=(Integer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Integer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Integer* internal_default_instance() {
    return reinterpret_cast<const Integer*>(
               &_Integer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Integer& a, Integer& b) {
    a.Swap(&b);
  }
  inline void Swap(Integer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Integer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Integer* New() const final {
    return CreateMaybeMessage<Integer>(nullptr);
  }

  Integer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Integer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Integer& from);
  void MergeFrom(const Integer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Integer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.Integer";
  }
  protected:
  explicit Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.Integer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class Boolean PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.Boolean) */ {
 public:
  inline Boolean() : Boolean(nullptr) {}
  virtual ~Boolean();
  explicit constexpr Boolean(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Boolean(const Boolean& from);
  Boolean(Boolean&& from) noexcept
    : Boolean() {
    *this = ::std::move(from);
  }

  inline Boolean& operator=(const Boolean& from) {
    CopyFrom(from);
    return *this;
  }
  inline Boolean& operator=(Boolean&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Boolean& default_instance() {
    return *internal_default_instance();
  }
  static inline const Boolean* internal_default_instance() {
    return reinterpret_cast<const Boolean*>(
               &_Boolean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Boolean& a, Boolean& b) {
    a.Swap(&b);
  }
  inline void Swap(Boolean* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Boolean* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Boolean* New() const final {
    return CreateMaybeMessage<Boolean>(nullptr);
  }

  Boolean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Boolean>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Boolean& from);
  void MergeFrom(const Boolean& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Boolean* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.Boolean";
  }
  protected:
  explicit Boolean(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.Boolean)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class RealNumber PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.RealNumber) */ {
 public:
  inline RealNumber() : RealNumber(nullptr) {}
  virtual ~RealNumber();
  explicit constexpr RealNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RealNumber(const RealNumber& from);
  RealNumber(RealNumber&& from) noexcept
    : RealNumber() {
    *this = ::std::move(from);
  }

  inline RealNumber& operator=(const RealNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealNumber& operator=(RealNumber&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const RealNumber* internal_default_instance() {
    return reinterpret_cast<const RealNumber*>(
               &_RealNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RealNumber& a, RealNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(RealNumber* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealNumber* New() const final {
    return CreateMaybeMessage<RealNumber>(nullptr);
  }

  RealNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealNumber& from);
  void MergeFrom(const RealNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.RealNumber";
  }
  protected:
  explicit RealNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.RealNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class ComplexNumber PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.ComplexNumber) */ {
 public:
  inline ComplexNumber() : ComplexNumber(nullptr) {}
  virtual ~ComplexNumber();
  explicit constexpr ComplexNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexNumber(const ComplexNumber& from);
  ComplexNumber(ComplexNumber&& from) noexcept
    : ComplexNumber() {
    *this = ::std::move(from);
  }

  inline ComplexNumber& operator=(const ComplexNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexNumber& operator=(ComplexNumber&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComplexNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexNumber* internal_default_instance() {
    return reinterpret_cast<const ComplexNumber*>(
               &_ComplexNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ComplexNumber& a, ComplexNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexNumber* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComplexNumber* New() const final {
    return CreateMaybeMessage<ComplexNumber>(nullptr);
  }

  ComplexNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComplexNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComplexNumber& from);
  void MergeFrom(const ComplexNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.ComplexNumber";
  }
  protected:
  explicit ComplexNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // double real = 1;
  void clear_real();
  double real() const;
  void set_real(double value);
  private:
  double _internal_real() const;
  void _internal_set_real(double value);
  public:

  // double image = 2;
  void clear_image();
  double image() const;
  void set_image(double value);
  private:
  double _internal_image() const;
  void _internal_set_image(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.ComplexNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double real_;
  double image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class StatisticVal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.StatisticVal) */ {
 public:
  inline StatisticVal() : StatisticVal(nullptr) {}
  virtual ~StatisticVal();
  explicit constexpr StatisticVal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatisticVal(const StatisticVal& from);
  StatisticVal(StatisticVal&& from) noexcept
    : StatisticVal() {
    *this = ::std::move(from);
  }

  inline StatisticVal& operator=(const StatisticVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticVal& operator=(StatisticVal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatisticVal& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatisticVal* internal_default_instance() {
    return reinterpret_cast<const StatisticVal*>(
               &_StatisticVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StatisticVal& a, StatisticVal& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticVal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticVal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticVal* New() const final {
    return CreateMaybeMessage<StatisticVal>(nullptr);
  }

  StatisticVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatisticVal& from);
  void MergeFrom(const StatisticVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.StatisticVal";
  }
  protected:
  explicit StatisticVal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kDownFieldNumber = 2,
    kCurFieldNumber = 3,
    kMeanFieldNumber = 4,
  };
  // double up = 1;
  void clear_up();
  double up() const;
  void set_up(double value);
  private:
  double _internal_up() const;
  void _internal_set_up(double value);
  public:

  // double down = 2;
  void clear_down();
  double down() const;
  void set_down(double value);
  private:
  double _internal_down() const;
  void _internal_set_down(double value);
  public:

  // double cur = 3;
  void clear_cur();
  double cur() const;
  void set_cur(double value);
  private:
  double _internal_cur() const;
  void _internal_set_cur(double value);
  public:

  // double mean = 4;
  void clear_mean();
  double mean() const;
  void set_mean(double value);
  private:
  double _internal_mean() const;
  void _internal_set_mean(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.StatisticVal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double up_;
  double down_;
  double cur_;
  double mean_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatCfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.HeartbeatCfg) */ {
 public:
  inline HeartbeatCfg() : HeartbeatCfg(nullptr) {}
  virtual ~HeartbeatCfg();
  explicit constexpr HeartbeatCfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatCfg(const HeartbeatCfg& from);
  HeartbeatCfg(HeartbeatCfg&& from) noexcept
    : HeartbeatCfg() {
    *this = ::std::move(from);
  }

  inline HeartbeatCfg& operator=(const HeartbeatCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatCfg& operator=(HeartbeatCfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartbeatCfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatCfg* internal_default_instance() {
    return reinterpret_cast<const HeartbeatCfg*>(
               &_HeartbeatCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HeartbeatCfg& a, HeartbeatCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatCfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatCfg* New() const final {
    return CreateMaybeMessage<HeartbeatCfg>(nullptr);
  }

  HeartbeatCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartbeatCfg& from);
  void MergeFrom(const HeartbeatCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.HeartbeatCfg";
  }
  protected:
  explicit HeartbeatCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatIntervalFieldNumber = 1,
    kHeartbeatTimeoutFieldNumber = 2,
    kHeartbeatTtlFieldNumber = 3,
  };
  // int32 heartbeat_interval = 1;
  void clear_heartbeat_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 heartbeat_interval() const;
  void set_heartbeat_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heartbeat_interval() const;
  void _internal_set_heartbeat_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 heartbeat_timeout = 2;
  void clear_heartbeat_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 heartbeat_timeout() const;
  void set_heartbeat_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heartbeat_timeout() const;
  void _internal_set_heartbeat_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 heartbeat_ttl = 3;
  void clear_heartbeat_ttl();
  ::PROTOBUF_NAMESPACE_ID::int32 heartbeat_ttl() const;
  void set_heartbeat_ttl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heartbeat_ttl() const;
  void _internal_set_heartbeat_ttl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.HeartbeatCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 heartbeat_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 heartbeat_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 heartbeat_ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class ReconnectionCfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.ReconnectionCfg) */ {
 public:
  inline ReconnectionCfg() : ReconnectionCfg(nullptr) {}
  virtual ~ReconnectionCfg();
  explicit constexpr ReconnectionCfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReconnectionCfg(const ReconnectionCfg& from);
  ReconnectionCfg(ReconnectionCfg&& from) noexcept
    : ReconnectionCfg() {
    *this = ::std::move(from);
  }

  inline ReconnectionCfg& operator=(const ReconnectionCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconnectionCfg& operator=(ReconnectionCfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconnectionCfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReconnectionCfg* internal_default_instance() {
    return reinterpret_cast<const ReconnectionCfg*>(
               &_ReconnectionCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReconnectionCfg& a, ReconnectionCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconnectionCfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconnectionCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconnectionCfg* New() const final {
    return CreateMaybeMessage<ReconnectionCfg>(nullptr);
  }

  ReconnectionCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconnectionCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconnectionCfg& from);
  void MergeFrom(const ReconnectionCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconnectionCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.ReconnectionCfg";
  }
  protected:
  explicit ReconnectionCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconnectIntervalFieldNumber = 1,
    kReconnectIntervalMaxFieldNumber = 2,
  };
  // int32 reconnect_interval = 1;
  void clear_reconnect_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 reconnect_interval() const;
  void set_reconnect_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reconnect_interval() const;
  void _internal_set_reconnect_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reconnect_interval_max = 2;
  void clear_reconnect_interval_max();
  ::PROTOBUF_NAMESPACE_ID::int32 reconnect_interval_max() const;
  void set_reconnect_interval_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reconnect_interval_max() const;
  void _internal_set_reconnect_interval_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.ReconnectionCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 reconnect_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 reconnect_interval_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class MsgSendOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.MsgSendOption) */ {
 public:
  inline MsgSendOption() : MsgSendOption(nullptr) {}
  virtual ~MsgSendOption();
  explicit constexpr MsgSendOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSendOption(const MsgSendOption& from);
  MsgSendOption(MsgSendOption&& from) noexcept
    : MsgSendOption() {
    *this = ::std::move(from);
  }

  inline MsgSendOption& operator=(const MsgSendOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSendOption& operator=(MsgSendOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgSendOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSendOption* internal_default_instance() {
    return reinterpret_cast<const MsgSendOption*>(
               &_MsgSendOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MsgSendOption& a, MsgSendOption& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSendOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSendOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgSendOption* New() const final {
    return CreateMaybeMessage<MsgSendOption>(nullptr);
  }

  MsgSendOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgSendOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgSendOption& from);
  void MergeFrom(const MsgSendOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSendOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.MsgSendOption";
  }
  protected:
  explicit MsgSendOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHwmFieldNumber = 1,
    kLingerFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // int32 hwm = 1;
  void clear_hwm();
  ::PROTOBUF_NAMESPACE_ID::int32 hwm() const;
  void set_hwm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hwm() const;
  void _internal_set_hwm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 linger = 2;
  void clear_linger();
  ::PROTOBUF_NAMESPACE_ID::int32 linger() const;
  void set_linger(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_linger() const;
  void _internal_set_linger(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeout = 3;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.MsgSendOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 hwm_;
  ::PROTOBUF_NAMESPACE_ID::int32 linger_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class IPv4Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.IPv4Address) */ {
 public:
  inline IPv4Address() : IPv4Address(nullptr) {}
  virtual ~IPv4Address();
  explicit constexpr IPv4Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPv4Address(const IPv4Address& from);
  IPv4Address(IPv4Address&& from) noexcept
    : IPv4Address() {
    *this = ::std::move(from);
  }

  inline IPv4Address& operator=(const IPv4Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPv4Address& operator=(IPv4Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPv4Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPv4Address* internal_default_instance() {
    return reinterpret_cast<const IPv4Address*>(
               &_IPv4Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IPv4Address& a, IPv4Address& b) {
    a.Swap(&b);
  }
  inline void Swap(IPv4Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPv4Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPv4Address* New() const final {
    return CreateMaybeMessage<IPv4Address>(nullptr);
  }

  IPv4Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPv4Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPv4Address& from);
  void MergeFrom(const IPv4Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPv4Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.IPv4Address";
  }
  protected:
  explicit IPv4Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.IPv4Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class ZeromqLinkCfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.ZeromqLinkCfg) */ {
 public:
  inline ZeromqLinkCfg() : ZeromqLinkCfg(nullptr) {}
  virtual ~ZeromqLinkCfg();
  explicit constexpr ZeromqLinkCfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZeromqLinkCfg(const ZeromqLinkCfg& from);
  ZeromqLinkCfg(ZeromqLinkCfg&& from) noexcept
    : ZeromqLinkCfg() {
    *this = ::std::move(from);
  }

  inline ZeromqLinkCfg& operator=(const ZeromqLinkCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZeromqLinkCfg& operator=(ZeromqLinkCfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZeromqLinkCfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZeromqLinkCfg* internal_default_instance() {
    return reinterpret_cast<const ZeromqLinkCfg*>(
               &_ZeromqLinkCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ZeromqLinkCfg& a, ZeromqLinkCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(ZeromqLinkCfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZeromqLinkCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZeromqLinkCfg* New() const final {
    return CreateMaybeMessage<ZeromqLinkCfg>(nullptr);
  }

  ZeromqLinkCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZeromqLinkCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZeromqLinkCfg& from);
  void MergeFrom(const ZeromqLinkCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZeromqLinkCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.ZeromqLinkCfg";
  }
  protected:
  explicit ZeromqLinkCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkNameFieldNumber = 2,
    kAddressFieldNumber = 1,
    kHeartbeatCfgFieldNumber = 4,
    kReconnectCfgFieldNumber = 5,
    kMsgSendCfgFieldNumber = 6,
  };
  // string link_name = 2;
  void clear_link_name();
  const std::string& link_name() const;
  void set_link_name(const std::string& value);
  void set_link_name(std::string&& value);
  void set_link_name(const char* value);
  void set_link_name(const char* value, size_t size);
  std::string* mutable_link_name();
  std::string* release_link_name();
  void set_allocated_link_name(std::string* link_name);
  private:
  const std::string& _internal_link_name() const;
  void _internal_set_link_name(const std::string& value);
  std::string* _internal_mutable_link_name();
  public:

  // .zb.dcts.IPv4Address address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::zb::dcts::IPv4Address& address() const;
  ::zb::dcts::IPv4Address* release_address();
  ::zb::dcts::IPv4Address* mutable_address();
  void set_allocated_address(::zb::dcts::IPv4Address* address);
  private:
  const ::zb::dcts::IPv4Address& _internal_address() const;
  ::zb::dcts::IPv4Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::zb::dcts::IPv4Address* address);
  ::zb::dcts::IPv4Address* unsafe_arena_release_address();

  // .zb.dcts.HeartbeatCfg heartbeat_cfg = 4;
  bool has_heartbeat_cfg() const;
  private:
  bool _internal_has_heartbeat_cfg() const;
  public:
  void clear_heartbeat_cfg();
  const ::zb::dcts::HeartbeatCfg& heartbeat_cfg() const;
  ::zb::dcts::HeartbeatCfg* release_heartbeat_cfg();
  ::zb::dcts::HeartbeatCfg* mutable_heartbeat_cfg();
  void set_allocated_heartbeat_cfg(::zb::dcts::HeartbeatCfg* heartbeat_cfg);
  private:
  const ::zb::dcts::HeartbeatCfg& _internal_heartbeat_cfg() const;
  ::zb::dcts::HeartbeatCfg* _internal_mutable_heartbeat_cfg();
  public:
  void unsafe_arena_set_allocated_heartbeat_cfg(
      ::zb::dcts::HeartbeatCfg* heartbeat_cfg);
  ::zb::dcts::HeartbeatCfg* unsafe_arena_release_heartbeat_cfg();

  // .zb.dcts.ReconnectionCfg reconnect_cfg = 5;
  bool has_reconnect_cfg() const;
  private:
  bool _internal_has_reconnect_cfg() const;
  public:
  void clear_reconnect_cfg();
  const ::zb::dcts::ReconnectionCfg& reconnect_cfg() const;
  ::zb::dcts::ReconnectionCfg* release_reconnect_cfg();
  ::zb::dcts::ReconnectionCfg* mutable_reconnect_cfg();
  void set_allocated_reconnect_cfg(::zb::dcts::ReconnectionCfg* reconnect_cfg);
  private:
  const ::zb::dcts::ReconnectionCfg& _internal_reconnect_cfg() const;
  ::zb::dcts::ReconnectionCfg* _internal_mutable_reconnect_cfg();
  public:
  void unsafe_arena_set_allocated_reconnect_cfg(
      ::zb::dcts::ReconnectionCfg* reconnect_cfg);
  ::zb::dcts::ReconnectionCfg* unsafe_arena_release_reconnect_cfg();

  // .zb.dcts.MsgSendOption msg_send_cfg = 6;
  bool has_msg_send_cfg() const;
  private:
  bool _internal_has_msg_send_cfg() const;
  public:
  void clear_msg_send_cfg();
  const ::zb::dcts::MsgSendOption& msg_send_cfg() const;
  ::zb::dcts::MsgSendOption* release_msg_send_cfg();
  ::zb::dcts::MsgSendOption* mutable_msg_send_cfg();
  void set_allocated_msg_send_cfg(::zb::dcts::MsgSendOption* msg_send_cfg);
  private:
  const ::zb::dcts::MsgSendOption& _internal_msg_send_cfg() const;
  ::zb::dcts::MsgSendOption* _internal_mutable_msg_send_cfg();
  public:
  void unsafe_arena_set_allocated_msg_send_cfg(
      ::zb::dcts::MsgSendOption* msg_send_cfg);
  ::zb::dcts::MsgSendOption* unsafe_arena_release_msg_send_cfg();

  // @@protoc_insertion_point(class_scope:zb.dcts.ZeromqLinkCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_name_;
  ::zb::dcts::IPv4Address* address_;
  ::zb::dcts::HeartbeatCfg* heartbeat_cfg_;
  ::zb::dcts::ReconnectionCfg* reconnect_cfg_;
  ::zb::dcts::MsgSendOption* msg_send_cfg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// -------------------------------------------------------------------

class TimerParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.TimerParam) */ {
 public:
  inline TimerParam() : TimerParam(nullptr) {}
  virtual ~TimerParam();
  explicit constexpr TimerParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimerParam(const TimerParam& from);
  TimerParam(TimerParam&& from) noexcept
    : TimerParam() {
    *this = ::std::move(from);
  }

  inline TimerParam& operator=(const TimerParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerParam& operator=(TimerParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimerParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimerParam* internal_default_instance() {
    return reinterpret_cast<const TimerParam*>(
               &_TimerParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TimerParam& a, TimerParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TimerParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimerParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimerParam* New() const final {
    return CreateMaybeMessage<TimerParam>(nullptr);
  }

  TimerParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimerParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimerParam& from);
  void MergeFrom(const TimerParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.TimerParam";
  }
  protected:
  explicit TimerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dcts_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalInMsFieldNumber = 1,
    kTimesFieldNumber = 2,
  };
  // int32 interval_in_ms = 1;
  void clear_interval_in_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 interval_in_ms() const;
  void set_interval_in_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_interval_in_ms() const;
  void _internal_set_interval_in_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 times = 2;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.TimerParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 interval_in_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskId

// uint32 value = 1;
inline void TaskId::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskId::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskId::value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.TaskId.value)
  return _internal_value();
}
inline void TaskId::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void TaskId::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.TaskId.value)
}

// -------------------------------------------------------------------

// Timestamp

// uint32 seconds = 1;
inline void Timestamp::clear_seconds() {
  seconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Timestamp.seconds)
  return _internal_seconds();
}
inline void Timestamp::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seconds_ = value;
}
inline void Timestamp::set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Timestamp.seconds)
}

// uint32 nanos = 2;
inline void Timestamp::clear_nanos() {
  nanos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::_internal_nanos() const {
  return nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Timestamp.nanos)
  return _internal_nanos();
}
inline void Timestamp::_internal_set_nanos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nanos_ = value;
}
inline void Timestamp::set_nanos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Timestamp.nanos)
}

// -------------------------------------------------------------------

// TimeSpan

// .zb.dcts.Timestamp start_time = 1;
inline bool TimeSpan::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool TimeSpan::has_start_time() const {
  return _internal_has_start_time();
}
inline void TimeSpan::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
inline const ::zb::dcts::Timestamp& TimeSpan::_internal_start_time() const {
  const ::zb::dcts::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Timestamp&>(
      ::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& TimeSpan::start_time() const {
  // @@protoc_insertion_point(field_get:zb.dcts.TimeSpan.start_time)
  return _internal_start_time();
}
inline void TimeSpan::unsafe_arena_set_allocated_start_time(
    ::zb::dcts::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.TimeSpan.start_time)
}
inline ::zb::dcts::Timestamp* TimeSpan::release_start_time() {
  
  ::zb::dcts::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* TimeSpan::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:zb.dcts.TimeSpan.start_time)
  
  ::zb::dcts::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* TimeSpan::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline ::zb::dcts::Timestamp* TimeSpan::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.TimeSpan.start_time)
  return _internal_mutable_start_time();
}
inline void TimeSpan::set_allocated_start_time(::zb::dcts::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_time_;
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_time);
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.TimeSpan.start_time)
}

// .zb.dcts.Timestamp stop_time = 2;
inline bool TimeSpan::_internal_has_stop_time() const {
  return this != internal_default_instance() && stop_time_ != nullptr;
}
inline bool TimeSpan::has_stop_time() const {
  return _internal_has_stop_time();
}
inline void TimeSpan::clear_stop_time() {
  if (GetArena() == nullptr && stop_time_ != nullptr) {
    delete stop_time_;
  }
  stop_time_ = nullptr;
}
inline const ::zb::dcts::Timestamp& TimeSpan::_internal_stop_time() const {
  const ::zb::dcts::Timestamp* p = stop_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Timestamp&>(
      ::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& TimeSpan::stop_time() const {
  // @@protoc_insertion_point(field_get:zb.dcts.TimeSpan.stop_time)
  return _internal_stop_time();
}
inline void TimeSpan::unsafe_arena_set_allocated_stop_time(
    ::zb::dcts::Timestamp* stop_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_time_);
  }
  stop_time_ = stop_time;
  if (stop_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.TimeSpan.stop_time)
}
inline ::zb::dcts::Timestamp* TimeSpan::release_stop_time() {
  
  ::zb::dcts::Timestamp* temp = stop_time_;
  stop_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* TimeSpan::unsafe_arena_release_stop_time() {
  // @@protoc_insertion_point(field_release:zb.dcts.TimeSpan.stop_time)
  
  ::zb::dcts::Timestamp* temp = stop_time_;
  stop_time_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* TimeSpan::_internal_mutable_stop_time() {
  
  if (stop_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    stop_time_ = p;
  }
  return stop_time_;
}
inline ::zb::dcts::Timestamp* TimeSpan::mutable_stop_time() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.TimeSpan.stop_time)
  return _internal_mutable_stop_time();
}
inline void TimeSpan::set_allocated_stop_time(::zb::dcts::Timestamp* stop_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_time_;
  }
  if (stop_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_time);
    if (message_arena != submessage_arena) {
      stop_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_time, submessage_arena);
    }
    
  } else {
    
  }
  stop_time_ = stop_time;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.TimeSpan.stop_time)
}

// -------------------------------------------------------------------

// Position

// double latitude = 1;
inline void Position::clear_latitude() {
  latitude_ = 0;
}
inline double Position::_internal_latitude() const {
  return latitude_;
}
inline double Position::latitude() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Position.latitude)
  return _internal_latitude();
}
inline void Position::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Position::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Position.latitude)
}

// double longitude = 2;
inline void Position::clear_longitude() {
  longitude_ = 0;
}
inline double Position::_internal_longitude() const {
  return longitude_;
}
inline double Position::longitude() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Position.longitude)
  return _internal_longitude();
}
inline void Position::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Position::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Position.longitude)
}

// double altitude = 3;
inline void Position::clear_altitude() {
  altitude_ = 0;
}
inline double Position::_internal_altitude() const {
  return altitude_;
}
inline double Position::altitude() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Position.altitude)
  return _internal_altitude();
}
inline void Position::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void Position::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Position.altitude)
}

// -------------------------------------------------------------------

// Posture

// double yaw = 1;
inline void Posture::clear_yaw() {
  yaw_ = 0;
}
inline double Posture::_internal_yaw() const {
  return yaw_;
}
inline double Posture::yaw() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Posture.yaw)
  return _internal_yaw();
}
inline void Posture::_internal_set_yaw(double value) {
  
  yaw_ = value;
}
inline void Posture::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Posture.yaw)
}

// double pitch = 2;
inline void Posture::clear_pitch() {
  pitch_ = 0;
}
inline double Posture::_internal_pitch() const {
  return pitch_;
}
inline double Posture::pitch() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Posture.pitch)
  return _internal_pitch();
}
inline void Posture::_internal_set_pitch(double value) {
  
  pitch_ = value;
}
inline void Posture::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Posture.pitch)
}

// double roll = 3;
inline void Posture::clear_roll() {
  roll_ = 0;
}
inline double Posture::_internal_roll() const {
  return roll_;
}
inline double Posture::roll() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Posture.roll)
  return _internal_roll();
}
inline void Posture::_internal_set_roll(double value) {
  
  roll_ = value;
}
inline void Posture::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Posture.roll)
}

// -------------------------------------------------------------------

// Direction

// double azimuth = 1;
inline void Direction::clear_azimuth() {
  azimuth_ = 0;
}
inline double Direction::_internal_azimuth() const {
  return azimuth_;
}
inline double Direction::azimuth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Direction.azimuth)
  return _internal_azimuth();
}
inline void Direction::_internal_set_azimuth(double value) {
  
  azimuth_ = value;
}
inline void Direction::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Direction.azimuth)
}

// double pitch = 2;
inline void Direction::clear_pitch() {
  pitch_ = 0;
}
inline double Direction::_internal_pitch() const {
  return pitch_;
}
inline double Direction::pitch() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Direction.pitch)
  return _internal_pitch();
}
inline void Direction::_internal_set_pitch(double value) {
  
  pitch_ = value;
}
inline void Direction::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Direction.pitch)
}

// -------------------------------------------------------------------

// DRange

// double start = 1;
inline void DRange::clear_start() {
  start_ = 0;
}
inline double DRange::_internal_start() const {
  return start_;
}
inline double DRange::start() const {
  // @@protoc_insertion_point(field_get:zb.dcts.DRange.start)
  return _internal_start();
}
inline void DRange::_internal_set_start(double value) {
  
  start_ = value;
}
inline void DRange::set_start(double value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:zb.dcts.DRange.start)
}

// double stop = 2;
inline void DRange::clear_stop() {
  stop_ = 0;
}
inline double DRange::_internal_stop() const {
  return stop_;
}
inline double DRange::stop() const {
  // @@protoc_insertion_point(field_get:zb.dcts.DRange.stop)
  return _internal_stop();
}
inline void DRange::_internal_set_stop(double value) {
  
  stop_ = value;
}
inline void DRange::set_stop(double value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:zb.dcts.DRange.stop)
}

// -------------------------------------------------------------------

// IRange

// int32 start = 1;
inline void IRange::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRange::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRange::start() const {
  // @@protoc_insertion_point(field_get:zb.dcts.IRange.start)
  return _internal_start();
}
inline void IRange::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void IRange::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:zb.dcts.IRange.start)
}

// int32 stop = 2;
inline void IRange::clear_stop() {
  stop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRange::_internal_stop() const {
  return stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRange::stop() const {
  // @@protoc_insertion_point(field_get:zb.dcts.IRange.stop)
  return _internal_stop();
}
inline void IRange::_internal_set_stop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stop_ = value;
}
inline void IRange::set_stop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:zb.dcts.IRange.stop)
}

// -------------------------------------------------------------------

// Physical

// .zb.dcts.Physical.Type type = 1;
inline void Physical::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::Physical_Type Physical::_internal_type() const {
  return static_cast< ::zb::dcts::Physical_Type >(type_);
}
inline ::zb::dcts::Physical_Type Physical::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Physical.type)
  return _internal_type();
}
inline void Physical::_internal_set_type(::zb::dcts::Physical_Type value) {
  
  type_ = value;
}
inline void Physical::set_type(::zb::dcts::Physical_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Physical.type)
}

// double value = 2;
inline void Physical::clear_value() {
  value_ = 0;
}
inline double Physical::_internal_value() const {
  return value_;
}
inline double Physical::value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Physical.value)
  return _internal_value();
}
inline void Physical::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Physical::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Physical.value)
}

// string unit = 3;
inline void Physical::clear_unit() {
  unit_.ClearToEmpty();
}
inline const std::string& Physical::unit() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Physical.unit)
  return _internal_unit();
}
inline void Physical::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Physical.unit)
}
inline std::string* Physical::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.Physical.unit)
  return _internal_mutable_unit();
}
inline const std::string& Physical::_internal_unit() const {
  return unit_.Get();
}
inline void Physical::_internal_set_unit(const std::string& value) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Physical::set_unit(std::string&& value) {
  
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.Physical.unit)
}
inline void Physical::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.Physical.unit)
}
inline void Physical::set_unit(const char* value,
    size_t size) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.Physical.unit)
}
inline std::string* Physical::_internal_mutable_unit() {
  
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Physical::release_unit() {
  // @@protoc_insertion_point(field_release:zb.dcts.Physical.unit)
  return unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Physical::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.Physical.unit)
}

// -------------------------------------------------------------------

// Integer

// int64 value = 1;
inline void Integer::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Integer::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Integer::value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Integer.value)
  return _internal_value();
}
inline void Integer::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Integer::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Integer.value)
}

// -------------------------------------------------------------------

// Boolean

// bool value = 1;
inline void Boolean::clear_value() {
  value_ = false;
}
inline bool Boolean::_internal_value() const {
  return value_;
}
inline bool Boolean::value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.Boolean.value)
  return _internal_value();
}
inline void Boolean::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void Boolean::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.Boolean.value)
}

// -------------------------------------------------------------------

// RealNumber

// double value = 1;
inline void RealNumber::clear_value() {
  value_ = 0;
}
inline double RealNumber::_internal_value() const {
  return value_;
}
inline double RealNumber::value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.RealNumber.value)
  return _internal_value();
}
inline void RealNumber::_internal_set_value(double value) {
  
  value_ = value;
}
inline void RealNumber::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.RealNumber.value)
}

// -------------------------------------------------------------------

// ComplexNumber

// double real = 1;
inline void ComplexNumber::clear_real() {
  real_ = 0;
}
inline double ComplexNumber::_internal_real() const {
  return real_;
}
inline double ComplexNumber::real() const {
  // @@protoc_insertion_point(field_get:zb.dcts.ComplexNumber.real)
  return _internal_real();
}
inline void ComplexNumber::_internal_set_real(double value) {
  
  real_ = value;
}
inline void ComplexNumber::set_real(double value) {
  _internal_set_real(value);
  // @@protoc_insertion_point(field_set:zb.dcts.ComplexNumber.real)
}

// double image = 2;
inline void ComplexNumber::clear_image() {
  image_ = 0;
}
inline double ComplexNumber::_internal_image() const {
  return image_;
}
inline double ComplexNumber::image() const {
  // @@protoc_insertion_point(field_get:zb.dcts.ComplexNumber.image)
  return _internal_image();
}
inline void ComplexNumber::_internal_set_image(double value) {
  
  image_ = value;
}
inline void ComplexNumber::set_image(double value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:zb.dcts.ComplexNumber.image)
}

// -------------------------------------------------------------------

// StatisticVal

// double up = 1;
inline void StatisticVal::clear_up() {
  up_ = 0;
}
inline double StatisticVal::_internal_up() const {
  return up_;
}
inline double StatisticVal::up() const {
  // @@protoc_insertion_point(field_get:zb.dcts.StatisticVal.up)
  return _internal_up();
}
inline void StatisticVal::_internal_set_up(double value) {
  
  up_ = value;
}
inline void StatisticVal::set_up(double value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:zb.dcts.StatisticVal.up)
}

// double down = 2;
inline void StatisticVal::clear_down() {
  down_ = 0;
}
inline double StatisticVal::_internal_down() const {
  return down_;
}
inline double StatisticVal::down() const {
  // @@protoc_insertion_point(field_get:zb.dcts.StatisticVal.down)
  return _internal_down();
}
inline void StatisticVal::_internal_set_down(double value) {
  
  down_ = value;
}
inline void StatisticVal::set_down(double value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:zb.dcts.StatisticVal.down)
}

// double cur = 3;
inline void StatisticVal::clear_cur() {
  cur_ = 0;
}
inline double StatisticVal::_internal_cur() const {
  return cur_;
}
inline double StatisticVal::cur() const {
  // @@protoc_insertion_point(field_get:zb.dcts.StatisticVal.cur)
  return _internal_cur();
}
inline void StatisticVal::_internal_set_cur(double value) {
  
  cur_ = value;
}
inline void StatisticVal::set_cur(double value) {
  _internal_set_cur(value);
  // @@protoc_insertion_point(field_set:zb.dcts.StatisticVal.cur)
}

// double mean = 4;
inline void StatisticVal::clear_mean() {
  mean_ = 0;
}
inline double StatisticVal::_internal_mean() const {
  return mean_;
}
inline double StatisticVal::mean() const {
  // @@protoc_insertion_point(field_get:zb.dcts.StatisticVal.mean)
  return _internal_mean();
}
inline void StatisticVal::_internal_set_mean(double value) {
  
  mean_ = value;
}
inline void StatisticVal::set_mean(double value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:zb.dcts.StatisticVal.mean)
}

// -------------------------------------------------------------------

// HeartbeatCfg

// int32 heartbeat_interval = 1;
inline void HeartbeatCfg::clear_heartbeat_interval() {
  heartbeat_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatCfg::_internal_heartbeat_interval() const {
  return heartbeat_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatCfg::heartbeat_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.HeartbeatCfg.heartbeat_interval)
  return _internal_heartbeat_interval();
}
inline void HeartbeatCfg::_internal_set_heartbeat_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heartbeat_interval_ = value;
}
inline void HeartbeatCfg::set_heartbeat_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heartbeat_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.HeartbeatCfg.heartbeat_interval)
}

// int32 heartbeat_timeout = 2;
inline void HeartbeatCfg::clear_heartbeat_timeout() {
  heartbeat_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatCfg::_internal_heartbeat_timeout() const {
  return heartbeat_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatCfg::heartbeat_timeout() const {
  // @@protoc_insertion_point(field_get:zb.dcts.HeartbeatCfg.heartbeat_timeout)
  return _internal_heartbeat_timeout();
}
inline void HeartbeatCfg::_internal_set_heartbeat_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heartbeat_timeout_ = value;
}
inline void HeartbeatCfg::set_heartbeat_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heartbeat_timeout(value);
  // @@protoc_insertion_point(field_set:zb.dcts.HeartbeatCfg.heartbeat_timeout)
}

// int32 heartbeat_ttl = 3;
inline void HeartbeatCfg::clear_heartbeat_ttl() {
  heartbeat_ttl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatCfg::_internal_heartbeat_ttl() const {
  return heartbeat_ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatCfg::heartbeat_ttl() const {
  // @@protoc_insertion_point(field_get:zb.dcts.HeartbeatCfg.heartbeat_ttl)
  return _internal_heartbeat_ttl();
}
inline void HeartbeatCfg::_internal_set_heartbeat_ttl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heartbeat_ttl_ = value;
}
inline void HeartbeatCfg::set_heartbeat_ttl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heartbeat_ttl(value);
  // @@protoc_insertion_point(field_set:zb.dcts.HeartbeatCfg.heartbeat_ttl)
}

// -------------------------------------------------------------------

// ReconnectionCfg

// int32 reconnect_interval = 1;
inline void ReconnectionCfg::clear_reconnect_interval() {
  reconnect_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconnectionCfg::_internal_reconnect_interval() const {
  return reconnect_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconnectionCfg::reconnect_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.ReconnectionCfg.reconnect_interval)
  return _internal_reconnect_interval();
}
inline void ReconnectionCfg::_internal_set_reconnect_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reconnect_interval_ = value;
}
inline void ReconnectionCfg::set_reconnect_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reconnect_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.ReconnectionCfg.reconnect_interval)
}

// int32 reconnect_interval_max = 2;
inline void ReconnectionCfg::clear_reconnect_interval_max() {
  reconnect_interval_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconnectionCfg::_internal_reconnect_interval_max() const {
  return reconnect_interval_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconnectionCfg::reconnect_interval_max() const {
  // @@protoc_insertion_point(field_get:zb.dcts.ReconnectionCfg.reconnect_interval_max)
  return _internal_reconnect_interval_max();
}
inline void ReconnectionCfg::_internal_set_reconnect_interval_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reconnect_interval_max_ = value;
}
inline void ReconnectionCfg::set_reconnect_interval_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reconnect_interval_max(value);
  // @@protoc_insertion_point(field_set:zb.dcts.ReconnectionCfg.reconnect_interval_max)
}

// -------------------------------------------------------------------

// MsgSendOption

// int32 hwm = 1;
inline void MsgSendOption::clear_hwm() {
  hwm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSendOption::_internal_hwm() const {
  return hwm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSendOption::hwm() const {
  // @@protoc_insertion_point(field_get:zb.dcts.MsgSendOption.hwm)
  return _internal_hwm();
}
inline void MsgSendOption::_internal_set_hwm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hwm_ = value;
}
inline void MsgSendOption::set_hwm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hwm(value);
  // @@protoc_insertion_point(field_set:zb.dcts.MsgSendOption.hwm)
}

// int32 linger = 2;
inline void MsgSendOption::clear_linger() {
  linger_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSendOption::_internal_linger() const {
  return linger_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSendOption::linger() const {
  // @@protoc_insertion_point(field_get:zb.dcts.MsgSendOption.linger)
  return _internal_linger();
}
inline void MsgSendOption::_internal_set_linger(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  linger_ = value;
}
inline void MsgSendOption::set_linger(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_linger(value);
  // @@protoc_insertion_point(field_set:zb.dcts.MsgSendOption.linger)
}

// int32 timeout = 3;
inline void MsgSendOption::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSendOption::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSendOption::timeout() const {
  // @@protoc_insertion_point(field_get:zb.dcts.MsgSendOption.timeout)
  return _internal_timeout();
}
inline void MsgSendOption::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void MsgSendOption::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:zb.dcts.MsgSendOption.timeout)
}

// -------------------------------------------------------------------

// IPv4Address

// string ip = 1;
inline void IPv4Address::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& IPv4Address::ip() const {
  // @@protoc_insertion_point(field_get:zb.dcts.IPv4Address.ip)
  return _internal_ip();
}
inline void IPv4Address::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:zb.dcts.IPv4Address.ip)
}
inline std::string* IPv4Address::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.IPv4Address.ip)
  return _internal_mutable_ip();
}
inline const std::string& IPv4Address::_internal_ip() const {
  return ip_.Get();
}
inline void IPv4Address::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IPv4Address::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.IPv4Address.ip)
}
inline void IPv4Address::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.IPv4Address.ip)
}
inline void IPv4Address::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.IPv4Address.ip)
}
inline std::string* IPv4Address::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IPv4Address::release_ip() {
  // @@protoc_insertion_point(field_release:zb.dcts.IPv4Address.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPv4Address::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.IPv4Address.ip)
}

// int32 port = 2;
inline void IPv4Address::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPv4Address::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPv4Address::port() const {
  // @@protoc_insertion_point(field_get:zb.dcts.IPv4Address.port)
  return _internal_port();
}
inline void IPv4Address::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void IPv4Address::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:zb.dcts.IPv4Address.port)
}

// -------------------------------------------------------------------

// ZeromqLinkCfg

// .zb.dcts.IPv4Address address = 1;
inline bool ZeromqLinkCfg::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool ZeromqLinkCfg::has_address() const {
  return _internal_has_address();
}
inline void ZeromqLinkCfg::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::zb::dcts::IPv4Address& ZeromqLinkCfg::_internal_address() const {
  const ::zb::dcts::IPv4Address* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::IPv4Address&>(
      ::zb::dcts::_IPv4Address_default_instance_);
}
inline const ::zb::dcts::IPv4Address& ZeromqLinkCfg::address() const {
  // @@protoc_insertion_point(field_get:zb.dcts.ZeromqLinkCfg.address)
  return _internal_address();
}
inline void ZeromqLinkCfg::unsafe_arena_set_allocated_address(
    ::zb::dcts::IPv4Address* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.ZeromqLinkCfg.address)
}
inline ::zb::dcts::IPv4Address* ZeromqLinkCfg::release_address() {
  
  ::zb::dcts::IPv4Address* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::IPv4Address* ZeromqLinkCfg::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:zb.dcts.ZeromqLinkCfg.address)
  
  ::zb::dcts::IPv4Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::zb::dcts::IPv4Address* ZeromqLinkCfg::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::IPv4Address>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::zb::dcts::IPv4Address* ZeromqLinkCfg::mutable_address() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.ZeromqLinkCfg.address)
  return _internal_mutable_address();
}
inline void ZeromqLinkCfg::set_allocated_address(::zb::dcts::IPv4Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.ZeromqLinkCfg.address)
}

// string link_name = 2;
inline void ZeromqLinkCfg::clear_link_name() {
  link_name_.ClearToEmpty();
}
inline const std::string& ZeromqLinkCfg::link_name() const {
  // @@protoc_insertion_point(field_get:zb.dcts.ZeromqLinkCfg.link_name)
  return _internal_link_name();
}
inline void ZeromqLinkCfg::set_link_name(const std::string& value) {
  _internal_set_link_name(value);
  // @@protoc_insertion_point(field_set:zb.dcts.ZeromqLinkCfg.link_name)
}
inline std::string* ZeromqLinkCfg::mutable_link_name() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.ZeromqLinkCfg.link_name)
  return _internal_mutable_link_name();
}
inline const std::string& ZeromqLinkCfg::_internal_link_name() const {
  return link_name_.Get();
}
inline void ZeromqLinkCfg::_internal_set_link_name(const std::string& value) {
  
  link_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZeromqLinkCfg::set_link_name(std::string&& value) {
  
  link_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.ZeromqLinkCfg.link_name)
}
inline void ZeromqLinkCfg::set_link_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.ZeromqLinkCfg.link_name)
}
inline void ZeromqLinkCfg::set_link_name(const char* value,
    size_t size) {
  
  link_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.ZeromqLinkCfg.link_name)
}
inline std::string* ZeromqLinkCfg::_internal_mutable_link_name() {
  
  return link_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZeromqLinkCfg::release_link_name() {
  // @@protoc_insertion_point(field_release:zb.dcts.ZeromqLinkCfg.link_name)
  return link_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZeromqLinkCfg::set_allocated_link_name(std::string* link_name) {
  if (link_name != nullptr) {
    
  } else {
    
  }
  link_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.ZeromqLinkCfg.link_name)
}

// .zb.dcts.HeartbeatCfg heartbeat_cfg = 4;
inline bool ZeromqLinkCfg::_internal_has_heartbeat_cfg() const {
  return this != internal_default_instance() && heartbeat_cfg_ != nullptr;
}
inline bool ZeromqLinkCfg::has_heartbeat_cfg() const {
  return _internal_has_heartbeat_cfg();
}
inline void ZeromqLinkCfg::clear_heartbeat_cfg() {
  if (GetArena() == nullptr && heartbeat_cfg_ != nullptr) {
    delete heartbeat_cfg_;
  }
  heartbeat_cfg_ = nullptr;
}
inline const ::zb::dcts::HeartbeatCfg& ZeromqLinkCfg::_internal_heartbeat_cfg() const {
  const ::zb::dcts::HeartbeatCfg* p = heartbeat_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::HeartbeatCfg&>(
      ::zb::dcts::_HeartbeatCfg_default_instance_);
}
inline const ::zb::dcts::HeartbeatCfg& ZeromqLinkCfg::heartbeat_cfg() const {
  // @@protoc_insertion_point(field_get:zb.dcts.ZeromqLinkCfg.heartbeat_cfg)
  return _internal_heartbeat_cfg();
}
inline void ZeromqLinkCfg::unsafe_arena_set_allocated_heartbeat_cfg(
    ::zb::dcts::HeartbeatCfg* heartbeat_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_cfg_);
  }
  heartbeat_cfg_ = heartbeat_cfg;
  if (heartbeat_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.ZeromqLinkCfg.heartbeat_cfg)
}
inline ::zb::dcts::HeartbeatCfg* ZeromqLinkCfg::release_heartbeat_cfg() {
  
  ::zb::dcts::HeartbeatCfg* temp = heartbeat_cfg_;
  heartbeat_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::HeartbeatCfg* ZeromqLinkCfg::unsafe_arena_release_heartbeat_cfg() {
  // @@protoc_insertion_point(field_release:zb.dcts.ZeromqLinkCfg.heartbeat_cfg)
  
  ::zb::dcts::HeartbeatCfg* temp = heartbeat_cfg_;
  heartbeat_cfg_ = nullptr;
  return temp;
}
inline ::zb::dcts::HeartbeatCfg* ZeromqLinkCfg::_internal_mutable_heartbeat_cfg() {
  
  if (heartbeat_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::HeartbeatCfg>(GetArena());
    heartbeat_cfg_ = p;
  }
  return heartbeat_cfg_;
}
inline ::zb::dcts::HeartbeatCfg* ZeromqLinkCfg::mutable_heartbeat_cfg() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.ZeromqLinkCfg.heartbeat_cfg)
  return _internal_mutable_heartbeat_cfg();
}
inline void ZeromqLinkCfg::set_allocated_heartbeat_cfg(::zb::dcts::HeartbeatCfg* heartbeat_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete heartbeat_cfg_;
  }
  if (heartbeat_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat_cfg);
    if (message_arena != submessage_arena) {
      heartbeat_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat_cfg, submessage_arena);
    }
    
  } else {
    
  }
  heartbeat_cfg_ = heartbeat_cfg;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.ZeromqLinkCfg.heartbeat_cfg)
}

// .zb.dcts.ReconnectionCfg reconnect_cfg = 5;
inline bool ZeromqLinkCfg::_internal_has_reconnect_cfg() const {
  return this != internal_default_instance() && reconnect_cfg_ != nullptr;
}
inline bool ZeromqLinkCfg::has_reconnect_cfg() const {
  return _internal_has_reconnect_cfg();
}
inline void ZeromqLinkCfg::clear_reconnect_cfg() {
  if (GetArena() == nullptr && reconnect_cfg_ != nullptr) {
    delete reconnect_cfg_;
  }
  reconnect_cfg_ = nullptr;
}
inline const ::zb::dcts::ReconnectionCfg& ZeromqLinkCfg::_internal_reconnect_cfg() const {
  const ::zb::dcts::ReconnectionCfg* p = reconnect_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::ReconnectionCfg&>(
      ::zb::dcts::_ReconnectionCfg_default_instance_);
}
inline const ::zb::dcts::ReconnectionCfg& ZeromqLinkCfg::reconnect_cfg() const {
  // @@protoc_insertion_point(field_get:zb.dcts.ZeromqLinkCfg.reconnect_cfg)
  return _internal_reconnect_cfg();
}
inline void ZeromqLinkCfg::unsafe_arena_set_allocated_reconnect_cfg(
    ::zb::dcts::ReconnectionCfg* reconnect_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect_cfg_);
  }
  reconnect_cfg_ = reconnect_cfg;
  if (reconnect_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.ZeromqLinkCfg.reconnect_cfg)
}
inline ::zb::dcts::ReconnectionCfg* ZeromqLinkCfg::release_reconnect_cfg() {
  
  ::zb::dcts::ReconnectionCfg* temp = reconnect_cfg_;
  reconnect_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ReconnectionCfg* ZeromqLinkCfg::unsafe_arena_release_reconnect_cfg() {
  // @@protoc_insertion_point(field_release:zb.dcts.ZeromqLinkCfg.reconnect_cfg)
  
  ::zb::dcts::ReconnectionCfg* temp = reconnect_cfg_;
  reconnect_cfg_ = nullptr;
  return temp;
}
inline ::zb::dcts::ReconnectionCfg* ZeromqLinkCfg::_internal_mutable_reconnect_cfg() {
  
  if (reconnect_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ReconnectionCfg>(GetArena());
    reconnect_cfg_ = p;
  }
  return reconnect_cfg_;
}
inline ::zb::dcts::ReconnectionCfg* ZeromqLinkCfg::mutable_reconnect_cfg() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.ZeromqLinkCfg.reconnect_cfg)
  return _internal_mutable_reconnect_cfg();
}
inline void ZeromqLinkCfg::set_allocated_reconnect_cfg(::zb::dcts::ReconnectionCfg* reconnect_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reconnect_cfg_;
  }
  if (reconnect_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reconnect_cfg);
    if (message_arena != submessage_arena) {
      reconnect_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnect_cfg, submessage_arena);
    }
    
  } else {
    
  }
  reconnect_cfg_ = reconnect_cfg;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.ZeromqLinkCfg.reconnect_cfg)
}

// .zb.dcts.MsgSendOption msg_send_cfg = 6;
inline bool ZeromqLinkCfg::_internal_has_msg_send_cfg() const {
  return this != internal_default_instance() && msg_send_cfg_ != nullptr;
}
inline bool ZeromqLinkCfg::has_msg_send_cfg() const {
  return _internal_has_msg_send_cfg();
}
inline void ZeromqLinkCfg::clear_msg_send_cfg() {
  if (GetArena() == nullptr && msg_send_cfg_ != nullptr) {
    delete msg_send_cfg_;
  }
  msg_send_cfg_ = nullptr;
}
inline const ::zb::dcts::MsgSendOption& ZeromqLinkCfg::_internal_msg_send_cfg() const {
  const ::zb::dcts::MsgSendOption* p = msg_send_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::MsgSendOption&>(
      ::zb::dcts::_MsgSendOption_default_instance_);
}
inline const ::zb::dcts::MsgSendOption& ZeromqLinkCfg::msg_send_cfg() const {
  // @@protoc_insertion_point(field_get:zb.dcts.ZeromqLinkCfg.msg_send_cfg)
  return _internal_msg_send_cfg();
}
inline void ZeromqLinkCfg::unsafe_arena_set_allocated_msg_send_cfg(
    ::zb::dcts::MsgSendOption* msg_send_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_send_cfg_);
  }
  msg_send_cfg_ = msg_send_cfg;
  if (msg_send_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.ZeromqLinkCfg.msg_send_cfg)
}
inline ::zb::dcts::MsgSendOption* ZeromqLinkCfg::release_msg_send_cfg() {
  
  ::zb::dcts::MsgSendOption* temp = msg_send_cfg_;
  msg_send_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::MsgSendOption* ZeromqLinkCfg::unsafe_arena_release_msg_send_cfg() {
  // @@protoc_insertion_point(field_release:zb.dcts.ZeromqLinkCfg.msg_send_cfg)
  
  ::zb::dcts::MsgSendOption* temp = msg_send_cfg_;
  msg_send_cfg_ = nullptr;
  return temp;
}
inline ::zb::dcts::MsgSendOption* ZeromqLinkCfg::_internal_mutable_msg_send_cfg() {
  
  if (msg_send_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::MsgSendOption>(GetArena());
    msg_send_cfg_ = p;
  }
  return msg_send_cfg_;
}
inline ::zb::dcts::MsgSendOption* ZeromqLinkCfg::mutable_msg_send_cfg() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.ZeromqLinkCfg.msg_send_cfg)
  return _internal_mutable_msg_send_cfg();
}
inline void ZeromqLinkCfg::set_allocated_msg_send_cfg(::zb::dcts::MsgSendOption* msg_send_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete msg_send_cfg_;
  }
  if (msg_send_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(msg_send_cfg);
    if (message_arena != submessage_arena) {
      msg_send_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_send_cfg, submessage_arena);
    }
    
  } else {
    
  }
  msg_send_cfg_ = msg_send_cfg;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.ZeromqLinkCfg.msg_send_cfg)
}

// -------------------------------------------------------------------

// TimerParam

// int32 interval_in_ms = 1;
inline void TimerParam::clear_interval_in_ms() {
  interval_in_ms_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimerParam::_internal_interval_in_ms() const {
  return interval_in_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimerParam::interval_in_ms() const {
  // @@protoc_insertion_point(field_get:zb.dcts.TimerParam.interval_in_ms)
  return _internal_interval_in_ms();
}
inline void TimerParam::_internal_set_interval_in_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  interval_in_ms_ = value;
}
inline void TimerParam::set_interval_in_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_interval_in_ms(value);
  // @@protoc_insertion_point(field_set:zb.dcts.TimerParam.interval_in_ms)
}

// int32 times = 2;
inline void TimerParam::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimerParam::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimerParam::times() const {
  // @@protoc_insertion_point(field_get:zb.dcts.TimerParam.times)
  return _internal_times();
}
inline void TimerParam::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void TimerParam::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:zb.dcts.TimerParam.times)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::Physical_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::Physical_Type>() {
  return ::zb::dcts::Physical_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dcts_2eproto
