// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/node.proto

#include "node/node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
constexpr NodeId::NodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct NodeIdDefaultTypeInternal {
  constexpr NodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeIdDefaultTypeInternal() {}
  union {
    NodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeIdDefaultTypeInternal _NodeId_default_instance_;
constexpr DeviceId::DeviceId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct DeviceIdDefaultTypeInternal {
  constexpr DeviceIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceIdDefaultTypeInternal() {}
  union {
    DeviceId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceIdDefaultTypeInternal _DeviceId_default_instance_;
constexpr NodeDevice::NodeDevice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(nullptr)
  , device_id_(nullptr){}
struct NodeDeviceDefaultTypeInternal {
  constexpr NodeDeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeDeviceDefaultTypeInternal() {}
  union {
    NodeDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDeviceDefaultTypeInternal _NodeDevice_default_instance_;
constexpr TaskType::TaskType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pri_task_type_(0)

  , sec_task_type_(0)
{}
struct TaskTypeDefaultTypeInternal {
  constexpr TaskTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskTypeDefaultTypeInternal() {}
  union {
    TaskType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskTypeDefaultTypeInternal _TaskType_default_instance_;
constexpr TaskSummary::TaskSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , type_(nullptr)
  , device_(nullptr)
  , starttime_(nullptr)
  , status_(0)
{}
struct TaskSummaryDefaultTypeInternal {
  constexpr TaskSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskSummaryDefaultTypeInternal() {}
  union {
    TaskSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskSummaryDefaultTypeInternal _TaskSummary_default_instance_;
constexpr DeviceInfo::DeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : physicals_()
  , id_(nullptr)
  , position_(nullptr)
  , posture_(nullptr)
  , type_(0)

  , status_(0)
{}
struct DeviceInfoDefaultTypeInternal {
  constexpr DeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
constexpr TransferStatus::TransferStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : send_fail_times_(0u)
  , blocked_times_(0u)
  , sended_message_count_(0u){}
struct TransferStatusDefaultTypeInternal {
  constexpr TransferStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferStatusDefaultTypeInternal() {}
  union {
    TransferStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferStatusDefaultTypeInternal _TransferStatus_default_instance_;
constexpr NodeInfo::NodeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_()
  , devices_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , last_heard_(nullptr)
  , pipeline_status_(nullptr){}
struct NodeInfoDefaultTypeInternal {
  constexpr NodeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfoDefaultTypeInternal() {}
  union {
    NodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
constexpr CmdHeader::CmdHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_id_(nullptr)
  , task_runner_(nullptr)
  , sequence_number_(0u)
  , error_code_(0)
{}
struct CmdHeaderDefaultTypeInternal {
  constexpr CmdHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CmdHeaderDefaultTypeInternal() {}
  union {
    CmdHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CmdHeaderDefaultTypeInternal _CmdHeader_default_instance_;
constexpr NodeReply::NodeReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replys_(){}
struct NodeReplyDefaultTypeInternal {
  constexpr NodeReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeReplyDefaultTypeInternal() {}
  union {
    NodeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeReplyDefaultTypeInternal _NodeReply_default_instance_;
constexpr NodesInfo::NodesInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_info_(){}
struct NodesInfoDefaultTypeInternal {
  constexpr NodesInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodesInfoDefaultTypeInternal() {}
  union {
    NodesInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodesInfoDefaultTypeInternal _NodesInfo_default_instance_;
constexpr TaskAccount::TaskAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_devices_()
  , task_id_(nullptr)
  , reply_details_(nullptr){}
struct TaskAccountDefaultTypeInternal {
  constexpr TaskAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskAccountDefaultTypeInternal() {}
  union {
    TaskAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskAccountDefaultTypeInternal _TaskAccount_default_instance_;
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fnode_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fnode_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fnode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeId, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceId, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeDevice, node_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeDevice, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskType, pri_task_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskType, sec_task_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskSummary, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskSummary, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskSummary, device_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskSummary, status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskSummary, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceInfo, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceInfo, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceInfo, status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceInfo, position_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceInfo, posture_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceInfo, physicals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TransferStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TransferStatus, send_fail_times_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TransferStatus, blocked_times_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TransferStatus, sended_message_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeInfo, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeInfo, name_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeInfo, last_heard_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeInfo, tasks_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeInfo, devices_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeInfo, pipeline_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::CmdHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::CmdHeader, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::CmdHeader, error_code_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::CmdHeader, task_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::CmdHeader, task_runner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeReply, replys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodesInfo, node_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskAccount, task_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskAccount, node_devices_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskAccount, reply_details_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::NodeId)},
  { 6, -1, sizeof(::zb::dcts::node::DeviceId)},
  { 12, -1, sizeof(::zb::dcts::node::NodeDevice)},
  { 19, -1, sizeof(::zb::dcts::node::TaskType)},
  { 26, -1, sizeof(::zb::dcts::node::TaskSummary)},
  { 36, -1, sizeof(::zb::dcts::node::DeviceInfo)},
  { 47, -1, sizeof(::zb::dcts::node::TransferStatus)},
  { 55, -1, sizeof(::zb::dcts::node::NodeInfo)},
  { 66, -1, sizeof(::zb::dcts::node::CmdHeader)},
  { 75, -1, sizeof(::zb::dcts::node::NodeReply)},
  { 81, -1, sizeof(::zb::dcts::node::NodesInfo)},
  { 87, -1, sizeof(::zb::dcts::node::TaskAccount)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_NodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_DeviceId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_NodeDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_TaskType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_TaskSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_TransferStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_CmdHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_NodeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_NodesInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_TaskAccount_default_instance_),
};

const char descriptor_table_protodef_node_2fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017node/node.proto\022\014zb.dcts.node\032\ndcts.pr"
  "oto\"\027\n\006NodeId\022\r\n\005value\030\001 \001(\r\"\031\n\010DeviceId"
  "\022\r\n\005value\030\001 \001(\r\"^\n\nNodeDevice\022%\n\007node_id"
  "\030\001 \001(\0132\024.zb.dcts.node.NodeId\022)\n\tdevice_i"
  "d\030\002 \001(\0132\026.zb.dcts.node.DeviceId\"x\n\010TaskT"
  "ype\0224\n\rpri_task_type\030\001 \001(\0162\035.zb.dcts.nod"
  "e.PrimaryTaskType\0226\n\rsec_task_type\030\002 \001(\016"
  "2\037.zb.dcts.node.SecondaryTaskType\"\311\001\n\013Ta"
  "skSummary\022\033\n\002id\030\001 \001(\0132\017.zb.dcts.TaskId\022$"
  "\n\004type\030\002 \001(\0132\026.zb.dcts.node.TaskType\022&\n\006"
  "device\030\003 \001(\0132\026.zb.dcts.node.DeviceId\022(\n\006"
  "status\030\004 \001(\0162\030.zb.dcts.node.TaskStatus\022%"
  "\n\tstartTime\030\005 \001(\0132\022.zb.dcts.Timestamp\"\362\001"
  "\n\nDeviceInfo\022\"\n\002id\030\001 \001(\0132\026.zb.dcts.node."
  "DeviceId\022&\n\004type\030\002 \001(\0162\030.zb.dcts.node.De"
  "viceType\022*\n\006status\030\003 \001(\0162\032.zb.dcts.node."
  "DeviceStatus\022#\n\010position\030\004 \001(\0132\021.zb.dcts"
  ".Position\022!\n\007posture\030\005 \001(\0132\020.zb.dcts.Pos"
  "ture\022$\n\tphysicals\030\006 \003(\0132\021.zb.dcts.Physic"
  "al\"^\n\016TransferStatus\022\027\n\017send_fail_times\030"
  "\001 \001(\r\022\025\n\rblocked_times\030\002 \001(\r\022\034\n\024sended_m"
  "essage_count\030\003 \001(\r\"\356\001\n\010NodeInfo\022 \n\002id\030\001 "
  "\001(\0132\024.zb.dcts.node.NodeId\022\014\n\004name\030\002 \001(\t\022"
  "&\n\nlast_heard\030\003 \001(\0132\022.zb.dcts.Timestamp\022"
  "(\n\005tasks\030\006 \003(\0132\031.zb.dcts.node.TaskSummar"
  "y\022)\n\007devices\030\007 \003(\0132\030.zb.dcts.node.Device"
  "Info\0225\n\017pipeline_status\030\010 \001(\0132\034.zb.dcts."
  "node.TransferStatus\"\242\001\n\tCmdHeader\022\027\n\017seq"
  "uence_number\030\001 \001(\r\022+\n\nerror_code\030\002 \001(\0162\027"
  ".zb.dcts.node.ErrorType\022 \n\007task_id\030\003 \001(\013"
  "2\017.zb.dcts.TaskId\022-\n\013task_runner\030\004 \001(\0132\030"
  ".zb.dcts.node.NodeDevice\"4\n\tNodeReply\022\'\n"
  "\006replys\030\001 \003(\0132\027.zb.dcts.node.CmdHeader\"6"
  "\n\tNodesInfo\022)\n\tnode_info\030\001 \003(\0132\026.zb.dcts"
  ".node.NodeInfo\"\217\001\n\013TaskAccount\022 \n\007task_i"
  "d\030\001 \001(\0132\017.zb.dcts.TaskId\022.\n\014node_devices"
  "\030\002 \003(\0132\030.zb.dcts.node.NodeDevice\022.\n\rrepl"
  "y_details\030\003 \001(\0132\027.zb.dcts.node.NodeReply"
  "*\246\001\n\017PrimaryTaskType\022\r\n\tNULL_TASK\020\000\022\017\n\013H"
  "YBRID_TASK\020\001\022\017\n\013SENSOR_TASK\020\002\022\021\n\rRADAR_D"
  "F_TASK\020\003\022\017\n\013CZC_QJ_TASK\020\004\022\017\n\013CZC_DF_TASK"
  "\020\005\022\017\n\013CZC_SM_TASK\020\006\022\r\n\tDEMO_TASK\020\007\022\r\n\tZC"
  "ZH_TASK\020\010*\370\004\n\021SecondaryTaskType\022\r\n\tSELF_"
  "TEST\020\000\022\010\n\004CAL1\020\001\022\010\n\004CAL2\020\002\022\013\n\007EXAMPLE\020\003\022"
  "\t\n\005PSCAN\020\020\022\013\n\007IF_SCAN\020\021\022\022\n\016PULSE_ANALYSI"
  "S\020\022\022\024\n\020PULSE_ANALYSIS_2\020\023\022\020\n\014OSCILLOSCOP"
  "E\020\024\022\032\n\026VECTOR_SIGNAL_ANALYSIS\020\025\022\017\n\013IQ_RE"
  "CORDER\020\026\022\024\n\020SIGNAL_GENERATOR\020\027\022\021\n\rPOSITI"
  "ON_TDOA\020 \022\031\n\025DIRECTION_FINDING_AOA\020!\022&\n\""
  "DIRECTION_FINDING_SPATIAL_SPECTRUM\020\"\022\025\n\021"
  "DEMODULATE_ANALOG\0200\022\025\n\021CLASSIFY_MODULATE"
  "\0208\022\023\n\017CLASSIFY_ENCODE\020:\022\025\n\021CLASSIFY_COMM"
  "_SYS\020<\022\020\n\014DECODE_ADS_B\020F\022\020\n\014DECODE_ACARS"
  "\020G\022\016\n\nDECODE_AIS\020H\022\016\n\nIQ_ACQUIRE\020I\022\017\n\013DE"
  "MO_DETECT\020P\022\020\n\014REPLAY_PSCAN\020Q\022\027\n\023REPLAY_"
  "DECODE_ADS_B\020Z\022\027\n\023REPLAY_DECODE_ACARS\020[\022"
  "\025\n\021REPLAY_DECODE_AIS\020\\\022\r\n\tREPLAY_IQ\020]\022\017\n"
  "\013REPLAY_TDOA\020^\022\034\n\030REPLAY_DEMODULATE_ANAL"
  "OG\020_*\?\n\nTaskStatus\022\013\n\007T_READY\020\000\022\t\n\005T_RUN"
  "\020\001\022\013\n\007T_ABORT\020\002\022\014\n\010T_FINISH\020\003*c\n\nDeviceT"
  "ype\022\017\n\013SENSOR_3900\020\000\022\014\n\010RADAR_DF\020\001\022\n\n\006CZ"
  "C_SM\020\002\022\n\n\006CZC_DF\020\003\022\n\n\006CZC_QJ\020\004\022\010\n\004DEMO\020\005"
  "\022\010\n\004ZCZH\020\006*H\n\014DeviceStatus\022\r\n\tD_OFFLINE\020"
  "\000\022\n\n\006D_IDLE\020\001\022\r\n\tD_ENGAGED\020\002\022\016\n\nD_ABNORM"
  "AL\020\003*\337\007\n\tErrorType\022\014\n\010ERR_NONE\020\000\022\037\n\022ERR_"
  "NOTIMPLEMENTED\020\377\377\377\377\377\377\377\377\377\001\022\030\n\013ERR_UNKNOWN"
  "\020\376\377\377\377\377\377\377\377\377\001\022\025\n\010ERR_BUSY\020\375\377\377\377\377\377\377\377\377\001\022\030\n\013ER"
  "R_ABORTED\020\373\377\377\377\377\377\377\377\377\001\022\034\n\017ERR_CMD_NOREPLY\020"
  "\372\377\377\377\377\377\377\377\377\001\022\026\n\tERR_PARAM\020\370\377\377\377\377\377\377\377\377\001\022$\n\027ER"
  "R_STATION_NAME_EXISTS\020\365\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_"
  "INVALID_HANDLE\020\361\377\377\377\377\377\377\377\377\001\022 \n\023ERR_INVALID"
  "_REQUEST\020\360\377\377\377\377\377\377\377\377\001\022\033\n\016ERR_NO_SENSORS\020\354\377"
  "\377\377\377\377\377\377\377\001\022\035\n\020ERR_SOCKET_ERROR\020\346\377\377\377\377\377\377\377\377\001\022"
  "\037\n\022ERR_NODE_NOT_FOUND\020\345\377\377\377\377\377\377\377\377\001\022\"\n\025ERR_"
  "NO_DATA_AVAILABLE\020\344\377\377\377\377\377\377\377\377\001\022!\n\024ERR_BUFF"
  "ER_TOO_SMALL\020\342\377\377\377\377\377\377\377\377\001\022\033\n\016ERR_DIAGNOSTI"
  "C\020\341\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_COMMAND_FAILED\020\332\377\377\377\377"
  "\377\377\377\377\001\022\030\n\013ERR_TIMEOUT\020\330\377\377\377\377\377\377\377\377\001\022 \n\023ERR_S"
  "TRING_TOO_LONG\020\325\377\377\377\377\377\377\377\377\001\022\032\n\rERR_DATA_TY"
  "PE\020\314\377\377\377\377\377\377\377\377\001\022\036\n\021ERR_AUTHORIZATION\020\307\377\377\377\377"
  "\377\377\377\377\001\022\030\n\013ERR_LICENSE\020\300\377\377\377\377\377\377\377\377\001\022\034\n\017ERR_M"
  "EAS_FAILED\020\276\377\377\377\377\377\377\377\377\001\022#\n\026ERR_DATA_AVAIL_"
  "TIMEOUT\020\265\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_TASK_NOT_FOUND"
  "\020\264\377\377\377\377\377\377\377\377\001\022!\n\024ERR_NODE_TASK_ASSIGN\020\263\377\377\377"
  "\377\377\377\377\377\001\022#\n\026ERR_SENSOR_TASK_ASSIGN\020\262\377\377\377\377\377\377"
  "\377\377\001\022\"\n\025ERR_SENSOR_TASK_START\020\261\377\377\377\377\377\377\377\377\001\022"
  "\032\n\rERR_OPEN_FILE\020\260\377\377\377\377\377\377\377\377\001\022&\n\031ERR_COMPA"
  "SS_NOT_AVAILABLE\020\257\377\377\377\377\377\377\377\377\001\022\025\n\010ERR_TDOA\020"
  "\256\377\377\377\377\377\377\377\377\001\022\032\n\rERR_TASK_QUIT\020\255\377\377\377\377\377\377\377\377\001B\032"
  "\n\020com.zb.dcts.nodeB\004nodeP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fnode_2eproto_deps[1] = {
  &::descriptor_table_dcts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fnode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fnode_2eproto = {
  false, false, 3594, descriptor_table_protodef_node_2fnode_2eproto, "node/node.proto", 
  &descriptor_table_node_2fnode_2eproto_once, descriptor_table_node_2fnode_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_node_2fnode_2eproto::offsets,
  file_level_metadata_node_2fnode_2eproto, file_level_enum_descriptors_node_2fnode_2eproto, file_level_service_descriptors_node_2fnode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fnode_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnode_2eproto);
  return descriptor_table_node_2fnode_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fnode_2eproto(&descriptor_table_node_2fnode_2eproto);
namespace zb {
namespace dcts {
namespace node {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimaryTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnode_2eproto);
  return file_level_enum_descriptors_node_2fnode_2eproto[0];
}
bool PrimaryTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecondaryTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnode_2eproto);
  return file_level_enum_descriptors_node_2fnode_2eproto[1];
}
bool SecondaryTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 32:
    case 33:
    case 34:
    case 48:
    case 56:
    case 58:
    case 60:
    case 70:
    case 71:
    case 72:
    case 73:
    case 80:
    case 81:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnode_2eproto);
  return file_level_enum_descriptors_node_2fnode_2eproto[2];
}
bool TaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnode_2eproto);
  return file_level_enum_descriptors_node_2fnode_2eproto[3];
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnode_2eproto);
  return file_level_enum_descriptors_node_2fnode_2eproto[4];
}
bool DeviceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnode_2eproto);
  return file_level_enum_descriptors_node_2fnode_2eproto[5];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case -83:
    case -82:
    case -81:
    case -80:
    case -79:
    case -78:
    case -77:
    case -76:
    case -75:
    case -66:
    case -64:
    case -57:
    case -52:
    case -43:
    case -40:
    case -38:
    case -31:
    case -30:
    case -28:
    case -27:
    case -26:
    case -20:
    case -16:
    case -15:
    case -11:
    case -8:
    case -6:
    case -5:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NodeId::_Internal {
 public:
};

NodeId::NodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.NodeId)
}
NodeId::NodeId(const NodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.NodeId)
}

void NodeId::SharedCtor() {
value_ = 0u;
}

NodeId::~NodeId() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.NodeId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeId::ArenaDtor(void* object) {
  NodeId* _this = reinterpret_cast< NodeId* >(object);
  (void)_this;
}
void NodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.NodeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.NodeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.NodeId)
  return target;
}

size_t NodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.NodeId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.NodeId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.NodeId)
    MergeFrom(*source);
  }
}

void NodeId::MergeFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void NodeId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeId::CopyFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeId::IsInitialized() const {
  return true;
}

void NodeId::InternalSwap(NodeId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceId::_Internal {
 public:
};

DeviceId::DeviceId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.DeviceId)
}
DeviceId::DeviceId(const DeviceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.DeviceId)
}

void DeviceId::SharedCtor() {
value_ = 0u;
}

DeviceId::~DeviceId() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.DeviceId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceId::ArenaDtor(void* object) {
  DeviceId* _this = reinterpret_cast< DeviceId* >(object);
  (void)_this;
}
void DeviceId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.DeviceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.DeviceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.DeviceId)
  return target;
}

size_t DeviceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.DeviceId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.DeviceId)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.DeviceId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.DeviceId)
    MergeFrom(*source);
  }
}

void DeviceId::MergeFrom(const DeviceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.DeviceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void DeviceId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.DeviceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceId::CopyFrom(const DeviceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.DeviceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceId::IsInitialized() const {
  return true;
}

void DeviceId::InternalSwap(DeviceId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeDevice::_Internal {
 public:
  static const ::zb::dcts::node::NodeId& node_id(const NodeDevice* msg);
  static const ::zb::dcts::node::DeviceId& device_id(const NodeDevice* msg);
};

const ::zb::dcts::node::NodeId&
NodeDevice::_Internal::node_id(const NodeDevice* msg) {
  return *msg->node_id_;
}
const ::zb::dcts::node::DeviceId&
NodeDevice::_Internal::device_id(const NodeDevice* msg) {
  return *msg->device_id_;
}
NodeDevice::NodeDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.NodeDevice)
}
NodeDevice::NodeDevice(const NodeDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node_id()) {
    node_id_ = new ::zb::dcts::node::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  if (from._internal_has_device_id()) {
    device_id_ = new ::zb::dcts::node::DeviceId(*from.device_id_);
  } else {
    device_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.NodeDevice)
}

void NodeDevice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(device_id_));
}

NodeDevice::~NodeDevice() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.NodeDevice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete device_id_;
}

void NodeDevice::ArenaDtor(void* object) {
  NodeDevice* _this = reinterpret_cast< NodeDevice* >(object);
  (void)_this;
}
void NodeDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.NodeDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  if (GetArena() == nullptr && device_id_ != nullptr) {
    delete device_id_;
  }
  device_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeId node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.DeviceId device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.NodeDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_id(this), target, stream);
  }

  // .zb.dcts.node.DeviceId device_id = 2;
  if (this->has_device_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::device_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.NodeDevice)
  return target;
}

size_t NodeDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.NodeDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  // .zb.dcts.node.DeviceId device_id = 2;
  if (this->has_device_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.NodeDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.NodeDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.NodeDevice)
    MergeFrom(*source);
  }
}

void NodeDevice::MergeFrom(const NodeDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.NodeDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_id()) {
    _internal_mutable_node_id()->::zb::dcts::node::NodeId::MergeFrom(from._internal_node_id());
  }
  if (from.has_device_id()) {
    _internal_mutable_device_id()->::zb::dcts::node::DeviceId::MergeFrom(from._internal_device_id());
  }
}

void NodeDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.NodeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDevice::CopyFrom(const NodeDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.NodeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDevice::IsInitialized() const {
  return true;
}

void NodeDevice::InternalSwap(NodeDevice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeDevice, device_id_)
      + sizeof(NodeDevice::device_id_)
      - PROTOBUF_FIELD_OFFSET(NodeDevice, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskType::_Internal {
 public:
};

TaskType::TaskType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.TaskType)
}
TaskType::TaskType(const TaskType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pri_task_type_, &from.pri_task_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sec_task_type_) -
    reinterpret_cast<char*>(&pri_task_type_)) + sizeof(sec_task_type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.TaskType)
}

void TaskType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pri_task_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sec_task_type_) -
    reinterpret_cast<char*>(&pri_task_type_)) + sizeof(sec_task_type_));
}

TaskType::~TaskType() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.TaskType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskType::ArenaDtor(void* object) {
  TaskType* _this = reinterpret_cast< TaskType* >(object);
  (void)_this;
}
void TaskType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskType::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.TaskType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pri_task_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sec_task_type_) -
      reinterpret_cast<char*>(&pri_task_type_)) + sizeof(sec_task_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.PrimaryTaskType pri_task_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pri_task_type(static_cast<::zb::dcts::node::PrimaryTaskType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.SecondaryTaskType sec_task_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sec_task_type(static_cast<::zb::dcts::node::SecondaryTaskType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.TaskType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.PrimaryTaskType pri_task_type = 1;
  if (this->pri_task_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pri_task_type(), target);
  }

  // .zb.dcts.node.SecondaryTaskType sec_task_type = 2;
  if (this->sec_task_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sec_task_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.TaskType)
  return target;
}

size_t TaskType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.TaskType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.PrimaryTaskType pri_task_type = 1;
  if (this->pri_task_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pri_task_type());
  }

  // .zb.dcts.node.SecondaryTaskType sec_task_type = 2;
  if (this->sec_task_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sec_task_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.TaskType)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.TaskType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.TaskType)
    MergeFrom(*source);
  }
}

void TaskType::MergeFrom(const TaskType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.TaskType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pri_task_type() != 0) {
    _internal_set_pri_task_type(from._internal_pri_task_type());
  }
  if (from.sec_task_type() != 0) {
    _internal_set_sec_task_type(from._internal_sec_task_type());
  }
}

void TaskType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.TaskType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskType::CopyFrom(const TaskType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.TaskType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskType::IsInitialized() const {
  return true;
}

void TaskType::InternalSwap(TaskType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskType, sec_task_type_)
      + sizeof(TaskType::sec_task_type_)
      - PROTOBUF_FIELD_OFFSET(TaskType, pri_task_type_)>(
          reinterpret_cast<char*>(&pri_task_type_),
          reinterpret_cast<char*>(&other->pri_task_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskSummary::_Internal {
 public:
  static const ::zb::dcts::TaskId& id(const TaskSummary* msg);
  static const ::zb::dcts::node::TaskType& type(const TaskSummary* msg);
  static const ::zb::dcts::node::DeviceId& device(const TaskSummary* msg);
  static const ::zb::dcts::Timestamp& starttime(const TaskSummary* msg);
};

const ::zb::dcts::TaskId&
TaskSummary::_Internal::id(const TaskSummary* msg) {
  return *msg->id_;
}
const ::zb::dcts::node::TaskType&
TaskSummary::_Internal::type(const TaskSummary* msg) {
  return *msg->type_;
}
const ::zb::dcts::node::DeviceId&
TaskSummary::_Internal::device(const TaskSummary* msg) {
  return *msg->device_;
}
const ::zb::dcts::Timestamp&
TaskSummary::_Internal::starttime(const TaskSummary* msg) {
  return *msg->starttime_;
}
void TaskSummary::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void TaskSummary::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
TaskSummary::TaskSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.TaskSummary)
}
TaskSummary::TaskSummary(const TaskSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::TaskId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::zb::dcts::node::TaskType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_device()) {
    device_ = new ::zb::dcts::node::DeviceId(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_starttime()) {
    starttime_ = new ::zb::dcts::Timestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.TaskSummary)
}

void TaskSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

TaskSummary::~TaskSummary() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.TaskSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete starttime_;
}

void TaskSummary::ArenaDtor(void* object) {
  TaskSummary* _this = reinterpret_cast< TaskSummary* >(object);
  (void)_this;
}
void TaskSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.TaskSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TaskId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.TaskType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.DeviceId device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.TaskStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::zb::dcts::node::TaskStatus>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp startTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.TaskSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TaskId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .zb.dcts.node.TaskType type = 2;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // .zb.dcts.node.DeviceId device = 3;
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::device(this), target, stream);
  }

  // .zb.dcts.node.TaskStatus status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // .zb.dcts.Timestamp startTime = 5;
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::starttime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.TaskSummary)
  return target;
}

size_t TaskSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.TaskSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.TaskId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .zb.dcts.node.TaskType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .zb.dcts.node.DeviceId device = 3;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .zb.dcts.Timestamp startTime = 5;
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // .zb.dcts.node.TaskStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.TaskSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.TaskSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.TaskSummary)
    MergeFrom(*source);
  }
}

void TaskSummary::MergeFrom(const TaskSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.TaskSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::TaskId::MergeFrom(from._internal_id());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::zb::dcts::node::TaskType::MergeFrom(from._internal_type());
  }
  if (from.has_device()) {
    _internal_mutable_device()->::zb::dcts::node::DeviceId::MergeFrom(from._internal_device());
  }
  if (from.has_starttime()) {
    _internal_mutable_starttime()->::zb::dcts::Timestamp::MergeFrom(from._internal_starttime());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void TaskSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.TaskSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskSummary::CopyFrom(const TaskSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.TaskSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSummary::IsInitialized() const {
  return true;
}

void TaskSummary::InternalSwap(TaskSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskSummary, status_)
      + sizeof(TaskSummary::status_)
      - PROTOBUF_FIELD_OFFSET(TaskSummary, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceInfo::_Internal {
 public:
  static const ::zb::dcts::node::DeviceId& id(const DeviceInfo* msg);
  static const ::zb::dcts::Position& position(const DeviceInfo* msg);
  static const ::zb::dcts::Posture& posture(const DeviceInfo* msg);
};

const ::zb::dcts::node::DeviceId&
DeviceInfo::_Internal::id(const DeviceInfo* msg) {
  return *msg->id_;
}
const ::zb::dcts::Position&
DeviceInfo::_Internal::position(const DeviceInfo* msg) {
  return *msg->position_;
}
const ::zb::dcts::Posture&
DeviceInfo::_Internal::posture(const DeviceInfo* msg) {
  return *msg->posture_;
}
void DeviceInfo::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void DeviceInfo::clear_posture() {
  if (GetArena() == nullptr && posture_ != nullptr) {
    delete posture_;
  }
  posture_ = nullptr;
}
void DeviceInfo::clear_physicals() {
  physicals_.Clear();
}
DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  physicals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      physicals_(from.physicals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::node::DeviceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::zb::dcts::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_posture()) {
    posture_ = new ::zb::dcts::Posture(*from.posture_);
  } else {
    posture_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.DeviceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete posture_;
}

void DeviceInfo::ArenaDtor(void* object) {
  DeviceInfo* _this = reinterpret_cast< DeviceInfo* >(object);
  (void)_this;
}
void DeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  physicals_.Clear();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && posture_ != nullptr) {
    delete posture_;
  }
  posture_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&type_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.DeviceId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.DeviceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::node::DeviceType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.DeviceStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::zb::dcts::node::DeviceStatus>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Posture posture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_posture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.Physical physicals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_physicals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.DeviceId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .zb.dcts.node.DeviceType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .zb.dcts.node.DeviceStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // .zb.dcts.Position position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // .zb.dcts.Posture posture = 5;
  if (this->has_posture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::posture(this), target, stream);
  }

  // repeated .zb.dcts.Physical physicals = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_physicals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_physicals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.DeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.Physical physicals = 6;
  total_size += 1UL * this->_internal_physicals_size();
  for (const auto& msg : this->physicals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.DeviceId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .zb.dcts.Position position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .zb.dcts.Posture posture = 5;
  if (this->has_posture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posture_);
  }

  // .zb.dcts.node.DeviceType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .zb.dcts.node.DeviceStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.DeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  physicals_.MergeFrom(from.physicals_);
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::node::DeviceId::MergeFrom(from._internal_id());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::zb::dcts::Position::MergeFrom(from._internal_position());
  }
  if (from.has_posture()) {
    _internal_mutable_posture()->::zb::dcts::Posture::MergeFrom(from._internal_posture());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  physicals_.InternalSwap(&other->physicals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceInfo, status_)
      + sizeof(DeviceInfo::status_)
      - PROTOBUF_FIELD_OFFSET(DeviceInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferStatus::_Internal {
 public:
};

TransferStatus::TransferStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.TransferStatus)
}
TransferStatus::TransferStatus(const TransferStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&send_fail_times_, &from.send_fail_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&sended_message_count_) -
    reinterpret_cast<char*>(&send_fail_times_)) + sizeof(sended_message_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.TransferStatus)
}

void TransferStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&send_fail_times_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sended_message_count_) -
    reinterpret_cast<char*>(&send_fail_times_)) + sizeof(sended_message_count_));
}

TransferStatus::~TransferStatus() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.TransferStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransferStatus::ArenaDtor(void* object) {
  TransferStatus* _this = reinterpret_cast< TransferStatus* >(object);
  (void)_this;
}
void TransferStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.TransferStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&send_fail_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sended_message_count_) -
      reinterpret_cast<char*>(&send_fail_times_)) + sizeof(sended_message_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 send_fail_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          send_fail_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blocked_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blocked_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sended_message_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sended_message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.TransferStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 send_fail_times = 1;
  if (this->send_fail_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_send_fail_times(), target);
  }

  // uint32 blocked_times = 2;
  if (this->blocked_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_blocked_times(), target);
  }

  // uint32 sended_message_count = 3;
  if (this->sended_message_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sended_message_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.TransferStatus)
  return target;
}

size_t TransferStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.TransferStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 send_fail_times = 1;
  if (this->send_fail_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_fail_times());
  }

  // uint32 blocked_times = 2;
  if (this->blocked_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blocked_times());
  }

  // uint32 sended_message_count = 3;
  if (this->sended_message_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sended_message_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.TransferStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.TransferStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.TransferStatus)
    MergeFrom(*source);
  }
}

void TransferStatus::MergeFrom(const TransferStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.TransferStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.send_fail_times() != 0) {
    _internal_set_send_fail_times(from._internal_send_fail_times());
  }
  if (from.blocked_times() != 0) {
    _internal_set_blocked_times(from._internal_blocked_times());
  }
  if (from.sended_message_count() != 0) {
    _internal_set_sended_message_count(from._internal_sended_message_count());
  }
}

void TransferStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.TransferStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferStatus::CopyFrom(const TransferStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.TransferStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferStatus::IsInitialized() const {
  return true;
}

void TransferStatus::InternalSwap(TransferStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferStatus, sended_message_count_)
      + sizeof(TransferStatus::sended_message_count_)
      - PROTOBUF_FIELD_OFFSET(TransferStatus, send_fail_times_)>(
          reinterpret_cast<char*>(&send_fail_times_),
          reinterpret_cast<char*>(&other->send_fail_times_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeInfo::_Internal {
 public:
  static const ::zb::dcts::node::NodeId& id(const NodeInfo* msg);
  static const ::zb::dcts::Timestamp& last_heard(const NodeInfo* msg);
  static const ::zb::dcts::node::TransferStatus& pipeline_status(const NodeInfo* msg);
};

const ::zb::dcts::node::NodeId&
NodeInfo::_Internal::id(const NodeInfo* msg) {
  return *msg->id_;
}
const ::zb::dcts::Timestamp&
NodeInfo::_Internal::last_heard(const NodeInfo* msg) {
  return *msg->last_heard_;
}
const ::zb::dcts::node::TransferStatus&
NodeInfo::_Internal::pipeline_status(const NodeInfo* msg) {
  return *msg->pipeline_status_;
}
void NodeInfo::clear_last_heard() {
  if (GetArena() == nullptr && last_heard_ != nullptr) {
    delete last_heard_;
  }
  last_heard_ = nullptr;
}
NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::node::NodeId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_last_heard()) {
    last_heard_ = new ::zb::dcts::Timestamp(*from.last_heard_);
  } else {
    last_heard_ = nullptr;
  }
  if (from._internal_has_pipeline_status()) {
    pipeline_status_ = new ::zb::dcts::node::TransferStatus(*from.pipeline_status_);
  } else {
    pipeline_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.NodeInfo)
}

void NodeInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pipeline_status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pipeline_status_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.NodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete last_heard_;
  if (this != internal_default_instance()) delete pipeline_status_;
}

void NodeInfo::ArenaDtor(void* object) {
  NodeInfo* _this = reinterpret_cast< NodeInfo* >(object);
  (void)_this;
}
void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  devices_.Clear();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && last_heard_ != nullptr) {
    delete last_heard_;
  }
  last_heard_ = nullptr;
  if (GetArena() == nullptr && pipeline_status_ != nullptr) {
    delete pipeline_status_;
  }
  pipeline_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.NodeInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp last_heard = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_heard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.TaskSummary tasks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.DeviceInfo devices = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.TransferStatus pipeline_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pipeline_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.NodeInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .zb.dcts.Timestamp last_heard = 3;
  if (this->has_last_heard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::last_heard(this), target, stream);
  }

  // repeated .zb.dcts.node.TaskSummary tasks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tasks(i), target, stream);
  }

  // repeated .zb.dcts.node.DeviceInfo devices = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_devices(i), target, stream);
  }

  // .zb.dcts.node.TransferStatus pipeline_status = 8;
  if (this->has_pipeline_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pipeline_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.TaskSummary tasks = 6;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zb.dcts.node.DeviceInfo devices = 7;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .zb.dcts.node.NodeId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .zb.dcts.Timestamp last_heard = 3;
  if (this->has_last_heard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_heard_);
  }

  // .zb.dcts.node.TransferStatus pipeline_status = 8;
  if (this->has_pipeline_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pipeline_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  devices_.MergeFrom(from.devices_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::node::NodeId::MergeFrom(from._internal_id());
  }
  if (from.has_last_heard()) {
    _internal_mutable_last_heard()->::zb::dcts::Timestamp::MergeFrom(from._internal_last_heard());
  }
  if (from.has_pipeline_status()) {
    _internal_mutable_pipeline_status()->::zb::dcts::node::TransferStatus::MergeFrom(from._internal_pipeline_status());
  }
}

void NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  devices_.InternalSwap(&other->devices_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo, pipeline_status_)
      + sizeof(NodeInfo::pipeline_status_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CmdHeader::_Internal {
 public:
  static const ::zb::dcts::TaskId& task_id(const CmdHeader* msg);
  static const ::zb::dcts::node::NodeDevice& task_runner(const CmdHeader* msg);
};

const ::zb::dcts::TaskId&
CmdHeader::_Internal::task_id(const CmdHeader* msg) {
  return *msg->task_id_;
}
const ::zb::dcts::node::NodeDevice&
CmdHeader::_Internal::task_runner(const CmdHeader* msg) {
  return *msg->task_runner_;
}
void CmdHeader::clear_task_id() {
  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
}
CmdHeader::CmdHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.CmdHeader)
}
CmdHeader::CmdHeader(const CmdHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_id()) {
    task_id_ = new ::zb::dcts::TaskId(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  if (from._internal_has_task_runner()) {
    task_runner_ = new ::zb::dcts::node::NodeDevice(*from.task_runner_);
  } else {
    task_runner_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.CmdHeader)
}

void CmdHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(error_code_));
}

CmdHeader::~CmdHeader() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.CmdHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmdHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete task_runner_;
}

void CmdHeader::ArenaDtor(void* object) {
  CmdHeader* _this = reinterpret_cast< CmdHeader* >(object);
  (void)_this;
}
void CmdHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CmdHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.CmdHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
  if (GetArena() == nullptr && task_runner_ != nullptr) {
    delete task_runner_;
  }
  task_runner_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sequence_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.ErrorType error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::zb::dcts::node::ErrorType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TaskId task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.NodeDevice task_runner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_runner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.CmdHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence_number(), target);
  }

  // .zb.dcts.node.ErrorType error_code = 2;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error_code(), target);
  }

  // .zb.dcts.TaskId task_id = 3;
  if (this->has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::task_id(this), target, stream);
  }

  // .zb.dcts.node.NodeDevice task_runner = 4;
  if (this->has_task_runner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::task_runner(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.CmdHeader)
  return target;
}

size_t CmdHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.CmdHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.TaskId task_id = 3;
  if (this->has_task_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_id_);
  }

  // .zb.dcts.node.NodeDevice task_runner = 4;
  if (this->has_task_runner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_runner_);
  }

  // uint32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  // .zb.dcts.node.ErrorType error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.CmdHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.CmdHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.CmdHeader)
    MergeFrom(*source);
  }
}

void CmdHeader::MergeFrom(const CmdHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.CmdHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_id()) {
    _internal_mutable_task_id()->::zb::dcts::TaskId::MergeFrom(from._internal_task_id());
  }
  if (from.has_task_runner()) {
    _internal_mutable_task_runner()->::zb::dcts::node::NodeDevice::MergeFrom(from._internal_task_runner());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void CmdHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.CmdHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdHeader::CopyFrom(const CmdHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.CmdHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdHeader::IsInitialized() const {
  return true;
}

void CmdHeader::InternalSwap(CmdHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdHeader, error_code_)
      + sizeof(CmdHeader::error_code_)
      - PROTOBUF_FIELD_OFFSET(CmdHeader, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeReply::_Internal {
 public:
};

NodeReply::NodeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  replys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.NodeReply)
}
NodeReply::NodeReply(const NodeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replys_(from.replys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.NodeReply)
}

void NodeReply::SharedCtor() {
}

NodeReply::~NodeReply() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.NodeReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeReply::ArenaDtor(void* object) {
  NodeReply* _this = reinterpret_cast< NodeReply* >(object);
  (void)_this;
}
void NodeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.NodeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.CmdHeader replys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.NodeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.CmdHeader replys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_replys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.NodeReply)
  return target;
}

size_t NodeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.NodeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.CmdHeader replys = 1;
  total_size += 1UL * this->_internal_replys_size();
  for (const auto& msg : this->replys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.NodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.NodeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.NodeReply)
    MergeFrom(*source);
  }
}

void NodeReply::MergeFrom(const NodeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.NodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replys_.MergeFrom(from.replys_);
}

void NodeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.NodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeReply::CopyFrom(const NodeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.NodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeReply::IsInitialized() const {
  return true;
}

void NodeReply::InternalSwap(NodeReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  replys_.InternalSwap(&other->replys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodesInfo::_Internal {
 public:
};

NodesInfo::NodesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.NodesInfo)
}
NodesInfo::NodesInfo(const NodesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_info_(from.node_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.NodesInfo)
}

void NodesInfo::SharedCtor() {
}

NodesInfo::~NodesInfo() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.NodesInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodesInfo::ArenaDtor(void* object) {
  NodesInfo* _this = reinterpret_cast< NodesInfo* >(object);
  (void)_this;
}
void NodesInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.NodesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodesInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.NodeInfo node_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodesInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.NodesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeInfo node_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.NodesInfo)
  return target;
}

size_t NodesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.NodesInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeInfo node_info = 1;
  total_size += 1UL * this->_internal_node_info_size();
  for (const auto& msg : this->node_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodesInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.NodesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodesInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodesInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.NodesInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.NodesInfo)
    MergeFrom(*source);
  }
}

void NodesInfo::MergeFrom(const NodesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.NodesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_info_.MergeFrom(from.node_info_);
}

void NodesInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.NodesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesInfo::CopyFrom(const NodesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.NodesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesInfo::IsInitialized() const {
  return true;
}

void NodesInfo::InternalSwap(NodesInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_info_.InternalSwap(&other->node_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskAccount::_Internal {
 public:
  static const ::zb::dcts::TaskId& task_id(const TaskAccount* msg);
  static const ::zb::dcts::node::NodeReply& reply_details(const TaskAccount* msg);
};

const ::zb::dcts::TaskId&
TaskAccount::_Internal::task_id(const TaskAccount* msg) {
  return *msg->task_id_;
}
const ::zb::dcts::node::NodeReply&
TaskAccount::_Internal::reply_details(const TaskAccount* msg) {
  return *msg->reply_details_;
}
void TaskAccount::clear_task_id() {
  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
}
TaskAccount::TaskAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.TaskAccount)
}
TaskAccount::TaskAccount(const TaskAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_devices_(from.node_devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_id()) {
    task_id_ = new ::zb::dcts::TaskId(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  if (from._internal_has_reply_details()) {
    reply_details_ = new ::zb::dcts::node::NodeReply(*from.reply_details_);
  } else {
    reply_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.TaskAccount)
}

void TaskAccount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reply_details_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(reply_details_));
}

TaskAccount::~TaskAccount() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.TaskAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete reply_details_;
}

void TaskAccount::ArenaDtor(void* object) {
  TaskAccount* _this = reinterpret_cast< TaskAccount* >(object);
  (void)_this;
}
void TaskAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.TaskAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_devices_.Clear();
  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
  if (GetArena() == nullptr && reply_details_ != nullptr) {
    delete reply_details_;
  }
  reply_details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TaskId task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.NodeDevice node_devices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.NodeReply reply_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.TaskAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TaskId task_id = 1;
  if (this->has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_id(this), target, stream);
  }

  // repeated .zb.dcts.node.NodeDevice node_devices = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_node_devices(i), target, stream);
  }

  // .zb.dcts.node.NodeReply reply_details = 3;
  if (this->has_reply_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reply_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.TaskAccount)
  return target;
}

size_t TaskAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.TaskAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.NodeDevice node_devices = 2;
  total_size += 1UL * this->_internal_node_devices_size();
  for (const auto& msg : this->node_devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.TaskId task_id = 1;
  if (this->has_task_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_id_);
  }

  // .zb.dcts.node.NodeReply reply_details = 3;
  if (this->has_reply_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reply_details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.TaskAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.TaskAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.TaskAccount)
    MergeFrom(*source);
  }
}

void TaskAccount::MergeFrom(const TaskAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.TaskAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_devices_.MergeFrom(from.node_devices_);
  if (from.has_task_id()) {
    _internal_mutable_task_id()->::zb::dcts::TaskId::MergeFrom(from._internal_task_id());
  }
  if (from.has_reply_details()) {
    _internal_mutable_reply_details()->::zb::dcts::node::NodeReply::MergeFrom(from._internal_reply_details());
  }
}

void TaskAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.TaskAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskAccount::CopyFrom(const TaskAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.TaskAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAccount::IsInitialized() const {
  return true;
}

void TaskAccount::InternalSwap(TaskAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_devices_.InternalSwap(&other->node_devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskAccount, reply_details_)
      + sizeof(TaskAccount::reply_details_)
      - PROTOBUF_FIELD_OFFSET(TaskAccount, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::NodeId* Arena::CreateMaybeMessage< ::zb::dcts::node::NodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::NodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::DeviceId* Arena::CreateMaybeMessage< ::zb::dcts::node::DeviceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::DeviceId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::NodeDevice* Arena::CreateMaybeMessage< ::zb::dcts::node::NodeDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::NodeDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::TaskType* Arena::CreateMaybeMessage< ::zb::dcts::node::TaskType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::TaskType >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::TaskSummary* Arena::CreateMaybeMessage< ::zb::dcts::node::TaskSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::TaskSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::DeviceInfo* Arena::CreateMaybeMessage< ::zb::dcts::node::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::TransferStatus* Arena::CreateMaybeMessage< ::zb::dcts::node::TransferStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::TransferStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::NodeInfo* Arena::CreateMaybeMessage< ::zb::dcts::node::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::CmdHeader* Arena::CreateMaybeMessage< ::zb::dcts::node::CmdHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::CmdHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::NodeReply* Arena::CreateMaybeMessage< ::zb::dcts::node::NodeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::NodeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::NodesInfo* Arena::CreateMaybeMessage< ::zb::dcts::node::NodesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::NodesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::TaskAccount* Arena::CreateMaybeMessage< ::zb::dcts::node::TaskAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::TaskAccount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
