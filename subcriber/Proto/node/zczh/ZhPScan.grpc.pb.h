// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/zczh/ZhPScan.proto
#ifndef GRPC_node_2fzczh_2fZhPScan_2eproto__INCLUDED
#define GRPC_node_2fzczh_2fZhPScan_2eproto__INCLUDED

#include "node/zczh/ZhPScan.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhpscan {

class ZhPScanService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.node.zczh.zhpscan.ZhPScanService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // realtime
    virtual ::grpc::Status RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>> GetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>>(GetRealtimeResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>> AsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>>(AsyncGetRealtimeResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>> PrepareAsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>>(PrepareAsyncGetRealtimeResultRaw(context, request, cq));
    }
    virtual ::grpc::Status RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncRecordStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStartRaw(context, request, cq));
    }
    virtual ::grpc::Status RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncRecordStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStopRaw(context, request, cq));
    }
    virtual ::grpc::Status RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncRealtimeStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncRealtimeStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::OperationStatus>> GetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::OperationStatus>>(GetRealtimeStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::OperationStatus>> AsyncGetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::OperationStatus>>(AsyncGetRealtimeStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::OperationStatus>> PrepareAsyncGetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::OperationStatus>>(PrepareAsyncGetRealtimeStatusRaw(context, request, cq));
    }
    // replay
    virtual ::grpc::Status ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>> ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>>(ReplayRecordQueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>> AsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>>(AsyncReplayRecordQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>> PrepareAsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>>(PrepareAsyncReplayRecordQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>> GetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>>(GetReplayResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>> AsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>>(AsyncGetReplayResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>> PrepareAsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>>(PrepareAsyncGetReplayResultRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncReplayTaskStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayTaskStopRaw(context, request, cq));
    }
    // 通用操作
    virtual ::grpc::Status ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncZoomInOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncZoomInOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncZoomInCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncZoomInCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDataHoldOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDataHoldResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldResetRaw(context, request, cq));
    }
    virtual ::grpc::Status DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDataHoldCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDetectionOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDetectionOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncDetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncDetectionCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncDetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncDetectionCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncSetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncSetSignalDetailKeepingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncSetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncSetSignalDetailKeepingRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // realtime
      virtual void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) = 0;
      #else
      virtual void GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) = 0;
      #endif
      virtual void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRealtimeStatus(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* reactor) = 0;
      #else
      virtual void GetRealtimeStatus(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* reactor) = 0;
      #endif
      // replay
      virtual void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayRecordQuery(::grpc::ClientContext* context, ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* reactor) = 0;
      #else
      virtual void ReplayRecordQuery(::grpc::ClientContext* context, ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* reactor) = 0;
      #endif
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) = 0;
      #else
      virtual void GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) = 0;
      #endif
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 通用操作
      virtual void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>* GetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>* AsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>* PrepareAsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* GetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* AsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* PrepareAsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* ReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>* GetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>* AsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhpscan::Result>* PrepareAsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::Result>> GetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::Result>>(GetRealtimeResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>> AsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>>(AsyncGetRealtimeResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>> PrepareAsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>>(PrepareAsyncGetRealtimeResultRaw(context, request, cq));
    }
    ::grpc::Status RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncRecordStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStartRaw(context, request, cq));
    }
    ::grpc::Status RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncRecordStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncRecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncRecordStopRaw(context, request, cq));
    }
    ::grpc::Status RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncRealtimeStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncRealtimeStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>> GetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>>(GetRealtimeStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>> AsyncGetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>>(AsyncGetRealtimeStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>> PrepareAsyncGetRealtimeStatus(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>>(PrepareAsyncGetRealtimeStatusRaw(context, request, cq));
    }
    ::grpc::Status ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayTaskStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>> ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>>(ReplayRecordQueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>> AsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>>(AsyncReplayRecordQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>> PrepareAsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>>(PrepareAsyncReplayRecordQueryRaw(context, request, cq));
    }
    ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::Result>> GetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::Result>>(GetReplayResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>> AsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>>(AsyncGetReplayResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>> PrepareAsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>>(PrepareAsyncGetReplayResultRaw(context, request, cq));
    }
    ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    ::grpc::Status ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncReplayTaskStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncReplayTaskStopRaw(context, request, cq));
    }
    ::grpc::Status ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncZoomInOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncZoomInOpenRaw(context, request, cq));
    }
    ::grpc::Status ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncZoomInCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncZoomInCloseRaw(context, request, cq));
    }
    ::grpc::Status DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDataHoldOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldOpenRaw(context, request, cq));
    }
    ::grpc::Status DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDataHoldResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldResetRaw(context, request, cq));
    }
    ::grpc::Status DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDataHoldCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDataHoldCloseRaw(context, request, cq));
    }
    ::grpc::Status DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDetectionOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDetectionOpenRaw(context, request, cq));
    }
    ::grpc::Status DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncDetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncDetectionCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncDetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncDetectionCloseRaw(context, request, cq));
    }
    ::grpc::Status SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncSetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncSetSignalDetailKeepingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncSetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncSetSignalDetailKeepingRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) override;
      #else
      void GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) override;
      #endif
      void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRealtimeStatus(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* reactor) override;
      #else
      void GetRealtimeStatus(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* reactor) override;
      #endif
      void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayRecordQuery(::grpc::ClientContext* context, ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* reactor) override;
      #else
      void ReplayRecordQuery(::grpc::ClientContext* context, ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* reactor) override;
      #endif
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) override;
      #else
      void GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) override;
      #endif
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::Result>* GetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>* AsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>* PrepareAsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* GetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* AsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* PrepareAsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* ReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::Result>* GetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>* AsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>* PrepareAsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RealtimeStart_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRealtimeResult_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordStart_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordStop_;
    const ::grpc::internal::RpcMethod rpcmethod_RealtimeStop_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRealtimeStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayTaskStart_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayRecordQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStart_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReplayResult_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStop_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayAdjust_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayTaskStop_;
    const ::grpc::internal::RpcMethod rpcmethod_ZoomInOpen_;
    const ::grpc::internal::RpcMethod rpcmethod_ZoomInClose_;
    const ::grpc::internal::RpcMethod rpcmethod_DataHoldOpen_;
    const ::grpc::internal::RpcMethod rpcmethod_DataHoldReset_;
    const ::grpc::internal::RpcMethod rpcmethod_DataHoldClose_;
    const ::grpc::internal::RpcMethod rpcmethod_DetectionOpen_;
    const ::grpc::internal::RpcMethod rpcmethod_DetectionClose_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSignalDetailKeeping_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // realtime
    virtual ::grpc::Status RealtimeStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status GetRealtimeResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* writer);
    virtual ::grpc::Status RecordStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status RecordStop(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status RealtimeStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* writer);
    // replay
    virtual ::grpc::Status ReplayTaskStart(::grpc::ServerContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* writer);
    virtual ::grpc::Status ReplayStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status GetReplayResult(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* writer);
    virtual ::grpc::Status ReplayStop(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status ReplayAdjust(::grpc::ServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status ReplayTaskStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response);
    // 通用操作
    virtual ::grpc::Status ZoomInOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status ZoomInClose(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DataHoldOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DataHoldReset(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DataHoldClose(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DetectionOpen(::grpc::ServerContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status DetectionClose(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response);
    virtual ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeResult(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhpscan::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordStart() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordStop() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStop(::grpc::ServerContext* context, ::zb::dcts::node::TaskAccount* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStop(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeStatus(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStart(::grpc::ServerContext* context, ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayRecordQuery(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStart() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplayResult(::grpc::ServerContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhpscan::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStop() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::zb::dcts::node::replay::AdjustRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStop(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomInOpen(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::ZoomInRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomInClose(::grpc::ServerContext* context, ::zb::dcts::node::TaskAccount* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldOpen(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldReset(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldClose(::grpc::ServerContext* context, ::zb::dcts::node::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectionOpen(::grpc::ServerContext* context, ::zb::dcts::node::detection::DetectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DetectionClose() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectionClose(::grpc::ServerContext* context, ::zb::dcts::node::TaskAccount* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSignalDetailKeeping(::grpc::ServerContext* context, ::zb::dcts::node::detection::DetailKeepingRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RealtimeStart<WithAsyncMethod_GetRealtimeResult<WithAsyncMethod_RecordStart<WithAsyncMethod_RecordStop<WithAsyncMethod_RealtimeStop<WithAsyncMethod_GetRealtimeStatus<WithAsyncMethod_ReplayTaskStart<WithAsyncMethod_ReplayRecordQuery<WithAsyncMethod_ReplayStart<WithAsyncMethod_GetReplayResult<WithAsyncMethod_ReplayStop<WithAsyncMethod_ReplayAdjust<WithAsyncMethod_ReplayTaskStop<WithAsyncMethod_ZoomInOpen<WithAsyncMethod_ZoomInClose<WithAsyncMethod_DataHoldOpen<WithAsyncMethod_DataHoldReset<WithAsyncMethod_DataHoldClose<WithAsyncMethod_DetectionOpen<WithAsyncMethod_DetectionClose<WithAsyncMethod_SetSignalDetailKeeping<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RealtimeStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhpscan::TaskStartRequest, ::zb::dcts::node::TaskAccount>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->RealtimeStart(context, request, response); }));}
    void SetMessageAllocatorFor_RealtimeStart(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::zczh::zhpscan::TaskStartRequest, ::zb::dcts::node::TaskAccount>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhpscan::TaskStartRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RealtimeStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RealtimeStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRealtimeResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhpscan::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::TaskId* request) { return this->GetRealtimeResult(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhpscan::Result>* GetRealtimeResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::zb::dcts::node::zczh::zhpscan::Result>* GetRealtimeResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecordStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhpscan::RecordRequest, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response) { return this->RecordStart(context, request, response); }));}
    void SetMessageAllocatorFor_RecordStart(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::zczh::zhpscan::RecordRequest, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhpscan::RecordRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecordStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecordStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecordStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) { return this->RecordStop(context, request, response); }));}
    void SetMessageAllocatorFor_RecordStop(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecordStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecordStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RealtimeStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) { return this->RealtimeStop(context, request, response); }));}
    void SetMessageAllocatorFor_RealtimeStop(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RealtimeStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RealtimeStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRealtimeStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhpscan::OperationStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::TaskId* request) { return this->GetRealtimeStatus(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* GetRealtimeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* GetRealtimeStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayTaskStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->ReplayTaskStart(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayTaskStart(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayTaskStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayRecordQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest, ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* request) { return this->ReplayRecordQuery(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* ReplayRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* ReplayRecordQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayStart(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStart(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetReplayResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhpscan::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::replay::ReplayId* request) { return this->GetReplayResult(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhpscan::Result>* GetReplayResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::zb::dcts::node::zczh::zhpscan::Result>* GetReplayResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayStop(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStop(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayAdjust() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayAdjust(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayAdjust(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayAdjust(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayTaskStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) { return this->ReplayTaskStop(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayTaskStop(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayTaskStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ZoomInOpen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response) { return this->ZoomInOpen(context, request, response); }));}
    void SetMessageAllocatorFor_ZoomInOpen(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ZoomInOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ZoomInOpen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ZoomInClose() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) { return this->ZoomInClose(context, request, response); }));}
    void SetMessageAllocatorFor_ZoomInClose(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ZoomInClose(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ZoomInClose(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DataHoldOpen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DataHoldOpen(context, request, response); }));}
    void SetMessageAllocatorFor_DataHoldOpen(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DataHoldOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DataHoldOpen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DataHoldReset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DataHoldReset(context, request, response); }));}
    void SetMessageAllocatorFor_DataHoldReset(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DataHoldReset(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DataHoldReset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DataHoldClose() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DataHoldClose(context, request, response); }));}
    void SetMessageAllocatorFor_DataHoldClose(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DataHoldClose(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DataHoldClose(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DetectionOpen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response) { return this->DetectionOpen(context, request, response); }));}
    void SetMessageAllocatorFor_DetectionOpen(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(18);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DetectionOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DetectionOpen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DetectionClose() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) { return this->DetectionClose(context, request, response); }));}
    void SetMessageAllocatorFor_DetectionClose(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(19);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DetectionClose(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DetectionClose(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetSignalDetailKeeping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response) { return this->SetSignalDetailKeeping(context, request, response); }));}
    void SetMessageAllocatorFor_SetSignalDetailKeeping(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(20);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSignalDetailKeeping(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSignalDetailKeeping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RealtimeStart<ExperimentalWithCallbackMethod_GetRealtimeResult<ExperimentalWithCallbackMethod_RecordStart<ExperimentalWithCallbackMethod_RecordStop<ExperimentalWithCallbackMethod_RealtimeStop<ExperimentalWithCallbackMethod_GetRealtimeStatus<ExperimentalWithCallbackMethod_ReplayTaskStart<ExperimentalWithCallbackMethod_ReplayRecordQuery<ExperimentalWithCallbackMethod_ReplayStart<ExperimentalWithCallbackMethod_GetReplayResult<ExperimentalWithCallbackMethod_ReplayStop<ExperimentalWithCallbackMethod_ReplayAdjust<ExperimentalWithCallbackMethod_ReplayTaskStop<ExperimentalWithCallbackMethod_ZoomInOpen<ExperimentalWithCallbackMethod_ZoomInClose<ExperimentalWithCallbackMethod_DataHoldOpen<ExperimentalWithCallbackMethod_DataHoldReset<ExperimentalWithCallbackMethod_DataHoldClose<ExperimentalWithCallbackMethod_DetectionOpen<ExperimentalWithCallbackMethod_DetectionClose<ExperimentalWithCallbackMethod_SetSignalDetailKeeping<Service > > > > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RealtimeStart<ExperimentalWithCallbackMethod_GetRealtimeResult<ExperimentalWithCallbackMethod_RecordStart<ExperimentalWithCallbackMethod_RecordStop<ExperimentalWithCallbackMethod_RealtimeStop<ExperimentalWithCallbackMethod_GetRealtimeStatus<ExperimentalWithCallbackMethod_ReplayTaskStart<ExperimentalWithCallbackMethod_ReplayRecordQuery<ExperimentalWithCallbackMethod_ReplayStart<ExperimentalWithCallbackMethod_GetReplayResult<ExperimentalWithCallbackMethod_ReplayStop<ExperimentalWithCallbackMethod_ReplayAdjust<ExperimentalWithCallbackMethod_ReplayTaskStop<ExperimentalWithCallbackMethod_ZoomInOpen<ExperimentalWithCallbackMethod_ZoomInClose<ExperimentalWithCallbackMethod_DataHoldOpen<ExperimentalWithCallbackMethod_DataHoldReset<ExperimentalWithCallbackMethod_DataHoldClose<ExperimentalWithCallbackMethod_DetectionOpen<ExperimentalWithCallbackMethod_DetectionClose<ExperimentalWithCallbackMethod_SetSignalDetailKeeping<Service > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordStart() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordStop() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStart() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStop() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DetectionClose() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordStart() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordStop() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayRecordQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStart() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplayResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStop() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayTaskStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomInOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomInClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataHoldClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectionOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DetectionClose() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectionClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSignalDetailKeeping(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RealtimeStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RealtimeStart(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RealtimeStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RealtimeStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRealtimeResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetRealtimeResult(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRealtimeResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetRealtimeResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecordStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordStart(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecordStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecordStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecordStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordStop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecordStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecordStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RealtimeStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RealtimeStop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RealtimeStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RealtimeStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRealtimeStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetRealtimeStatus(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRealtimeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetRealtimeStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayTaskStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayTaskStart(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayTaskStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayRecordQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ReplayRecordQuery(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReplayRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ReplayRecordQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStart(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetReplayResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetReplayResult(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetReplayResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetReplayResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayAdjust() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayAdjust(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayAdjust(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayTaskStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayTaskStop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayTaskStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayTaskStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ZoomInOpen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ZoomInOpen(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ZoomInOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ZoomInOpen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ZoomInClose() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ZoomInClose(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ZoomInClose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ZoomInClose(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DataHoldOpen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataHoldOpen(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DataHoldOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DataHoldOpen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DataHoldReset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataHoldReset(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DataHoldReset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DataHoldReset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DataHoldClose() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataHoldClose(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DataHoldClose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DataHoldClose(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DetectionOpen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DetectionOpen(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DetectionOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DetectionOpen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DetectionClose() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DetectionClose(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DetectionClose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DetectionClose(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetSignalDetailKeeping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSignalDetailKeeping(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSignalDetailKeeping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSignalDetailKeeping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhpscan::TaskStartRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhpscan::TaskStartRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedRealtimeStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRealtimeStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhpscan::TaskStartRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordStart() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhpscan::RecordRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhpscan::RecordRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedRecordStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhpscan::RecordRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordStop() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedRecordStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::TaskAccount,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedRealtimeStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRealtimeStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayTaskStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayTaskStart() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedReplayTaskStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayTaskStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayTaskStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::CreateReplayTaskRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayTaskStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::CreateReplayTaskRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStart() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStop() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::ReplayId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayAdjust(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayAdjust(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::AdjustRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayTaskStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayTaskStop() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedReplayTaskStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayTaskStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayTaskStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayTaskStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ZoomInOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ZoomInOpen() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedZoomInOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ZoomInOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ZoomInOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZoomInOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::ZoomInRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ZoomInClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ZoomInClose() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedZoomInClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ZoomInClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ZoomInClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZoomInClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::TaskAccount,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataHoldOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataHoldOpen() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDataHoldOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataHoldOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataHoldOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataHoldOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::DataHoldRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataHoldReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataHoldReset() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDataHoldReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataHoldReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataHoldReset(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataHoldReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::DataHoldRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataHoldClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataHoldClose() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDataHoldClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataHoldClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataHoldClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataHoldClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::spectrum::DataHoldRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DetectionOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DetectionOpen() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDetectionOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DetectionOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DetectionOpen(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetectionRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetectionOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::detection::DetectionRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DetectionClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DetectionClose() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedDetectionClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DetectionClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DetectionClose(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::TaskAccount* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetectionClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::TaskAccount,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSignalDetailKeeping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSignalDetailKeeping() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedSetSignalDetailKeeping(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSignalDetailKeeping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSignalDetailKeeping(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::detection::DetailKeepingRequest* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSignalDetailKeeping(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::detection::DetailKeepingRequest,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RealtimeStart<WithStreamedUnaryMethod_RecordStart<WithStreamedUnaryMethod_RecordStop<WithStreamedUnaryMethod_RealtimeStop<WithStreamedUnaryMethod_ReplayTaskStart<WithStreamedUnaryMethod_ReplayStart<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<WithStreamedUnaryMethod_ReplayTaskStop<WithStreamedUnaryMethod_ZoomInOpen<WithStreamedUnaryMethod_ZoomInClose<WithStreamedUnaryMethod_DataHoldOpen<WithStreamedUnaryMethod_DataHoldReset<WithStreamedUnaryMethod_DataHoldClose<WithStreamedUnaryMethod_DetectionOpen<WithStreamedUnaryMethod_DetectionClose<WithStreamedUnaryMethod_SetSignalDetailKeeping<Service > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhpscan::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhpscan::Result>* streamer) {
                       return this->StreamedGetRealtimeResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRealtimeResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::TaskId,::zb::dcts::node::zczh::zhpscan::Result>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRealtimeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRealtimeStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhpscan::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhpscan::OperationStatus>* streamer) {
                       return this->StreamedGetRealtimeStatus(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRealtimeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRealtimeStatus(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRealtimeStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::TaskId,::zb::dcts::node::zczh::zhpscan::OperationStatus>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest, ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest, ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* streamer) {
                       return this->StreamedReplayRecordQuery(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReplayRecordQuery(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest,::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhpscan::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhpscan::Result>* streamer) {
                       return this->StreamedGetReplayResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::ReplayId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetReplayResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::node::replay::ReplayId,::zb::dcts::node::zczh::zhpscan::Result>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetRealtimeResult<WithSplitStreamingMethod_GetRealtimeStatus<WithSplitStreamingMethod_ReplayRecordQuery<WithSplitStreamingMethod_GetReplayResult<Service > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RealtimeStart<WithSplitStreamingMethod_GetRealtimeResult<WithStreamedUnaryMethod_RecordStart<WithStreamedUnaryMethod_RecordStop<WithStreamedUnaryMethod_RealtimeStop<WithSplitStreamingMethod_GetRealtimeStatus<WithStreamedUnaryMethod_ReplayTaskStart<WithSplitStreamingMethod_ReplayRecordQuery<WithStreamedUnaryMethod_ReplayStart<WithSplitStreamingMethod_GetReplayResult<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<WithStreamedUnaryMethod_ReplayTaskStop<WithStreamedUnaryMethod_ZoomInOpen<WithStreamedUnaryMethod_ZoomInClose<WithStreamedUnaryMethod_DataHoldOpen<WithStreamedUnaryMethod_DataHoldReset<WithStreamedUnaryMethod_DataHoldClose<WithStreamedUnaryMethod_DetectionOpen<WithStreamedUnaryMethod_DetectionClose<WithStreamedUnaryMethod_SetSignalDetailKeeping<Service > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace zhpscan
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_node_2fzczh_2fZhPScan_2eproto__INCLUDED
