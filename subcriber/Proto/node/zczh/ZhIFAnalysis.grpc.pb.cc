// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/zczh/ZhIFAnalysis.proto

#include "node/zczh/ZhIFAnalysis.pb.h"
#include "node/zczh/ZhIFAnalysis.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIFAnalysis {

static const char* ZhIFAnalysisService_method_names[] = {
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/StartRecognise",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/GetRecogniseResult",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/StopRecognise",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/ChangeRecognise",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/GetRealtimeStatus",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/ReplayTaskStart",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/ReplayRecordQuery",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/ReplayStart",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/GetReplaySpectrumResult",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/ReplayStop",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/ReplayAdjust",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/ReplayTaskStop",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/ZoomInOpen",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/ZoomInClose",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/DataHoldOpen",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/DataHoldReset",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/DataHoldClose",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/DetectionOpen",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/DetectionClose",
  "/zb.dcts.node.zczh.zhIFAnalysis.ZhIFAnalysisService/SetSignalDetailKeeping",
};

std::unique_ptr< ZhIFAnalysisService::Stub> ZhIFAnalysisService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ZhIFAnalysisService::Stub> stub(new ZhIFAnalysisService::Stub(channel));
  return stub;
}

ZhIFAnalysisService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartRecognise_(ZhIFAnalysisService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecogniseResult_(ZhIFAnalysisService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StopRecognise_(ZhIFAnalysisService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeRecognise_(ZhIFAnalysisService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRealtimeStatus_(ZhIFAnalysisService_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReplayTaskStart_(ZhIFAnalysisService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayRecordQuery_(ZhIFAnalysisService_method_names[6], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReplayStart_(ZhIFAnalysisService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReplaySpectrumResult_(ZhIFAnalysisService_method_names[8], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReplayStop_(ZhIFAnalysisService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayAdjust_(ZhIFAnalysisService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayTaskStop_(ZhIFAnalysisService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ZoomInOpen_(ZhIFAnalysisService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ZoomInClose_(ZhIFAnalysisService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataHoldOpen_(ZhIFAnalysisService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataHoldReset_(ZhIFAnalysisService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataHoldClose_(ZhIFAnalysisService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DetectionOpen_(ZhIFAnalysisService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DetectionClose_(ZhIFAnalysisService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSignalDetailKeeping_(ZhIFAnalysisService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ZhIFAnalysisService::Stub::StartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::zb::dcts::node::TaskAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartRecognise_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::StartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecognise_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::StartRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecognise_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhIFAnalysisService::Stub::PrepareAsyncStartRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartRecognise_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhIFAnalysisService::Stub::AsyncStartRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRecogniseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* ZhIFAnalysisService::Stub::GetRecogniseResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::Result>::Create(channel_.get(), rpcmethod_GetRecogniseResult_, context, request);
}

void ZhIFAnalysisService::Stub::experimental_async::GetRecogniseResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecogniseResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* ZhIFAnalysisService::Stub::AsyncGetRecogniseResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::Result>::Create(channel_.get(), cq, rpcmethod_GetRecogniseResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* ZhIFAnalysisService::Stub::PrepareAsyncGetRecogniseResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::Result>::Create(channel_.get(), cq, rpcmethod_GetRecogniseResult_, context, request, false, nullptr);
}

::grpc::Status ZhIFAnalysisService::Stub::StopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopRecognise_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::StopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopRecognise_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::StopRecognise(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopRecognise_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncStopRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopRecognise_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncStopRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRecogniseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::ChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeRecognise_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::ChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeRecognise_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::ChangeRecognise(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeRecognise_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncChangeRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeRecognise_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncChangeRecogniseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeRecogniseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* ZhIFAnalysisService::Stub::GetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>::Create(channel_.get(), rpcmethod_GetRealtimeStatus_, context, request);
}

void ZhIFAnalysisService::Stub::experimental_async::GetRealtimeStatus(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRealtimeStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* ZhIFAnalysisService::Stub::AsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>::Create(channel_.get(), cq, rpcmethod_GetRealtimeStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* ZhIFAnalysisService::Stub::PrepareAsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>::Create(channel_.get(), cq, rpcmethod_GetRealtimeStatus_, context, request, false, nullptr);
}

::grpc::Status ZhIFAnalysisService::Stub::ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::zb::dcts::node::TaskAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayTaskStart_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayTaskStart_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayTaskStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhIFAnalysisService::Stub::PrepareAsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::replay::CreateReplayTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayTaskStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhIFAnalysisService::Stub::AsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayTaskStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* ZhIFAnalysisService::Stub::ReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>::Create(channel_.get(), rpcmethod_ReplayRecordQuery_, context, request);
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayRecordQuery(::grpc::ClientContext* context, ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>::Create(stub_->channel_.get(), stub_->rpcmethod_ReplayRecordQuery_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* ZhIFAnalysisService::Stub::AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>::Create(channel_.get(), cq, rpcmethod_ReplayRecordQuery_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* ZhIFAnalysisService::Stub::PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>::Create(channel_.get(), cq, rpcmethod_ReplayRecordQuery_, context, request, false, nullptr);
}

::grpc::Status ZhIFAnalysisService::Stub::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayStart_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStart_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* ZhIFAnalysisService::Stub::GetReplaySpectrumResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::Result>::Create(channel_.get(), rpcmethod_GetReplaySpectrumResult_, context, request);
}

void ZhIFAnalysisService::Stub::experimental_async::GetReplaySpectrumResult(::grpc::ClientContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_GetReplaySpectrumResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* ZhIFAnalysisService::Stub::AsyncGetReplaySpectrumResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::Result>::Create(channel_.get(), cq, rpcmethod_GetReplaySpectrumResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* ZhIFAnalysisService::Stub::PrepareAsyncGetReplaySpectrumResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhIFAnalysis::Result>::Create(channel_.get(), cq, rpcmethod_GetReplaySpectrumResult_, context, request, false, nullptr);
}

::grpc::Status ZhIFAnalysisService::Stub::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayStop_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStop_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::replay::ReplayId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayAdjust_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayAdjust_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayAdjust_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::replay::AdjustRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayAdjust_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayAdjustRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayTaskStop_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayTaskStop_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayTaskStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayTaskStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayTaskStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ZoomInOpen_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ZoomInOpen_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ZoomInOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::ZoomInRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ZoomInOpen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncZoomInOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ZoomInClose_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ZoomInClose_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ZoomInClose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ZoomInClose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncZoomInCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataHoldOpen_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldOpen_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::DataHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataHoldOpen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataHoldOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataHoldReset_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldReset_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::DataHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataHoldReset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataHoldResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataHoldClose_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldClose_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldClose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::DataHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataHoldClose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataHoldCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DetectionOpen_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectionOpen_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectionOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::detection::DetectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DetectionOpen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDetectionOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DetectionClose_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectionClose_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectionClose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DetectionClose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDetectionCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhIFAnalysisService::Stub::SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSignalDetailKeeping_, context, request, response);
}

void ZhIFAnalysisService::Stub::experimental_async::SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSignalDetailKeeping_, context, request, response, std::move(f));
}

void ZhIFAnalysisService::Stub::experimental_async::SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSignalDetailKeeping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::PrepareAsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::detection::DetailKeepingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSignalDetailKeeping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhIFAnalysisService::Stub::AsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSignalDetailKeepingRaw(context, request, cq);
  result->StartCall();
  return result;
}

ZhIFAnalysisService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* req,
             ::zb::dcts::node::TaskAccount* resp) {
               return service->StartRecognise(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhIFAnalysisService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIFAnalysis::Result>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhIFAnalysis::Result>* writer) {
               return service->GetRecogniseResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->StopRecognise(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ChangeRecognise(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhIFAnalysisService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* writer) {
               return service->GetRealtimeStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::CreateReplayTaskRequest* req,
             ::zb::dcts::node::TaskAccount* resp) {
               return service->ReplayTaskStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest, ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* writer) {
               return service->ReplayRecordQuery(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ReplayStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhIFAnalysis::Result>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::ReplayId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhIFAnalysis::Result>* writer) {
               return service->GetReplaySpectrumResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::ReplayId* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ReplayStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::AdjustRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ReplayAdjust(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ReplayTaskStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::ZoomInRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ZoomInOpen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::TaskAccount* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ZoomInClose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::DataHoldRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DataHoldOpen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::DataHoldRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DataHoldReset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::DataHoldRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DataHoldClose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::detection::DetectionRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DetectionOpen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::TaskAccount* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DetectionClose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhIFAnalysisService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhIFAnalysisService::Service, ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhIFAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::detection::DetailKeepingRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->SetSignalDetailKeeping(ctx, req, resp);
             }, this)));
}

ZhIFAnalysisService::Service::~Service() {
}

::grpc::Status ZhIFAnalysisService::Service::StartRecognise(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::RecogniseRequest* request, ::zb::dcts::node::TaskAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::GetRecogniseResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::StopRecognise(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::ChangeRecognise(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ChangeRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::GetRealtimeStatus(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::OperationStatus>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::ReplayTaskStart(::grpc::ServerContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::ReplayRecordQuery(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordRequest* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::QueryRecordReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::ReplayStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhIFAnalysis::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::GetReplaySpectrumResult(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhIFAnalysis::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::ReplayStop(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::ReplayAdjust(::grpc::ServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::ReplayTaskStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::ZoomInOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::ZoomInClose(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::DataHoldOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::DataHoldReset(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::DataHoldClose(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::DetectionOpen(::grpc::ServerContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::DetectionClose(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhIFAnalysisService::Service::SetSignalDetailKeeping(::grpc::ServerContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace node
}  // namespace zczh
}  // namespace zhIFAnalysis

