// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/zczh/ZhPosition.proto

#include "node/zczh/ZhPosition.pb.h"
#include "node/zczh/ZhPosition.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhposition {

static const char* ZhPositionService_method_names[] = {
  "/zb.dcts.node.zczh.zhposition.ZhPositionService/RealtimeStart",
  "/zb.dcts.node.zczh.zhposition.ZhPositionService/GetRealtimeResult",
  "/zb.dcts.node.zczh.zhposition.ZhPositionService/RealtimeStop",
  "/zb.dcts.node.zczh.zhposition.ZhPositionService/ReplayRecordQuery",
  "/zb.dcts.node.zczh.zhposition.ZhPositionService/ReplayStart",
  "/zb.dcts.node.zczh.zhposition.ZhPositionService/ReplayStop",
  "/zb.dcts.node.zczh.zhposition.ZhPositionService/ReplayAdjust",
  "/zb.dcts.node.zczh.zhposition.ZhPositionService/GetReplayResult",
};

std::unique_ptr< ZhPositionService::Stub> ZhPositionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ZhPositionService::Stub> stub(new ZhPositionService::Stub(channel));
  return stub;
}

ZhPositionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RealtimeStart_(ZhPositionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRealtimeResult_(ZhPositionService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RealtimeStop_(ZhPositionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayRecordQuery_(ZhPositionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayStart_(ZhPositionService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayStop_(ZhPositionService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayAdjust_(ZhPositionService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReplayResult_(ZhPositionService_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ZhPositionService::Stub::RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::zb::dcts::node::TaskAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhposition::TaskStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RealtimeStart_, context, request, response);
}

void ZhPositionService::Stub::experimental_async::RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhposition::TaskStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealtimeStart_, context, request, response, std::move(f));
}

void ZhPositionService::Stub::experimental_async::RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealtimeStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhPositionService::Stub::PrepareAsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::zczh::zhposition::TaskStartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RealtimeStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhPositionService::Stub::AsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRealtimeStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhposition::Result>* ZhPositionService::Stub::GetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhposition::Result>::Create(channel_.get(), rpcmethod_GetRealtimeResult_, context, request);
}

void ZhPositionService::Stub::experimental_async::GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhposition::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRealtimeResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>* ZhPositionService::Stub::AsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhposition::Result>::Create(channel_.get(), cq, rpcmethod_GetRealtimeResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>* ZhPositionService::Stub::PrepareAsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhposition::Result>::Create(channel_.get(), cq, rpcmethod_GetRealtimeResult_, context, request, false, nullptr);
}

::grpc::Status ZhPositionService::Stub::RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RealtimeStop_, context, request, response);
}

void ZhPositionService::Stub::experimental_async::RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealtimeStop_, context, request, response, std::move(f));
}

void ZhPositionService::Stub::experimental_async::RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealtimeStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPositionService::Stub::PrepareAsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RealtimeStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPositionService::Stub::AsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRealtimeStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPositionService::Stub::ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::zb::dcts::node::zczh::zhposition::RecordReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhposition::RecordReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayRecordQuery_, context, request, response);
}

void ZhPositionService::Stub::experimental_async::ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhposition::RecordReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayRecordQuery_, context, request, response, std::move(f));
}

void ZhPositionService::Stub::experimental_async::ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayRecordQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhposition::RecordReply>* ZhPositionService::Stub::PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::zczh::zhposition::RecordReply, ::zb::dcts::TimeSpan, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayRecordQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhposition::RecordReply>* ZhPositionService::Stub::AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayRecordQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPositionService::Stub::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::zb::dcts::node::TaskAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhposition::ReplayStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayStart_, context, request, response);
}

void ZhPositionService::Stub::experimental_async::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhposition::ReplayStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStart_, context, request, response, std::move(f));
}

void ZhPositionService::Stub::experimental_async::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhPositionService::Stub::PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::zczh::zhposition::ReplayStartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhPositionService::Stub::AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPositionService::Stub::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayStop_, context, request, response);
}

void ZhPositionService::Stub::experimental_async::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStop_, context, request, response, std::move(f));
}

void ZhPositionService::Stub::experimental_async::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhPositionService::Stub::PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhPositionService::Stub::AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPositionService::Stub::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayAdjust_, context, request, response);
}

void ZhPositionService::Stub::experimental_async::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayAdjust_, context, request, response, std::move(f));
}

void ZhPositionService::Stub::experimental_async::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayAdjust_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhPositionService::Stub::PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::zb::dcts::node::replay::AdjustRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayAdjust_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhPositionService::Stub::AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayAdjustRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhposition::Result>* ZhPositionService::Stub::GetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhposition::Result>::Create(channel_.get(), rpcmethod_GetReplayResult_, context, request);
}

void ZhPositionService::Stub::experimental_async::GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhposition::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_GetReplayResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>* ZhPositionService::Stub::AsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhposition::Result>::Create(channel_.get(), cq, rpcmethod_GetReplayResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>* ZhPositionService::Stub::PrepareAsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhposition::Result>::Create(channel_.get(), cq, rpcmethod_GetReplayResult_, context, request, false, nullptr);
}

ZhPositionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPositionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPositionService::Service, ::zb::dcts::node::zczh::zhposition::TaskStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPositionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* req,
             ::zb::dcts::node::TaskAccount* resp) {
               return service->RealtimeStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPositionService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhPositionService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhposition::Result>(
          [](ZhPositionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhposition::Result>* writer) {
               return service->GetRealtimeResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPositionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPositionService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPositionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->RealtimeStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPositionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPositionService::Service, ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhposition::RecordReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPositionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TimeSpan* req,
             ::zb::dcts::node::zczh::zhposition::RecordReply* resp) {
               return service->ReplayRecordQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPositionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPositionService::Service, ::zb::dcts::node::zczh::zhposition::ReplayStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPositionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* req,
             ::zb::dcts::node::TaskAccount* resp) {
               return service->ReplayStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPositionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPositionService::Service, ::zb::dcts::TaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPositionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::google::protobuf::Empty* resp) {
               return service->ReplayStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPositionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPositionService::Service, ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPositionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::AdjustRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ReplayAdjust(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPositionService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhPositionService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhposition::Result>(
          [](ZhPositionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhposition::Result>* writer) {
               return service->GetReplayResult(ctx, req, writer);
             }, this)));
}

ZhPositionService::Service::~Service() {
}

::grpc::Status ZhPositionService::Service::RealtimeStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPositionService::Service::GetRealtimeResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPositionService::Service::RealtimeStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPositionService::Service::ReplayRecordQuery(::grpc::ServerContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPositionService::Service::ReplayStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPositionService::Service::ReplayStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPositionService::Service::ReplayAdjust(::grpc::ServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPositionService::Service::GetReplayResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace node
}  // namespace zczh
}  // namespace zhposition

