// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/zczh/ZhPScan.proto

#include "node/zczh/ZhPScan.pb.h"
#include "node/zczh/ZhPScan.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhpscan {

static const char* ZhPScanService_method_names[] = {
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/RealtimeStart",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/GetRealtimeResult",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/RecordStart",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/RecordStop",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/RealtimeStop",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/GetRealtimeStatus",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/ReplayTaskStart",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/ReplayRecordQuery",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/ReplayStart",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/GetReplayResult",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/ReplayStop",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/ReplayAdjust",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/ReplayTaskStop",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/ZoomInOpen",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/ZoomInClose",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/DataHoldOpen",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/DataHoldReset",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/DataHoldClose",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/DetectionOpen",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/DetectionClose",
  "/zb.dcts.node.zczh.zhpscan.ZhPScanService/SetSignalDetailKeeping",
};

std::unique_ptr< ZhPScanService::Stub> ZhPScanService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ZhPScanService::Stub> stub(new ZhPScanService::Stub(channel));
  return stub;
}

ZhPScanService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RealtimeStart_(ZhPScanService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRealtimeResult_(ZhPScanService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RecordStart_(ZhPScanService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecordStop_(ZhPScanService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RealtimeStop_(ZhPScanService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRealtimeStatus_(ZhPScanService_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReplayTaskStart_(ZhPScanService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayRecordQuery_(ZhPScanService_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReplayStart_(ZhPScanService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReplayResult_(ZhPScanService_method_names[9], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReplayStop_(ZhPScanService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayAdjust_(ZhPScanService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayTaskStop_(ZhPScanService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ZoomInOpen_(ZhPScanService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ZoomInClose_(ZhPScanService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataHoldOpen_(ZhPScanService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataHoldReset_(ZhPScanService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataHoldClose_(ZhPScanService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DetectionOpen_(ZhPScanService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DetectionClose_(ZhPScanService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSignalDetailKeeping_(ZhPScanService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ZhPScanService::Stub::RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::zb::dcts::node::TaskAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhpscan::TaskStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RealtimeStart_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhpscan::TaskStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealtimeStart_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealtimeStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhPScanService::Stub::PrepareAsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::zczh::zhpscan::TaskStartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RealtimeStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhPScanService::Stub::AsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRealtimeStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::Result>* ZhPScanService::Stub::GetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhpscan::Result>::Create(channel_.get(), rpcmethod_GetRealtimeResult_, context, request);
}

void ZhPScanService::Stub::experimental_async::GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhpscan::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRealtimeResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>* ZhPScanService::Stub::AsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhpscan::Result>::Create(channel_.get(), cq, rpcmethod_GetRealtimeResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>* ZhPScanService::Stub::PrepareAsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhpscan::Result>::Create(channel_.get(), cq, rpcmethod_GetRealtimeResult_, context, request, false, nullptr);
}

::grpc::Status ZhPScanService::Stub::RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhpscan::RecordRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecordStart_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhpscan::RecordRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordStart_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::zczh::zhpscan::RecordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecordStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecordStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecordStop_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordStop_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecordStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecordStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RealtimeStop_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealtimeStop_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealtimeStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RealtimeStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRealtimeStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* ZhPScanService::Stub::GetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhpscan::OperationStatus>::Create(channel_.get(), rpcmethod_GetRealtimeStatus_, context, request);
}

void ZhPScanService::Stub::experimental_async::GetRealtimeStatus(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhpscan::OperationStatus>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRealtimeStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* ZhPScanService::Stub::AsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhpscan::OperationStatus>::Create(channel_.get(), cq, rpcmethod_GetRealtimeStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* ZhPScanService::Stub::PrepareAsyncGetRealtimeStatusRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhpscan::OperationStatus>::Create(channel_.get(), cq, rpcmethod_GetRealtimeStatus_, context, request, false, nullptr);
}

::grpc::Status ZhPScanService::Stub::ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::zb::dcts::node::TaskAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayTaskStart_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayTaskStart_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::ReplayTaskStart(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayTaskStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhPScanService::Stub::PrepareAsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::replay::CreateReplayTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayTaskStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhPScanService::Stub::AsyncReplayTaskStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayTaskStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* ZhPScanService::Stub::ReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>::Create(channel_.get(), rpcmethod_ReplayRecordQuery_, context, request);
}

void ZhPScanService::Stub::experimental_async::ReplayRecordQuery(::grpc::ClientContext* context, ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>::Create(stub_->channel_.get(), stub_->rpcmethod_ReplayRecordQuery_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* ZhPScanService::Stub::AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>::Create(channel_.get(), cq, rpcmethod_ReplayRecordQuery_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* ZhPScanService::Stub::PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>::Create(channel_.get(), cq, rpcmethod_ReplayRecordQuery_, context, request, false, nullptr);
}

::grpc::Status ZhPScanService::Stub::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayStart_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStart_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhpscan::Result>* ZhPScanService::Stub::GetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhpscan::Result>::Create(channel_.get(), rpcmethod_GetReplayResult_, context, request);
}

void ZhPScanService::Stub::experimental_async::GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::node::replay::ReplayId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhpscan::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhpscan::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_GetReplayResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>* ZhPScanService::Stub::AsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhpscan::Result>::Create(channel_.get(), cq, rpcmethod_GetReplayResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhpscan::Result>* ZhPScanService::Stub::PrepareAsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhpscan::Result>::Create(channel_.get(), cq, rpcmethod_GetReplayResult_, context, request, false, nullptr);
}

::grpc::Status ZhPScanService::Stub::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayStop_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStop_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::replay::ReplayId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::ReplayId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayAdjust_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayAdjust_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayAdjust_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::replay::AdjustRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayAdjust_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayAdjustRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayTaskStop_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayTaskStop_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::ReplayTaskStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayTaskStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayTaskStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncReplayTaskStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayTaskStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ZoomInOpen_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ZoomInOpen_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::ZoomInOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ZoomInOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::ZoomInRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ZoomInOpen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncZoomInOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncZoomInOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ZoomInClose_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ZoomInClose_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::ZoomInClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ZoomInClose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ZoomInClose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncZoomInCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncZoomInCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataHoldOpen_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldOpen_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::DataHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataHoldOpen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataHoldOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataHoldReset_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldReset_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::DataHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataHoldReset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataHoldResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataHoldClose_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldClose_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldClose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::DataHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataHoldClose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataHoldCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DetectionOpen_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectionOpen_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::DetectionOpen(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectionOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::detection::DetectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DetectionOpen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncDetectionOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDetectionOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DetectionClose_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectionClose_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::DetectionClose(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectionClose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DetectionClose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncDetectionCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDetectionCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhPScanService::Stub::SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSignalDetailKeeping_, context, request, response);
}

void ZhPScanService::Stub::experimental_async::SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSignalDetailKeeping_, context, request, response, std::move(f));
}

void ZhPScanService::Stub::experimental_async::SetSignalDetailKeeping(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSignalDetailKeeping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::PrepareAsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::detection::DetailKeepingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSignalDetailKeeping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhPScanService::Stub::AsyncSetSignalDetailKeepingRaw(::grpc::ClientContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSignalDetailKeepingRaw(context, request, cq);
  result->StartCall();
  return result;
}

ZhPScanService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::zczh::zhpscan::TaskStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* req,
             ::zb::dcts::node::TaskAccount* resp) {
               return service->RealtimeStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhPScanService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhpscan::Result>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhpscan::Result>* writer) {
               return service->GetRealtimeResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::zczh::zhpscan::RecordRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhpscan::RecordRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->RecordStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::TaskAccount* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->RecordStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->RealtimeStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhPScanService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhpscan::OperationStatus>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhpscan::OperationStatus>* writer) {
               return service->GetRealtimeStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::replay::CreateReplayTaskRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::CreateReplayTaskRequest* req,
             ::zb::dcts::node::TaskAccount* resp) {
               return service->ReplayTaskStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhPScanService::Service, ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest, ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* writer) {
               return service->ReplayRecordQuery(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ReplayStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhPScanService::Service, ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::zczh::zhpscan::Result>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::ReplayId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhpscan::Result>* writer) {
               return service->GetReplayResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::replay::ReplayId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::ReplayId* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ReplayStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::replay::AdjustRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::AdjustRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ReplayAdjust(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ReplayTaskStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::spectrum::ZoomInRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::ZoomInRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ZoomInOpen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::TaskAccount* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->ZoomInClose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::DataHoldRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DataHoldOpen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::DataHoldRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DataHoldReset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::DataHoldRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DataHoldClose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::detection::DetectionRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::detection::DetectionRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DetectionOpen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::TaskAccount* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DetectionClose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhPScanService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhPScanService::Service, ::zb::dcts::node::detection::DetailKeepingRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhPScanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::detection::DetailKeepingRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->SetSignalDetailKeeping(ctx, req, resp);
             }, this)));
}

ZhPScanService::Service::~Service() {
}

::grpc::Status ZhPScanService::Service::RealtimeStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::GetRealtimeResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::RecordStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhpscan::RecordRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::RecordStop(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::RealtimeStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::GetRealtimeStatus(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::OperationStatus>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::ReplayTaskStart(::grpc::ServerContext* context, const ::zb::dcts::node::replay::CreateReplayTaskRequest* request, ::zb::dcts::node::TaskAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::ReplayRecordQuery(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::QueryRecordReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::ReplayStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::GetReplayResult(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhpscan::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::ReplayStop(::grpc::ServerContext* context, const ::zb::dcts::node::replay::ReplayId* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::ReplayAdjust(::grpc::ServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::ReplayTaskStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::ZoomInOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::ZoomInRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::ZoomInClose(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::DataHoldOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::DataHoldReset(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::DataHoldClose(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::DetectionOpen(::grpc::ServerContext* context, const ::zb::dcts::node::detection::DetectionRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::DetectionClose(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhPScanService::Service::SetSignalDetailKeeping(::grpc::ServerContext* context, const ::zb::dcts::node::detection::DetailKeepingRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace node
}  // namespace zczh
}  // namespace zhpscan

