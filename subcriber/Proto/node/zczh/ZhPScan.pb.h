// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/zczh/ZhPScan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhPScan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhPScan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/node.pb.h"
#include "node/spectrum.pb.h"
#include "node/replay.pb.h"
#include "node/detection.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fzczh_2fZhPScan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fzczh_2fZhPScan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fzczh_2fZhPScan_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhpscan {
class CalibParam;
struct CalibParamDefaultTypeInternal;
extern CalibParamDefaultTypeInternal _CalibParam_default_instance_;
class OperationStatus;
struct OperationStatusDefaultTypeInternal;
extern OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
class QueryRecordReply;
struct QueryRecordReplyDefaultTypeInternal;
extern QueryRecordReplyDefaultTypeInternal _QueryRecordReply_default_instance_;
class QueryRecordRequest;
struct QueryRecordRequestDefaultTypeInternal;
extern QueryRecordRequestDefaultTypeInternal _QueryRecordRequest_default_instance_;
class RecordDescriptor;
struct RecordDescriptorDefaultTypeInternal;
extern RecordDescriptorDefaultTypeInternal _RecordDescriptor_default_instance_;
class RecordRequest;
struct RecordRequestDefaultTypeInternal;
extern RecordRequestDefaultTypeInternal _RecordRequest_default_instance_;
class ReplayStartRequest;
struct ReplayStartRequestDefaultTypeInternal;
extern ReplayStartRequestDefaultTypeInternal _ReplayStartRequest_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class TaskParam;
struct TaskParamDefaultTypeInternal;
extern TaskParamDefaultTypeInternal _TaskParam_default_instance_;
class TaskStartRequest;
struct TaskStartRequestDefaultTypeInternal;
extern TaskStartRequestDefaultTypeInternal _TaskStartRequest_default_instance_;
}  // namespace zhpscan
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::zczh::zhpscan::CalibParam* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::CalibParam>(Arena*);
template<> ::zb::dcts::node::zczh::zhpscan::OperationStatus* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::OperationStatus>(Arena*);
template<> ::zb::dcts::node::zczh::zhpscan::QueryRecordReply* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::QueryRecordReply>(Arena*);
template<> ::zb::dcts::node::zczh::zhpscan::QueryRecordRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::QueryRecordRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhpscan::RecordDescriptor* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::RecordDescriptor>(Arena*);
template<> ::zb::dcts::node::zczh::zhpscan::RecordRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::RecordRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhpscan::ReplayStartRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::ReplayStartRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhpscan::Result* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::Result>(Arena*);
template<> ::zb::dcts::node::zczh::zhpscan::TaskParam* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::TaskParam>(Arena*);
template<> ::zb::dcts::node::zczh::zhpscan::TaskStartRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::TaskStartRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhpscan {

enum IFBandWidth : int {
  BAND_1K = 0,
  BAND_2K = 1,
  BAND_5K = 2,
  BAND_10K = 3,
  BAND_20K = 4,
  BAND_50K = 5,
  BAND_100K = 6,
  BAND_200K = 7,
  BAND_500K = 8,
  BAND_1M = 9,
  BAND_2M = 10,
  BAND_5M = 11,
  BAND_10M = 12,
  BAND_20M = 13,
  BAND_40M = 14,
  BAND_80M = 15,
  IFBandWidth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IFBandWidth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IFBandWidth_IsValid(int value);
constexpr IFBandWidth IFBandWidth_MIN = BAND_1K;
constexpr IFBandWidth IFBandWidth_MAX = BAND_80M;
constexpr int IFBandWidth_ARRAYSIZE = IFBandWidth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IFBandWidth_descriptor();
template<typename T>
inline const std::string& IFBandWidth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IFBandWidth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IFBandWidth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IFBandWidth_descriptor(), enum_t_value);
}
inline bool IFBandWidth_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IFBandWidth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IFBandWidth>(
    IFBandWidth_descriptor(), name, value);
}
// ===================================================================

class CalibParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.CalibParam) */ {
 public:
  inline CalibParam() : CalibParam(nullptr) {}
  virtual ~CalibParam();
  explicit constexpr CalibParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalibParam(const CalibParam& from);
  CalibParam(CalibParam&& from) noexcept
    : CalibParam() {
    *this = ::std::move(from);
  }

  inline CalibParam& operator=(const CalibParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibParam& operator=(CalibParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibParam* internal_default_instance() {
    return reinterpret_cast<const CalibParam*>(
               &_CalibParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CalibParam& a, CalibParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibParam* New() const final {
    return CreateMaybeMessage<CalibParam>(nullptr);
  }

  CalibParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibParam& from);
  void MergeFrom(const CalibParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.CalibParam";
  }
  protected:
  explicit CalibParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAntennaModeFieldNumber = 1,
    kGainFieldNumber = 2,
    kDownconverterModeFieldNumber = 3,
    kDownconverterIfAttenuationFieldNumber = 4,
    kReceiveModeFieldNumber = 5,
    kReceiveRfAttenuationFieldNumber = 6,
    kReceiveIfAttenuationFieldNumber = 7,
    kAttenuationModeFieldNumber = 8,
  };
  // int32 antenna_mode = 1;
  void clear_antenna_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_mode() const;
  void set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna_mode() const;
  void _internal_set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gain = 2;
  void clear_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 gain() const;
  void set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gain() const;
  void _internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 downconverter_mode = 3;
  void clear_downconverter_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 downconverter_mode() const;
  void set_downconverter_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_downconverter_mode() const;
  void _internal_set_downconverter_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 downconverter_if_attenuation = 4;
  void clear_downconverter_if_attenuation();
  ::PROTOBUF_NAMESPACE_ID::int32 downconverter_if_attenuation() const;
  void set_downconverter_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_downconverter_if_attenuation() const;
  void _internal_set_downconverter_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_mode = 5;
  void clear_receive_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode() const;
  void set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_mode() const;
  void _internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_rf_attenuation = 6;
  void clear_receive_rf_attenuation();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_rf_attenuation() const;
  void set_receive_rf_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_rf_attenuation() const;
  void _internal_set_receive_rf_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_if_attenuation = 7;
  void clear_receive_if_attenuation();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_if_attenuation() const;
  void set_receive_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_if_attenuation() const;
  void _internal_set_receive_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attenuation_mode = 8;
  void clear_attenuation_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_mode() const;
  void set_attenuation_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_mode() const;
  void _internal_set_attenuation_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.CalibParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 downconverter_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 downconverter_if_attenuation_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_rf_attenuation_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_if_attenuation_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// -------------------------------------------------------------------

class TaskParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.TaskParam) */ {
 public:
  inline TaskParam() : TaskParam(nullptr) {}
  virtual ~TaskParam();
  explicit constexpr TaskParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParam(const TaskParam& from);
  TaskParam(TaskParam&& from) noexcept
    : TaskParam() {
    *this = ::std::move(from);
  }

  inline TaskParam& operator=(const TaskParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParam& operator=(TaskParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParam* internal_default_instance() {
    return reinterpret_cast<const TaskParam*>(
               &_TaskParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskParam& a, TaskParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskParam* New() const final {
    return CreateMaybeMessage<TaskParam>(nullptr);
  }

  TaskParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskParam& from);
  void MergeFrom(const TaskParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.TaskParam";
  }
  protected:
  explicit TaskParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreqSpanFieldNumber = 1,
    kCalibParamFieldNumber = 13,
    kRbwFieldNumber = 2,
    kIfBandwidthFieldNumber = 3,
    kResultIntervalFieldNumber = 4,
    kStatusIntervalFieldNumber = 5,
    kExpectedPointsFieldNumber = 6,
    kAverageCountFieldNumber = 7,
    kAttenuationGainFieldNumber = 8,
    kAntennaFieldNumber = 9,
    kReceiveModeFieldNumber = 10,
    kRefLevelFieldNumber = 12,
    kRecordIntervalFieldNumber = 11,
  };
  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // .zb.dcts.node.zczh.zhpscan.CalibParam calib_param = 13;
  bool has_calib_param() const;
  private:
  bool _internal_has_calib_param() const;
  public:
  void clear_calib_param();
  const ::zb::dcts::node::zczh::zhpscan::CalibParam& calib_param() const;
  ::zb::dcts::node::zczh::zhpscan::CalibParam* release_calib_param();
  ::zb::dcts::node::zczh::zhpscan::CalibParam* mutable_calib_param();
  void set_allocated_calib_param(::zb::dcts::node::zczh::zhpscan::CalibParam* calib_param);
  private:
  const ::zb::dcts::node::zczh::zhpscan::CalibParam& _internal_calib_param() const;
  ::zb::dcts::node::zczh::zhpscan::CalibParam* _internal_mutable_calib_param();
  public:
  void unsafe_arena_set_allocated_calib_param(
      ::zb::dcts::node::zczh::zhpscan::CalibParam* calib_param);
  ::zb::dcts::node::zczh::zhpscan::CalibParam* unsafe_arena_release_calib_param();

  // double rbw = 2;
  void clear_rbw();
  double rbw() const;
  void set_rbw(double value);
  private:
  double _internal_rbw() const;
  void _internal_set_rbw(double value);
  public:

  // .zb.dcts.node.zczh.zhpscan.IFBandWidth if_bandwidth = 3;
  void clear_if_bandwidth();
  ::zb::dcts::node::zczh::zhpscan::IFBandWidth if_bandwidth() const;
  void set_if_bandwidth(::zb::dcts::node::zczh::zhpscan::IFBandWidth value);
  private:
  ::zb::dcts::node::zczh::zhpscan::IFBandWidth _internal_if_bandwidth() const;
  void _internal_set_if_bandwidth(::zb::dcts::node::zczh::zhpscan::IFBandWidth value);
  public:

  // int32 result_interval = 4;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status_interval = 5;
  void clear_status_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 status_interval() const;
  void set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_interval() const;
  void _internal_set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expected_points = 6;
  void clear_expected_points();
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points() const;
  void set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expected_points() const;
  void _internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 average_count = 7;
  void clear_average_count();
  ::PROTOBUF_NAMESPACE_ID::int32 average_count() const;
  void set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average_count() const;
  void _internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attenuation_gain = 8;
  void clear_attenuation_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain() const;
  void set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 9;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_mode = 10;
  void clear_receive_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode() const;
  void set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_mode() const;
  void _internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double ref_level = 12;
  void clear_ref_level();
  double ref_level() const;
  void set_ref_level(double value);
  private:
  double _internal_ref_level() const;
  void _internal_set_ref_level(double value);
  public:

  // int32 record_interval = 11;
  void clear_record_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 record_interval() const;
  void set_record_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_record_interval() const;
  void _internal_set_record_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.TaskParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::spectrum::FrequencySpan* freq_span_;
  ::zb::dcts::node::zczh::zhpscan::CalibParam* calib_param_;
  double rbw_;
  int if_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode_;
  double ref_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 record_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// -------------------------------------------------------------------

class TaskStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.TaskStartRequest) */ {
 public:
  inline TaskStartRequest() : TaskStartRequest(nullptr) {}
  virtual ~TaskStartRequest();
  explicit constexpr TaskStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskStartRequest(const TaskStartRequest& from);
  TaskStartRequest(TaskStartRequest&& from) noexcept
    : TaskStartRequest() {
    *this = ::std::move(from);
  }

  inline TaskStartRequest& operator=(const TaskStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStartRequest& operator=(TaskStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskStartRequest* internal_default_instance() {
    return reinterpret_cast<const TaskStartRequest*>(
               &_TaskStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskStartRequest& a, TaskStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskStartRequest* New() const final {
    return CreateMaybeMessage<TaskStartRequest>(nullptr);
  }

  TaskStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskStartRequest& from);
  void MergeFrom(const TaskStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.TaskStartRequest";
  }
  protected:
  explicit TaskStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunnerFieldNumber = 1,
    kTaskParamFieldNumber = 2,
  };
  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  int task_runner_size() const;
  private:
  int _internal_task_runner_size() const;
  public:
  void clear_task_runner();
  ::zb::dcts::node::NodeDevice* mutable_task_runner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
      mutable_task_runner();
  private:
  const ::zb::dcts::node::NodeDevice& _internal_task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* _internal_add_task_runner();
  public:
  const ::zb::dcts::node::NodeDevice& task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* add_task_runner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
      task_runner() const;

  // .zb.dcts.node.zczh.zhpscan.TaskParam task_param = 2;
  bool has_task_param() const;
  private:
  bool _internal_has_task_param() const;
  public:
  void clear_task_param();
  const ::zb::dcts::node::zczh::zhpscan::TaskParam& task_param() const;
  ::zb::dcts::node::zczh::zhpscan::TaskParam* release_task_param();
  ::zb::dcts::node::zczh::zhpscan::TaskParam* mutable_task_param();
  void set_allocated_task_param(::zb::dcts::node::zczh::zhpscan::TaskParam* task_param);
  private:
  const ::zb::dcts::node::zczh::zhpscan::TaskParam& _internal_task_param() const;
  ::zb::dcts::node::zczh::zhpscan::TaskParam* _internal_mutable_task_param();
  public:
  void unsafe_arena_set_allocated_task_param(
      ::zb::dcts::node::zczh::zhpscan::TaskParam* task_param);
  ::zb::dcts::node::zczh::zhpscan::TaskParam* unsafe_arena_release_task_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.TaskStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice > task_runner_;
  ::zb::dcts::node::zczh::zhpscan::TaskParam* task_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// -------------------------------------------------------------------

class RecordDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.RecordDescriptor) */ {
 public:
  inline RecordDescriptor() : RecordDescriptor(nullptr) {}
  virtual ~RecordDescriptor();
  explicit constexpr RecordDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordDescriptor(const RecordDescriptor& from);
  RecordDescriptor(RecordDescriptor&& from) noexcept
    : RecordDescriptor() {
    *this = ::std::move(from);
  }

  inline RecordDescriptor& operator=(const RecordDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordDescriptor& operator=(RecordDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordDescriptor* internal_default_instance() {
    return reinterpret_cast<const RecordDescriptor*>(
               &_RecordDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RecordDescriptor& a, RecordDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordDescriptor* New() const final {
    return CreateMaybeMessage<RecordDescriptor>(nullptr);
  }

  RecordDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordDescriptor& from);
  void MergeFrom(const RecordDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.RecordDescriptor";
  }
  protected:
  explicit RecordDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kTimeSpanFieldNumber = 3,
    kFreqSpanFieldNumber = 4,
    kSweepPointsFieldNumber = 5,
    kSweepCountFieldNumber = 7,
    kRecordCountFieldNumber = 9,
  };
  // string record_id = 1;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.node.NodeDevice from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::zb::dcts::node::NodeDevice& from() const;
  ::zb::dcts::node::NodeDevice* release_from();
  ::zb::dcts::node::NodeDevice* mutable_from();
  void set_allocated_from(::zb::dcts::node::NodeDevice* from);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_from() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::zb::dcts::node::NodeDevice* from);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_from();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 4;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // uint32 sweep_points = 5;
  void clear_sweep_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_points() const;
  void set_sweep_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweep_points() const;
  void _internal_set_sweep_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sweep_count = 7;
  void clear_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count() const;
  void set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweep_count() const;
  void _internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 record_count = 9;
  void clear_record_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count() const;
  void set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_count() const;
  void _internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.RecordDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::node::NodeDevice* from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::node::spectrum::FrequencySpan* freq_span_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_points_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// -------------------------------------------------------------------

class RecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.RecordRequest) */ {
 public:
  inline RecordRequest() : RecordRequest(nullptr) {}
  virtual ~RecordRequest();
  explicit constexpr RecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordRequest(const RecordRequest& from);
  RecordRequest(RecordRequest&& from) noexcept
    : RecordRequest() {
    *this = ::std::move(from);
  }

  inline RecordRequest& operator=(const RecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRequest& operator=(RecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordRequest* internal_default_instance() {
    return reinterpret_cast<const RecordRequest*>(
               &_RecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RecordRequest& a, RecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordRequest* New() const final {
    return CreateMaybeMessage<RecordRequest>(nullptr);
  }

  RecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordRequest& from);
  void MergeFrom(const RecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.RecordRequest";
  }
  protected:
  explicit RecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskAccountFieldNumber = 1,
    kTimesOfMonitorIntervalFieldNumber = 2,
  };
  // .zb.dcts.node.TaskAccount task_account = 1;
  bool has_task_account() const;
  private:
  bool _internal_has_task_account() const;
  public:
  void clear_task_account();
  const ::zb::dcts::node::TaskAccount& task_account() const;
  ::zb::dcts::node::TaskAccount* release_task_account();
  ::zb::dcts::node::TaskAccount* mutable_task_account();
  void set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account);
  private:
  const ::zb::dcts::node::TaskAccount& _internal_task_account() const;
  ::zb::dcts::node::TaskAccount* _internal_mutable_task_account();
  public:
  void unsafe_arena_set_allocated_task_account(
      ::zb::dcts::node::TaskAccount* task_account);
  ::zb::dcts::node::TaskAccount* unsafe_arena_release_task_account();

  // int32 times_of_monitor_interval = 2;
  void clear_times_of_monitor_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 times_of_monitor_interval() const;
  void set_times_of_monitor_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times_of_monitor_interval() const;
  void _internal_set_times_of_monitor_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.RecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::TaskAccount* task_account_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_of_monitor_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// -------------------------------------------------------------------

class QueryRecordReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.QueryRecordReply) */ {
 public:
  inline QueryRecordReply() : QueryRecordReply(nullptr) {}
  virtual ~QueryRecordReply();
  explicit constexpr QueryRecordReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRecordReply(const QueryRecordReply& from);
  QueryRecordReply(QueryRecordReply&& from) noexcept
    : QueryRecordReply() {
    *this = ::std::move(from);
  }

  inline QueryRecordReply& operator=(const QueryRecordReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRecordReply& operator=(QueryRecordReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRecordReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRecordReply* internal_default_instance() {
    return reinterpret_cast<const QueryRecordReply*>(
               &_QueryRecordReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryRecordReply& a, QueryRecordReply& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRecordReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRecordReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordReply* New() const final {
    return CreateMaybeMessage<QueryRecordReply>(nullptr);
  }

  QueryRecordReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRecordReply& from);
  void MergeFrom(const QueryRecordReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.QueryRecordReply";
  }
  protected:
  explicit QueryRecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchingRecordsFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // repeated .zb.dcts.node.zczh.zhpscan.RecordDescriptor matching_records = 2;
  int matching_records_size() const;
  private:
  int _internal_matching_records_size() const;
  public:
  void clear_matching_records();
  ::zb::dcts::node::zczh::zhpscan::RecordDescriptor* mutable_matching_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhpscan::RecordDescriptor >*
      mutable_matching_records();
  private:
  const ::zb::dcts::node::zczh::zhpscan::RecordDescriptor& _internal_matching_records(int index) const;
  ::zb::dcts::node::zczh::zhpscan::RecordDescriptor* _internal_add_matching_records();
  public:
  const ::zb::dcts::node::zczh::zhpscan::RecordDescriptor& matching_records(int index) const;
  ::zb::dcts::node::zczh::zhpscan::RecordDescriptor* add_matching_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhpscan::RecordDescriptor >&
      matching_records() const;

  // .zb.dcts.node.NodeId node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  const ::zb::dcts::node::NodeId& node_id() const;
  ::zb::dcts::node::NodeId* release_node_id();
  ::zb::dcts::node::NodeId* mutable_node_id();
  void set_allocated_node_id(::zb::dcts::node::NodeId* node_id);
  private:
  const ::zb::dcts::node::NodeId& _internal_node_id() const;
  ::zb::dcts::node::NodeId* _internal_mutable_node_id();
  public:
  void unsafe_arena_set_allocated_node_id(
      ::zb::dcts::node::NodeId* node_id);
  ::zb::dcts::node::NodeId* unsafe_arena_release_node_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.QueryRecordReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhpscan::RecordDescriptor > matching_records_;
  ::zb::dcts::node::NodeId* node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// -------------------------------------------------------------------

class ReplayStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.ReplayStartRequest) */ {
 public:
  inline ReplayStartRequest() : ReplayStartRequest(nullptr) {}
  virtual ~ReplayStartRequest();
  explicit constexpr ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplayStartRequest(const ReplayStartRequest& from);
  ReplayStartRequest(ReplayStartRequest&& from) noexcept
    : ReplayStartRequest() {
    *this = ::std::move(from);
  }

  inline ReplayStartRequest& operator=(const ReplayStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayStartRequest& operator=(ReplayStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplayStartRequest* internal_default_instance() {
    return reinterpret_cast<const ReplayStartRequest*>(
               &_ReplayStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReplayStartRequest& a, ReplayStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayStartRequest* New() const final {
    return CreateMaybeMessage<ReplayStartRequest>(nullptr);
  }

  ReplayStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayStartRequest& from);
  void MergeFrom(const ReplayStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.ReplayStartRequest";
  }
  protected:
  explicit ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplayIdFieldNumber = 1,
    kResultIntervalFieldNumber = 4,
    kExpectedPointsFieldNumber = 5,
  };
  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::zb::dcts::node::replay::ReplayId& replay_id() const;
  ::zb::dcts::node::replay::ReplayId* release_replay_id();
  ::zb::dcts::node::replay::ReplayId* mutable_replay_id();
  void set_allocated_replay_id(::zb::dcts::node::replay::ReplayId* replay_id);
  private:
  const ::zb::dcts::node::replay::ReplayId& _internal_replay_id() const;
  ::zb::dcts::node::replay::ReplayId* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::zb::dcts::node::replay::ReplayId* replay_id);
  ::zb::dcts::node::replay::ReplayId* unsafe_arena_release_replay_id();

  // int32 result_interval = 4;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expected_points = 5;
  void clear_expected_points();
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points() const;
  void set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expected_points() const;
  void _internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.ReplayStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::replay::ReplayId* replay_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// -------------------------------------------------------------------

class OperationStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.OperationStatus) */ {
 public:
  inline OperationStatus() : OperationStatus(nullptr) {}
  virtual ~OperationStatus();
  explicit constexpr OperationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStatus(const OperationStatus& from);
  OperationStatus(OperationStatus&& from) noexcept
    : OperationStatus() {
    *this = ::std::move(from);
  }

  inline OperationStatus& operator=(const OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStatus& operator=(OperationStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStatus* internal_default_instance() {
    return reinterpret_cast<const OperationStatus*>(
               &_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OperationStatus& a, OperationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationStatus* New() const final {
    return CreateMaybeMessage<OperationStatus>(nullptr);
  }

  OperationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationStatus& from);
  void MergeFrom(const OperationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.OperationStatus";
  }
  protected:
  explicit OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdLinesFieldNumber = 7,
    kRunningDeviceFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kTotalSweepCountFieldNumber = 5,
    kRecordCountFieldNumber = 6,
  };
  // repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
  int threshold_lines_size() const;
  private:
  int _internal_threshold_lines_size() const;
  public:
  void clear_threshold_lines();
  ::zb::dcts::node::detection::ThresholdRefLine* mutable_threshold_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >*
      mutable_threshold_lines();
  private:
  const ::zb::dcts::node::detection::ThresholdRefLine& _internal_threshold_lines(int index) const;
  ::zb::dcts::node::detection::ThresholdRefLine* _internal_add_threshold_lines();
  public:
  const ::zb::dcts::node::detection::ThresholdRefLine& threshold_lines(int index) const;
  ::zb::dcts::node::detection::ThresholdRefLine* add_threshold_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >&
      threshold_lines() const;

  // .zb.dcts.node.NodeDevice running_device = 1;
  bool has_running_device() const;
  private:
  bool _internal_has_running_device() const;
  public:
  void clear_running_device();
  const ::zb::dcts::node::NodeDevice& running_device() const;
  ::zb::dcts::node::NodeDevice* release_running_device();
  ::zb::dcts::node::NodeDevice* mutable_running_device();
  void set_allocated_running_device(::zb::dcts::node::NodeDevice* running_device);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_running_device() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_running_device();
  public:
  void unsafe_arena_set_allocated_running_device(
      ::zb::dcts::node::NodeDevice* running_device);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_running_device();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // uint32 total_sweep_count = 5;
  void clear_total_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_sweep_count() const;
  void set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_sweep_count() const;
  void _internal_set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 record_count = 6;
  void clear_record_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count() const;
  void set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_count() const;
  void _internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.OperationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine > threshold_lines_;
  ::zb::dcts::node::NodeDevice* running_device_;
  ::zb::dcts::TimeSpan* time_span_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_sweep_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPanoramaViewFieldNumber = 2,
    kCloseshotViewFieldNumber = 3,
    kSignalListFieldNumber = 4,
    kPeakAmplitudeFieldNumber = 5,
  };
  // .zb.dcts.node.spectrum.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::node::spectrum::Header& header() const;
  ::zb::dcts::node::spectrum::Header* release_header();
  ::zb::dcts::node::spectrum::Header* mutable_header();
  void set_allocated_header(::zb::dcts::node::spectrum::Header* header);
  private:
  const ::zb::dcts::node::spectrum::Header& _internal_header() const;
  ::zb::dcts::node::spectrum::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::node::spectrum::Header* header);
  ::zb::dcts::node::spectrum::Header* unsafe_arena_release_header();

  // .zb.dcts.node.spectrum.View panorama_view = 2;
  bool has_panorama_view() const;
  private:
  bool _internal_has_panorama_view() const;
  public:
  void clear_panorama_view();
  const ::zb::dcts::node::spectrum::View& panorama_view() const;
  ::zb::dcts::node::spectrum::View* release_panorama_view();
  ::zb::dcts::node::spectrum::View* mutable_panorama_view();
  void set_allocated_panorama_view(::zb::dcts::node::spectrum::View* panorama_view);
  private:
  const ::zb::dcts::node::spectrum::View& _internal_panorama_view() const;
  ::zb::dcts::node::spectrum::View* _internal_mutable_panorama_view();
  public:
  void unsafe_arena_set_allocated_panorama_view(
      ::zb::dcts::node::spectrum::View* panorama_view);
  ::zb::dcts::node::spectrum::View* unsafe_arena_release_panorama_view();

  // .zb.dcts.node.spectrum.View closeshot_view = 3;
  bool has_closeshot_view() const;
  private:
  bool _internal_has_closeshot_view() const;
  public:
  void clear_closeshot_view();
  const ::zb::dcts::node::spectrum::View& closeshot_view() const;
  ::zb::dcts::node::spectrum::View* release_closeshot_view();
  ::zb::dcts::node::spectrum::View* mutable_closeshot_view();
  void set_allocated_closeshot_view(::zb::dcts::node::spectrum::View* closeshot_view);
  private:
  const ::zb::dcts::node::spectrum::View& _internal_closeshot_view() const;
  ::zb::dcts::node::spectrum::View* _internal_mutable_closeshot_view();
  public:
  void unsafe_arena_set_allocated_closeshot_view(
      ::zb::dcts::node::spectrum::View* closeshot_view);
  ::zb::dcts::node::spectrum::View* unsafe_arena_release_closeshot_view();

  // .zb.dcts.node.detection.SignalList signal_list = 4;
  bool has_signal_list() const;
  private:
  bool _internal_has_signal_list() const;
  public:
  void clear_signal_list();
  const ::zb::dcts::node::detection::SignalList& signal_list() const;
  ::zb::dcts::node::detection::SignalList* release_signal_list();
  ::zb::dcts::node::detection::SignalList* mutable_signal_list();
  void set_allocated_signal_list(::zb::dcts::node::detection::SignalList* signal_list);
  private:
  const ::zb::dcts::node::detection::SignalList& _internal_signal_list() const;
  ::zb::dcts::node::detection::SignalList* _internal_mutable_signal_list();
  public:
  void unsafe_arena_set_allocated_signal_list(
      ::zb::dcts::node::detection::SignalList* signal_list);
  ::zb::dcts::node::detection::SignalList* unsafe_arena_release_signal_list();

  // float peak_amplitude = 5;
  void clear_peak_amplitude();
  float peak_amplitude() const;
  void set_peak_amplitude(float value);
  private:
  float _internal_peak_amplitude() const;
  void _internal_set_peak_amplitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::spectrum::Header* header_;
  ::zb::dcts::node::spectrum::View* panorama_view_;
  ::zb::dcts::node::spectrum::View* closeshot_view_;
  ::zb::dcts::node::detection::SignalList* signal_list_;
  float peak_amplitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// -------------------------------------------------------------------

class QueryRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhpscan.QueryRecordRequest) */ {
 public:
  inline QueryRecordRequest() : QueryRecordRequest(nullptr) {}
  virtual ~QueryRecordRequest();
  explicit constexpr QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRecordRequest(const QueryRecordRequest& from);
  QueryRecordRequest(QueryRecordRequest&& from) noexcept
    : QueryRecordRequest() {
    *this = ::std::move(from);
  }

  inline QueryRecordRequest& operator=(const QueryRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRecordRequest& operator=(QueryRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRecordRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRecordRequest*>(
               &_QueryRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryRecordRequest& a, QueryRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordRequest* New() const final {
    return CreateMaybeMessage<QueryRecordRequest>(nullptr);
  }

  QueryRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRecordRequest& from);
  void MergeFrom(const QueryRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhpscan.QueryRecordRequest";
  }
  protected:
  explicit QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhPScan_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskAccountFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kFreqSpanFieldNumber = 5,
  };
  // .zb.dcts.node.TaskAccount task_account = 1;
  bool has_task_account() const;
  private:
  bool _internal_has_task_account() const;
  public:
  void clear_task_account();
  const ::zb::dcts::node::TaskAccount& task_account() const;
  ::zb::dcts::node::TaskAccount* release_task_account();
  ::zb::dcts::node::TaskAccount* mutable_task_account();
  void set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account);
  private:
  const ::zb::dcts::node::TaskAccount& _internal_task_account() const;
  ::zb::dcts::node::TaskAccount* _internal_mutable_task_account();
  public:
  void unsafe_arena_set_allocated_task_account(
      ::zb::dcts::node::TaskAccount* task_account);
  ::zb::dcts::node::TaskAccount* unsafe_arena_release_task_account();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhpscan.QueryRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::TaskAccount* task_account_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::node::spectrum::FrequencySpan* freq_span_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhPScan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalibParam

// int32 antenna_mode = 1;
inline void CalibParam::clear_antenna_mode() {
  antenna_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::_internal_antenna_mode() const {
  return antenna_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::antenna_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.CalibParam.antenna_mode)
  return _internal_antenna_mode();
}
inline void CalibParam::_internal_set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_mode_ = value;
}
inline void CalibParam::set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.CalibParam.antenna_mode)
}

// int32 gain = 2;
inline void CalibParam::clear_gain() {
  gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::_internal_gain() const {
  return gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.CalibParam.gain)
  return _internal_gain();
}
inline void CalibParam::_internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gain_ = value;
}
inline void CalibParam::set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.CalibParam.gain)
}

// int32 downconverter_mode = 3;
inline void CalibParam::clear_downconverter_mode() {
  downconverter_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::_internal_downconverter_mode() const {
  return downconverter_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::downconverter_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.CalibParam.downconverter_mode)
  return _internal_downconverter_mode();
}
inline void CalibParam::_internal_set_downconverter_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  downconverter_mode_ = value;
}
inline void CalibParam::set_downconverter_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_downconverter_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.CalibParam.downconverter_mode)
}

// int32 downconverter_if_attenuation = 4;
inline void CalibParam::clear_downconverter_if_attenuation() {
  downconverter_if_attenuation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::_internal_downconverter_if_attenuation() const {
  return downconverter_if_attenuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::downconverter_if_attenuation() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.CalibParam.downconverter_if_attenuation)
  return _internal_downconverter_if_attenuation();
}
inline void CalibParam::_internal_set_downconverter_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  downconverter_if_attenuation_ = value;
}
inline void CalibParam::set_downconverter_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_downconverter_if_attenuation(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.CalibParam.downconverter_if_attenuation)
}

// int32 receive_mode = 5;
inline void CalibParam::clear_receive_mode() {
  receive_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::_internal_receive_mode() const {
  return receive_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::receive_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.CalibParam.receive_mode)
  return _internal_receive_mode();
}
inline void CalibParam::_internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_mode_ = value;
}
inline void CalibParam::set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.CalibParam.receive_mode)
}

// int32 receive_rf_attenuation = 6;
inline void CalibParam::clear_receive_rf_attenuation() {
  receive_rf_attenuation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::_internal_receive_rf_attenuation() const {
  return receive_rf_attenuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::receive_rf_attenuation() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.CalibParam.receive_rf_attenuation)
  return _internal_receive_rf_attenuation();
}
inline void CalibParam::_internal_set_receive_rf_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_rf_attenuation_ = value;
}
inline void CalibParam::set_receive_rf_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_rf_attenuation(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.CalibParam.receive_rf_attenuation)
}

// int32 receive_if_attenuation = 7;
inline void CalibParam::clear_receive_if_attenuation() {
  receive_if_attenuation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::_internal_receive_if_attenuation() const {
  return receive_if_attenuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::receive_if_attenuation() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.CalibParam.receive_if_attenuation)
  return _internal_receive_if_attenuation();
}
inline void CalibParam::_internal_set_receive_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_if_attenuation_ = value;
}
inline void CalibParam::set_receive_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_if_attenuation(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.CalibParam.receive_if_attenuation)
}

// int32 attenuation_mode = 8;
inline void CalibParam::clear_attenuation_mode() {
  attenuation_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::_internal_attenuation_mode() const {
  return attenuation_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibParam::attenuation_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.CalibParam.attenuation_mode)
  return _internal_attenuation_mode();
}
inline void CalibParam::_internal_set_attenuation_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_mode_ = value;
}
inline void CalibParam::set_attenuation_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.CalibParam.attenuation_mode)
}

// -------------------------------------------------------------------

// TaskParam

// .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
inline bool TaskParam::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool TaskParam::has_freq_span() const {
  return _internal_has_freq_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& TaskParam::_internal_freq_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& TaskParam::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.freq_span)
  return _internal_freq_span();
}
inline void TaskParam::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.TaskParam.freq_span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::release_freq_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.TaskParam.freq_span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.TaskParam.freq_span)
  return _internal_mutable_freq_span();
}
inline void TaskParam::set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span)->GetArena();
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.TaskParam.freq_span)
}

// double rbw = 2;
inline void TaskParam::clear_rbw() {
  rbw_ = 0;
}
inline double TaskParam::_internal_rbw() const {
  return rbw_;
}
inline double TaskParam::rbw() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.rbw)
  return _internal_rbw();
}
inline void TaskParam::_internal_set_rbw(double value) {
  
  rbw_ = value;
}
inline void TaskParam::set_rbw(double value) {
  _internal_set_rbw(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.rbw)
}

// .zb.dcts.node.zczh.zhpscan.IFBandWidth if_bandwidth = 3;
inline void TaskParam::clear_if_bandwidth() {
  if_bandwidth_ = 0;
}
inline ::zb::dcts::node::zczh::zhpscan::IFBandWidth TaskParam::_internal_if_bandwidth() const {
  return static_cast< ::zb::dcts::node::zczh::zhpscan::IFBandWidth >(if_bandwidth_);
}
inline ::zb::dcts::node::zczh::zhpscan::IFBandWidth TaskParam::if_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.if_bandwidth)
  return _internal_if_bandwidth();
}
inline void TaskParam::_internal_set_if_bandwidth(::zb::dcts::node::zczh::zhpscan::IFBandWidth value) {
  
  if_bandwidth_ = value;
}
inline void TaskParam::set_if_bandwidth(::zb::dcts::node::zczh::zhpscan::IFBandWidth value) {
  _internal_set_if_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.if_bandwidth)
}

// int32 result_interval = 4;
inline void TaskParam::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.result_interval)
  return _internal_result_interval();
}
inline void TaskParam::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void TaskParam::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.result_interval)
}

// int32 status_interval = 5;
inline void TaskParam::clear_status_interval() {
  status_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_status_interval() const {
  return status_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::status_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.status_interval)
  return _internal_status_interval();
}
inline void TaskParam::_internal_set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_interval_ = value;
}
inline void TaskParam::set_status_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.status_interval)
}

// int32 expected_points = 6;
inline void TaskParam::clear_expected_points() {
  expected_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_expected_points() const {
  return expected_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::expected_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.expected_points)
  return _internal_expected_points();
}
inline void TaskParam::_internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expected_points_ = value;
}
inline void TaskParam::set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expected_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.expected_points)
}

// int32 average_count = 7;
inline void TaskParam::clear_average_count() {
  average_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_average_count() const {
  return average_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::average_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.average_count)
  return _internal_average_count();
}
inline void TaskParam::_internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_count_ = value;
}
inline void TaskParam::set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.average_count)
}

// int32 attenuation_gain = 8;
inline void TaskParam::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void TaskParam::_internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_gain_ = value;
}
inline void TaskParam::set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.attenuation_gain)
}

// int32 antenna = 9;
inline void TaskParam::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.antenna)
  return _internal_antenna();
}
inline void TaskParam::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void TaskParam::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.antenna)
}

// int32 receive_mode = 10;
inline void TaskParam::clear_receive_mode() {
  receive_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_receive_mode() const {
  return receive_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::receive_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.receive_mode)
  return _internal_receive_mode();
}
inline void TaskParam::_internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_mode_ = value;
}
inline void TaskParam::set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.receive_mode)
}

// int32 record_interval = 11;
inline void TaskParam::clear_record_interval() {
  record_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_record_interval() const {
  return record_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::record_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.record_interval)
  return _internal_record_interval();
}
inline void TaskParam::_internal_set_record_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  record_interval_ = value;
}
inline void TaskParam::set_record_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_record_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.record_interval)
}

// double ref_level = 12;
inline void TaskParam::clear_ref_level() {
  ref_level_ = 0;
}
inline double TaskParam::_internal_ref_level() const {
  return ref_level_;
}
inline double TaskParam::ref_level() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.ref_level)
  return _internal_ref_level();
}
inline void TaskParam::_internal_set_ref_level(double value) {
  
  ref_level_ = value;
}
inline void TaskParam::set_ref_level(double value) {
  _internal_set_ref_level(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.TaskParam.ref_level)
}

// .zb.dcts.node.zczh.zhpscan.CalibParam calib_param = 13;
inline bool TaskParam::_internal_has_calib_param() const {
  return this != internal_default_instance() && calib_param_ != nullptr;
}
inline bool TaskParam::has_calib_param() const {
  return _internal_has_calib_param();
}
inline void TaskParam::clear_calib_param() {
  if (GetArena() == nullptr && calib_param_ != nullptr) {
    delete calib_param_;
  }
  calib_param_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhpscan::CalibParam& TaskParam::_internal_calib_param() const {
  const ::zb::dcts::node::zczh::zhpscan::CalibParam* p = calib_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhpscan::CalibParam&>(
      ::zb::dcts::node::zczh::zhpscan::_CalibParam_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhpscan::CalibParam& TaskParam::calib_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskParam.calib_param)
  return _internal_calib_param();
}
inline void TaskParam::unsafe_arena_set_allocated_calib_param(
    ::zb::dcts::node::zczh::zhpscan::CalibParam* calib_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calib_param_);
  }
  calib_param_ = calib_param;
  if (calib_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.TaskParam.calib_param)
}
inline ::zb::dcts::node::zczh::zhpscan::CalibParam* TaskParam::release_calib_param() {
  
  ::zb::dcts::node::zczh::zhpscan::CalibParam* temp = calib_param_;
  calib_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhpscan::CalibParam* TaskParam::unsafe_arena_release_calib_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.TaskParam.calib_param)
  
  ::zb::dcts::node::zczh::zhpscan::CalibParam* temp = calib_param_;
  calib_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhpscan::CalibParam* TaskParam::_internal_mutable_calib_param() {
  
  if (calib_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::CalibParam>(GetArena());
    calib_param_ = p;
  }
  return calib_param_;
}
inline ::zb::dcts::node::zczh::zhpscan::CalibParam* TaskParam::mutable_calib_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.TaskParam.calib_param)
  return _internal_mutable_calib_param();
}
inline void TaskParam::set_allocated_calib_param(::zb::dcts::node::zczh::zhpscan::CalibParam* calib_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete calib_param_;
  }
  if (calib_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(calib_param);
    if (message_arena != submessage_arena) {
      calib_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calib_param, submessage_arena);
    }
    
  } else {
    
  }
  calib_param_ = calib_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.TaskParam.calib_param)
}

// -------------------------------------------------------------------

// TaskStartRequest

// repeated .zb.dcts.node.NodeDevice task_runner = 1;
inline int TaskStartRequest::_internal_task_runner_size() const {
  return task_runner_.size();
}
inline int TaskStartRequest::task_runner_size() const {
  return _internal_task_runner_size();
}
inline ::zb::dcts::node::NodeDevice* TaskStartRequest::mutable_task_runner(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_runner)
  return task_runner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
TaskStartRequest::mutable_task_runner() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_runner)
  return &task_runner_;
}
inline const ::zb::dcts::node::NodeDevice& TaskStartRequest::_internal_task_runner(int index) const {
  return task_runner_.Get(index);
}
inline const ::zb::dcts::node::NodeDevice& TaskStartRequest::task_runner(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_runner)
  return _internal_task_runner(index);
}
inline ::zb::dcts::node::NodeDevice* TaskStartRequest::_internal_add_task_runner() {
  return task_runner_.Add();
}
inline ::zb::dcts::node::NodeDevice* TaskStartRequest::add_task_runner() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_runner)
  return _internal_add_task_runner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
TaskStartRequest::task_runner() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_runner)
  return task_runner_;
}

// .zb.dcts.node.zczh.zhpscan.TaskParam task_param = 2;
inline bool TaskStartRequest::_internal_has_task_param() const {
  return this != internal_default_instance() && task_param_ != nullptr;
}
inline bool TaskStartRequest::has_task_param() const {
  return _internal_has_task_param();
}
inline void TaskStartRequest::clear_task_param() {
  if (GetArena() == nullptr && task_param_ != nullptr) {
    delete task_param_;
  }
  task_param_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhpscan::TaskParam& TaskStartRequest::_internal_task_param() const {
  const ::zb::dcts::node::zczh::zhpscan::TaskParam* p = task_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhpscan::TaskParam&>(
      ::zb::dcts::node::zczh::zhpscan::_TaskParam_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhpscan::TaskParam& TaskStartRequest::task_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_param)
  return _internal_task_param();
}
inline void TaskStartRequest::unsafe_arena_set_allocated_task_param(
    ::zb::dcts::node::zczh::zhpscan::TaskParam* task_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_param_);
  }
  task_param_ = task_param;
  if (task_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_param)
}
inline ::zb::dcts::node::zczh::zhpscan::TaskParam* TaskStartRequest::release_task_param() {
  
  ::zb::dcts::node::zczh::zhpscan::TaskParam* temp = task_param_;
  task_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhpscan::TaskParam* TaskStartRequest::unsafe_arena_release_task_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_param)
  
  ::zb::dcts::node::zczh::zhpscan::TaskParam* temp = task_param_;
  task_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhpscan::TaskParam* TaskStartRequest::_internal_mutable_task_param() {
  
  if (task_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhpscan::TaskParam>(GetArena());
    task_param_ = p;
  }
  return task_param_;
}
inline ::zb::dcts::node::zczh::zhpscan::TaskParam* TaskStartRequest::mutable_task_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_param)
  return _internal_mutable_task_param();
}
inline void TaskStartRequest::set_allocated_task_param(::zb::dcts::node::zczh::zhpscan::TaskParam* task_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_param_;
  }
  if (task_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task_param);
    if (message_arena != submessage_arena) {
      task_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_param, submessage_arena);
    }
    
  } else {
    
  }
  task_param_ = task_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.TaskStartRequest.task_param)
}

// -------------------------------------------------------------------

// RecordDescriptor

// string record_id = 1;
inline void RecordDescriptor::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& RecordDescriptor::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id)
  return _internal_record_id();
}
inline void RecordDescriptor::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& RecordDescriptor::_internal_record_id() const {
  return record_id_.Get();
}
inline void RecordDescriptor::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecordDescriptor::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecordDescriptor::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDescriptor::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_id)
}

// .zb.dcts.node.NodeDevice from = 2;
inline bool RecordDescriptor::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool RecordDescriptor::has_from() const {
  return _internal_has_from();
}
inline const ::zb::dcts::node::NodeDevice& RecordDescriptor::_internal_from() const {
  const ::zb::dcts::node::NodeDevice* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& RecordDescriptor::from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.RecordDescriptor.from)
  return _internal_from();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_from(
    ::zb::dcts::node::NodeDevice* from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.RecordDescriptor.from)
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::release_from() {
  
  ::zb::dcts::node::NodeDevice* temp = from_;
  from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.RecordDescriptor.from)
  
  ::zb::dcts::node::NodeDevice* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    from_ = p;
  }
  return from_;
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::mutable_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.RecordDescriptor.from)
  return _internal_mutable_from();
}
inline void RecordDescriptor::set_allocated_from(::zb::dcts::node::NodeDevice* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from)->GetArena();
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.RecordDescriptor.from)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool RecordDescriptor::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool RecordDescriptor::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.RecordDescriptor.time_span)
  return _internal_time_span();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.RecordDescriptor.time_span)
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.RecordDescriptor.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.RecordDescriptor.time_span)
  return _internal_mutable_time_span();
}
inline void RecordDescriptor::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.RecordDescriptor.time_span)
}

// .zb.dcts.node.spectrum.FrequencySpan freq_span = 4;
inline bool RecordDescriptor::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool RecordDescriptor::has_freq_span() const {
  return _internal_has_freq_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& RecordDescriptor::_internal_freq_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& RecordDescriptor::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.RecordDescriptor.freq_span)
  return _internal_freq_span();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.RecordDescriptor.freq_span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RecordDescriptor::release_freq_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RecordDescriptor::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.RecordDescriptor.freq_span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RecordDescriptor::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* RecordDescriptor::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.RecordDescriptor.freq_span)
  return _internal_mutable_freq_span();
}
inline void RecordDescriptor::set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span)->GetArena();
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.RecordDescriptor.freq_span)
}

// uint32 sweep_points = 5;
inline void RecordDescriptor::clear_sweep_points() {
  sweep_points_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::_internal_sweep_points() const {
  return sweep_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::sweep_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.RecordDescriptor.sweep_points)
  return _internal_sweep_points();
}
inline void RecordDescriptor::_internal_set_sweep_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sweep_points_ = value;
}
inline void RecordDescriptor::set_sweep_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweep_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.RecordDescriptor.sweep_points)
}

// uint32 sweep_count = 7;
inline void RecordDescriptor::clear_sweep_count() {
  sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::_internal_sweep_count() const {
  return sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.RecordDescriptor.sweep_count)
  return _internal_sweep_count();
}
inline void RecordDescriptor::_internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sweep_count_ = value;
}
inline void RecordDescriptor::set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.RecordDescriptor.sweep_count)
}

// uint32 record_count = 9;
inline void RecordDescriptor::clear_record_count() {
  record_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::_internal_record_count() const {
  return record_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::record_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_count)
  return _internal_record_count();
}
inline void RecordDescriptor::_internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  record_count_ = value;
}
inline void RecordDescriptor::set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.RecordDescriptor.record_count)
}

// -------------------------------------------------------------------

// RecordRequest

// .zb.dcts.node.TaskAccount task_account = 1;
inline bool RecordRequest::_internal_has_task_account() const {
  return this != internal_default_instance() && task_account_ != nullptr;
}
inline bool RecordRequest::has_task_account() const {
  return _internal_has_task_account();
}
inline const ::zb::dcts::node::TaskAccount& RecordRequest::_internal_task_account() const {
  const ::zb::dcts::node::TaskAccount* p = task_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::TaskAccount&>(
      ::zb::dcts::node::_TaskAccount_default_instance_);
}
inline const ::zb::dcts::node::TaskAccount& RecordRequest::task_account() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.RecordRequest.task_account)
  return _internal_task_account();
}
inline void RecordRequest::unsafe_arena_set_allocated_task_account(
    ::zb::dcts::node::TaskAccount* task_account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  task_account_ = task_account;
  if (task_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.RecordRequest.task_account)
}
inline ::zb::dcts::node::TaskAccount* RecordRequest::release_task_account() {
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::TaskAccount* RecordRequest::unsafe_arena_release_task_account() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.RecordRequest.task_account)
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::TaskAccount* RecordRequest::_internal_mutable_task_account() {
  
  if (task_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::TaskAccount>(GetArena());
    task_account_ = p;
  }
  return task_account_;
}
inline ::zb::dcts::node::TaskAccount* RecordRequest::mutable_task_account() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.RecordRequest.task_account)
  return _internal_mutable_task_account();
}
inline void RecordRequest::set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  if (task_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account)->GetArena();
    if (message_arena != submessage_arena) {
      task_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_account, submessage_arena);
    }
    
  } else {
    
  }
  task_account_ = task_account;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.RecordRequest.task_account)
}

// int32 times_of_monitor_interval = 2;
inline void RecordRequest::clear_times_of_monitor_interval() {
  times_of_monitor_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordRequest::_internal_times_of_monitor_interval() const {
  return times_of_monitor_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordRequest::times_of_monitor_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.RecordRequest.times_of_monitor_interval)
  return _internal_times_of_monitor_interval();
}
inline void RecordRequest::_internal_set_times_of_monitor_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_of_monitor_interval_ = value;
}
inline void RecordRequest::set_times_of_monitor_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times_of_monitor_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.RecordRequest.times_of_monitor_interval)
}

// -------------------------------------------------------------------

// QueryRecordReply

// .zb.dcts.node.NodeId node_id = 1;
inline bool QueryRecordReply::_internal_has_node_id() const {
  return this != internal_default_instance() && node_id_ != nullptr;
}
inline bool QueryRecordReply::has_node_id() const {
  return _internal_has_node_id();
}
inline const ::zb::dcts::node::NodeId& QueryRecordReply::_internal_node_id() const {
  const ::zb::dcts::node::NodeId* p = node_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeId&>(
      ::zb::dcts::node::_NodeId_default_instance_);
}
inline const ::zb::dcts::node::NodeId& QueryRecordReply::node_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.QueryRecordReply.node_id)
  return _internal_node_id();
}
inline void QueryRecordReply::unsafe_arena_set_allocated_node_id(
    ::zb::dcts::node::NodeId* node_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.QueryRecordReply.node_id)
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::release_node_id() {
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.QueryRecordReply.node_id)
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::_internal_mutable_node_id() {
  
  if (node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeId>(GetArena());
    node_id_ = p;
  }
  return node_id_;
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.QueryRecordReply.node_id)
  return _internal_mutable_node_id();
}
inline void QueryRecordReply::set_allocated_node_id(::zb::dcts::node::NodeId* node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  if (node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id)->GetArena();
    if (message_arena != submessage_arena) {
      node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_id, submessage_arena);
    }
    
  } else {
    
  }
  node_id_ = node_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.QueryRecordReply.node_id)
}

// repeated .zb.dcts.node.zczh.zhpscan.RecordDescriptor matching_records = 2;
inline int QueryRecordReply::_internal_matching_records_size() const {
  return matching_records_.size();
}
inline int QueryRecordReply::matching_records_size() const {
  return _internal_matching_records_size();
}
inline void QueryRecordReply::clear_matching_records() {
  matching_records_.Clear();
}
inline ::zb::dcts::node::zczh::zhpscan::RecordDescriptor* QueryRecordReply::mutable_matching_records(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.QueryRecordReply.matching_records)
  return matching_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhpscan::RecordDescriptor >*
QueryRecordReply::mutable_matching_records() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhpscan.QueryRecordReply.matching_records)
  return &matching_records_;
}
inline const ::zb::dcts::node::zczh::zhpscan::RecordDescriptor& QueryRecordReply::_internal_matching_records(int index) const {
  return matching_records_.Get(index);
}
inline const ::zb::dcts::node::zczh::zhpscan::RecordDescriptor& QueryRecordReply::matching_records(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.QueryRecordReply.matching_records)
  return _internal_matching_records(index);
}
inline ::zb::dcts::node::zczh::zhpscan::RecordDescriptor* QueryRecordReply::_internal_add_matching_records() {
  return matching_records_.Add();
}
inline ::zb::dcts::node::zczh::zhpscan::RecordDescriptor* QueryRecordReply::add_matching_records() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhpscan.QueryRecordReply.matching_records)
  return _internal_add_matching_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhpscan::RecordDescriptor >&
QueryRecordReply::matching_records() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhpscan.QueryRecordReply.matching_records)
  return matching_records_;
}

// -------------------------------------------------------------------

// ReplayStartRequest

// .zb.dcts.node.replay.ReplayId replay_id = 1;
inline bool ReplayStartRequest::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool ReplayStartRequest::has_replay_id() const {
  return _internal_has_replay_id();
}
inline const ::zb::dcts::node::replay::ReplayId& ReplayStartRequest::_internal_replay_id() const {
  const ::zb::dcts::node::replay::ReplayId* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::replay::ReplayId&>(
      ::zb::dcts::node::replay::_ReplayId_default_instance_);
}
inline const ::zb::dcts::node::replay::ReplayId& ReplayStartRequest::replay_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.ReplayStartRequest.replay_id)
  return _internal_replay_id();
}
inline void ReplayStartRequest::unsafe_arena_set_allocated_replay_id(
    ::zb::dcts::node::replay::ReplayId* replay_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.ReplayStartRequest.replay_id)
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::release_replay_id() {
  
  ::zb::dcts::node::replay::ReplayId* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.ReplayStartRequest.replay_id)
  
  ::zb::dcts::node::replay::ReplayId* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::replay::ReplayId>(GetArena());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.ReplayStartRequest.replay_id)
  return _internal_mutable_replay_id();
}
inline void ReplayStartRequest::set_allocated_replay_id(::zb::dcts::node::replay::ReplayId* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id)->GetArena();
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.ReplayStartRequest.replay_id)
}

// int32 result_interval = 4;
inline void ReplayStartRequest::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.ReplayStartRequest.result_interval)
  return _internal_result_interval();
}
inline void ReplayStartRequest::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void ReplayStartRequest::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.ReplayStartRequest.result_interval)
}

// int32 expected_points = 5;
inline void ReplayStartRequest::clear_expected_points() {
  expected_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::_internal_expected_points() const {
  return expected_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::expected_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.ReplayStartRequest.expected_points)
  return _internal_expected_points();
}
inline void ReplayStartRequest::_internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expected_points_ = value;
}
inline void ReplayStartRequest::set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expected_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.ReplayStartRequest.expected_points)
}

// -------------------------------------------------------------------

// OperationStatus

// .zb.dcts.node.NodeDevice running_device = 1;
inline bool OperationStatus::_internal_has_running_device() const {
  return this != internal_default_instance() && running_device_ != nullptr;
}
inline bool OperationStatus::has_running_device() const {
  return _internal_has_running_device();
}
inline const ::zb::dcts::node::NodeDevice& OperationStatus::_internal_running_device() const {
  const ::zb::dcts::node::NodeDevice* p = running_device_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& OperationStatus::running_device() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.OperationStatus.running_device)
  return _internal_running_device();
}
inline void OperationStatus::unsafe_arena_set_allocated_running_device(
    ::zb::dcts::node::NodeDevice* running_device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_device_);
  }
  running_device_ = running_device;
  if (running_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.OperationStatus.running_device)
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::release_running_device() {
  
  ::zb::dcts::node::NodeDevice* temp = running_device_;
  running_device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::unsafe_arena_release_running_device() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.OperationStatus.running_device)
  
  ::zb::dcts::node::NodeDevice* temp = running_device_;
  running_device_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::_internal_mutable_running_device() {
  
  if (running_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    running_device_ = p;
  }
  return running_device_;
}
inline ::zb::dcts::node::NodeDevice* OperationStatus::mutable_running_device() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.OperationStatus.running_device)
  return _internal_mutable_running_device();
}
inline void OperationStatus::set_allocated_running_device(::zb::dcts::node::NodeDevice* running_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_device_);
  }
  if (running_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(running_device)->GetArena();
    if (message_arena != submessage_arena) {
      running_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, running_device, submessage_arena);
    }
    
  } else {
    
  }
  running_device_ = running_device;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.OperationStatus.running_device)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool OperationStatus::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool OperationStatus::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& OperationStatus::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& OperationStatus::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.OperationStatus.time_span)
  return _internal_time_span();
}
inline void OperationStatus::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.OperationStatus.time_span)
}
inline ::zb::dcts::TimeSpan* OperationStatus::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* OperationStatus::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.OperationStatus.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* OperationStatus::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* OperationStatus::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.OperationStatus.time_span)
  return _internal_mutable_time_span();
}
inline void OperationStatus::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.OperationStatus.time_span)
}

// uint32 total_sweep_count = 5;
inline void OperationStatus::clear_total_sweep_count() {
  total_sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::_internal_total_sweep_count() const {
  return total_sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::total_sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.OperationStatus.total_sweep_count)
  return _internal_total_sweep_count();
}
inline void OperationStatus::_internal_set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_sweep_count_ = value;
}
inline void OperationStatus::set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.OperationStatus.total_sweep_count)
}

// uint32 record_count = 6;
inline void OperationStatus::clear_record_count() {
  record_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::_internal_record_count() const {
  return record_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationStatus::record_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.OperationStatus.record_count)
  return _internal_record_count();
}
inline void OperationStatus::_internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  record_count_ = value;
}
inline void OperationStatus::set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.OperationStatus.record_count)
}

// repeated .zb.dcts.node.detection.ThresholdRefLine threshold_lines = 7;
inline int OperationStatus::_internal_threshold_lines_size() const {
  return threshold_lines_.size();
}
inline int OperationStatus::threshold_lines_size() const {
  return _internal_threshold_lines_size();
}
inline ::zb::dcts::node::detection::ThresholdRefLine* OperationStatus::mutable_threshold_lines(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.OperationStatus.threshold_lines)
  return threshold_lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >*
OperationStatus::mutable_threshold_lines() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhpscan.OperationStatus.threshold_lines)
  return &threshold_lines_;
}
inline const ::zb::dcts::node::detection::ThresholdRefLine& OperationStatus::_internal_threshold_lines(int index) const {
  return threshold_lines_.Get(index);
}
inline const ::zb::dcts::node::detection::ThresholdRefLine& OperationStatus::threshold_lines(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.OperationStatus.threshold_lines)
  return _internal_threshold_lines(index);
}
inline ::zb::dcts::node::detection::ThresholdRefLine* OperationStatus::_internal_add_threshold_lines() {
  return threshold_lines_.Add();
}
inline ::zb::dcts::node::detection::ThresholdRefLine* OperationStatus::add_threshold_lines() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhpscan.OperationStatus.threshold_lines)
  return _internal_add_threshold_lines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::detection::ThresholdRefLine >&
OperationStatus::threshold_lines() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhpscan.OperationStatus.threshold_lines)
  return threshold_lines_;
}

// -------------------------------------------------------------------

// Result

// .zb.dcts.node.spectrum.Header header = 1;
inline bool Result::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Result::has_header() const {
  return _internal_has_header();
}
inline const ::zb::dcts::node::spectrum::Header& Result::_internal_header() const {
  const ::zb::dcts::node::spectrum::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::Header&>(
      ::zb::dcts::node::spectrum::_Header_default_instance_);
}
inline const ::zb::dcts::node::spectrum::Header& Result::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.Result.header)
  return _internal_header();
}
inline void Result::unsafe_arena_set_allocated_header(
    ::zb::dcts::node::spectrum::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.Result.header)
}
inline ::zb::dcts::node::spectrum::Header* Result::release_header() {
  
  ::zb::dcts::node::spectrum::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::Header* Result::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.Result.header)
  
  ::zb::dcts::node::spectrum::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::Header* Result::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::node::spectrum::Header* Result::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.Result.header)
  return _internal_mutable_header();
}
inline void Result::set_allocated_header(::zb::dcts::node::spectrum::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.Result.header)
}

// .zb.dcts.node.spectrum.View panorama_view = 2;
inline bool Result::_internal_has_panorama_view() const {
  return this != internal_default_instance() && panorama_view_ != nullptr;
}
inline bool Result::has_panorama_view() const {
  return _internal_has_panorama_view();
}
inline const ::zb::dcts::node::spectrum::View& Result::_internal_panorama_view() const {
  const ::zb::dcts::node::spectrum::View* p = panorama_view_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::View&>(
      ::zb::dcts::node::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::node::spectrum::View& Result::panorama_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.Result.panorama_view)
  return _internal_panorama_view();
}
inline void Result::unsafe_arena_set_allocated_panorama_view(
    ::zb::dcts::node::spectrum::View* panorama_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  panorama_view_ = panorama_view;
  if (panorama_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.Result.panorama_view)
}
inline ::zb::dcts::node::spectrum::View* Result::release_panorama_view() {
  
  ::zb::dcts::node::spectrum::View* temp = panorama_view_;
  panorama_view_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::View* Result::unsafe_arena_release_panorama_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.Result.panorama_view)
  
  ::zb::dcts::node::spectrum::View* temp = panorama_view_;
  panorama_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::View* Result::_internal_mutable_panorama_view() {
  
  if (panorama_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::View>(GetArena());
    panorama_view_ = p;
  }
  return panorama_view_;
}
inline ::zb::dcts::node::spectrum::View* Result::mutable_panorama_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.Result.panorama_view)
  return _internal_mutable_panorama_view();
}
inline void Result::set_allocated_panorama_view(::zb::dcts::node::spectrum::View* panorama_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  if (panorama_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view)->GetArena();
    if (message_arena != submessage_arena) {
      panorama_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panorama_view, submessage_arena);
    }
    
  } else {
    
  }
  panorama_view_ = panorama_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.Result.panorama_view)
}

// .zb.dcts.node.spectrum.View closeshot_view = 3;
inline bool Result::_internal_has_closeshot_view() const {
  return this != internal_default_instance() && closeshot_view_ != nullptr;
}
inline bool Result::has_closeshot_view() const {
  return _internal_has_closeshot_view();
}
inline const ::zb::dcts::node::spectrum::View& Result::_internal_closeshot_view() const {
  const ::zb::dcts::node::spectrum::View* p = closeshot_view_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::View&>(
      ::zb::dcts::node::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::node::spectrum::View& Result::closeshot_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.Result.closeshot_view)
  return _internal_closeshot_view();
}
inline void Result::unsafe_arena_set_allocated_closeshot_view(
    ::zb::dcts::node::spectrum::View* closeshot_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  closeshot_view_ = closeshot_view;
  if (closeshot_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.Result.closeshot_view)
}
inline ::zb::dcts::node::spectrum::View* Result::release_closeshot_view() {
  
  ::zb::dcts::node::spectrum::View* temp = closeshot_view_;
  closeshot_view_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::View* Result::unsafe_arena_release_closeshot_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.Result.closeshot_view)
  
  ::zb::dcts::node::spectrum::View* temp = closeshot_view_;
  closeshot_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::View* Result::_internal_mutable_closeshot_view() {
  
  if (closeshot_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::View>(GetArena());
    closeshot_view_ = p;
  }
  return closeshot_view_;
}
inline ::zb::dcts::node::spectrum::View* Result::mutable_closeshot_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.Result.closeshot_view)
  return _internal_mutable_closeshot_view();
}
inline void Result::set_allocated_closeshot_view(::zb::dcts::node::spectrum::View* closeshot_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  if (closeshot_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view)->GetArena();
    if (message_arena != submessage_arena) {
      closeshot_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closeshot_view, submessage_arena);
    }
    
  } else {
    
  }
  closeshot_view_ = closeshot_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.Result.closeshot_view)
}

// .zb.dcts.node.detection.SignalList signal_list = 4;
inline bool Result::_internal_has_signal_list() const {
  return this != internal_default_instance() && signal_list_ != nullptr;
}
inline bool Result::has_signal_list() const {
  return _internal_has_signal_list();
}
inline const ::zb::dcts::node::detection::SignalList& Result::_internal_signal_list() const {
  const ::zb::dcts::node::detection::SignalList* p = signal_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::detection::SignalList&>(
      ::zb::dcts::node::detection::_SignalList_default_instance_);
}
inline const ::zb::dcts::node::detection::SignalList& Result::signal_list() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.Result.signal_list)
  return _internal_signal_list();
}
inline void Result::unsafe_arena_set_allocated_signal_list(
    ::zb::dcts::node::detection::SignalList* signal_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_list_);
  }
  signal_list_ = signal_list;
  if (signal_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.Result.signal_list)
}
inline ::zb::dcts::node::detection::SignalList* Result::release_signal_list() {
  
  ::zb::dcts::node::detection::SignalList* temp = signal_list_;
  signal_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::detection::SignalList* Result::unsafe_arena_release_signal_list() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.Result.signal_list)
  
  ::zb::dcts::node::detection::SignalList* temp = signal_list_;
  signal_list_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::detection::SignalList* Result::_internal_mutable_signal_list() {
  
  if (signal_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::detection::SignalList>(GetArena());
    signal_list_ = p;
  }
  return signal_list_;
}
inline ::zb::dcts::node::detection::SignalList* Result::mutable_signal_list() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.Result.signal_list)
  return _internal_mutable_signal_list();
}
inline void Result::set_allocated_signal_list(::zb::dcts::node::detection::SignalList* signal_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_list_);
  }
  if (signal_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_list)->GetArena();
    if (message_arena != submessage_arena) {
      signal_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_list, submessage_arena);
    }
    
  } else {
    
  }
  signal_list_ = signal_list;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.Result.signal_list)
}

// float peak_amplitude = 5;
inline void Result::clear_peak_amplitude() {
  peak_amplitude_ = 0;
}
inline float Result::_internal_peak_amplitude() const {
  return peak_amplitude_;
}
inline float Result::peak_amplitude() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.Result.peak_amplitude)
  return _internal_peak_amplitude();
}
inline void Result::_internal_set_peak_amplitude(float value) {
  
  peak_amplitude_ = value;
}
inline void Result::set_peak_amplitude(float value) {
  _internal_set_peak_amplitude(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhpscan.Result.peak_amplitude)
}

// -------------------------------------------------------------------

// QueryRecordRequest

// .zb.dcts.node.TaskAccount task_account = 1;
inline bool QueryRecordRequest::_internal_has_task_account() const {
  return this != internal_default_instance() && task_account_ != nullptr;
}
inline bool QueryRecordRequest::has_task_account() const {
  return _internal_has_task_account();
}
inline const ::zb::dcts::node::TaskAccount& QueryRecordRequest::_internal_task_account() const {
  const ::zb::dcts::node::TaskAccount* p = task_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::TaskAccount&>(
      ::zb::dcts::node::_TaskAccount_default_instance_);
}
inline const ::zb::dcts::node::TaskAccount& QueryRecordRequest::task_account() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.task_account)
  return _internal_task_account();
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_task_account(
    ::zb::dcts::node::TaskAccount* task_account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  task_account_ = task_account;
  if (task_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.task_account)
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::release_task_account() {
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::unsafe_arena_release_task_account() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.task_account)
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::_internal_mutable_task_account() {
  
  if (task_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::TaskAccount>(GetArena());
    task_account_ = p;
  }
  return task_account_;
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::mutable_task_account() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.task_account)
  return _internal_mutable_task_account();
}
inline void QueryRecordRequest::set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  if (task_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account)->GetArena();
    if (message_arena != submessage_arena) {
      task_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_account, submessage_arena);
    }
    
  } else {
    
  }
  task_account_ = task_account;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.task_account)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool QueryRecordRequest::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool QueryRecordRequest::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& QueryRecordRequest::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& QueryRecordRequest::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.time_span)
  return _internal_time_span();
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.time_span)
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.time_span)
  return _internal_mutable_time_span();
}
inline void QueryRecordRequest::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.time_span)
}

// .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
inline bool QueryRecordRequest::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool QueryRecordRequest::has_freq_span() const {
  return _internal_has_freq_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& QueryRecordRequest::_internal_freq_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& QueryRecordRequest::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.freq_span)
  return _internal_freq_span();
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.freq_span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::release_freq_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.freq_span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.freq_span)
  return _internal_mutable_freq_span();
}
inline void QueryRecordRequest::set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span)->GetArena();
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhpscan.QueryRecordRequest.freq_span)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zhpscan
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::node::zczh::zhpscan::IFBandWidth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::zczh::zhpscan::IFBandWidth>() {
  return ::zb::dcts::node::zczh::zhpscan::IFBandWidth_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhPScan_2eproto
