// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/zczh/ZhDirection.proto

#include "node/zczh/ZhDirection.pb.h"
#include "node/zczh/ZhDirection.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhdirection {

static const char* ZhDirectionService_method_names[] = {
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/StartDirection",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/StopDirection",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/GetDirectionResult",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/RecordStart",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/RecordStop",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/DataHoldOpen",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/DataHoldReset",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/DataHoldClose",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/StartPos",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/GetPosResult",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/StopPos",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/DirectRecordQuery",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/ReplayStart",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/ReplayStop",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/ReplayAdjust",
  "/zb.dcts.node.zczh.zhdirection.ZhDirectionService/GetReplayDirectionResult",
};

std::unique_ptr< ZhDirectionService::Stub> ZhDirectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ZhDirectionService::Stub> stub(new ZhDirectionService::Stub(channel));
  return stub;
}

ZhDirectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartDirection_(ZhDirectionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopDirection_(ZhDirectionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDirectionResult_(ZhDirectionService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RecordStart_(ZhDirectionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecordStop_(ZhDirectionService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataHoldOpen_(ZhDirectionService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataHoldReset_(ZhDirectionService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataHoldClose_(ZhDirectionService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartPos_(ZhDirectionService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPosResult_(ZhDirectionService_method_names[9], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StopPos_(ZhDirectionService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DirectRecordQuery_(ZhDirectionService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayStart_(ZhDirectionService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayStop_(ZhDirectionService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplayAdjust_(ZhDirectionService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReplayDirectionResult_(ZhDirectionService_method_names[15], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ZhDirectionService::Stub::StartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::zb::dcts::node::TaskAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhdirection::DirectionRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartDirection_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::StartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhdirection::DirectionRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartDirection_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::StartDirection(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartDirection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhDirectionService::Stub::PrepareAsyncStartDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::zczh::zhdirection::DirectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartDirection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhDirectionService::Stub::AsyncStartDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartDirectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::StopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopDirection_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::StopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopDirection_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::StopDirection(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopDirection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::PrepareAsyncStopDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopDirection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::AsyncStopDirectionRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopDirectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::Result>* ZhDirectionService::Stub::GetDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhdirection::Result>::Create(channel_.get(), rpcmethod_GetDirectionResult_, context, request);
}

void ZhDirectionService::Stub::experimental_async::GetDirectionResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhdirection::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhdirection::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_GetDirectionResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>* ZhDirectionService::Stub::AsyncGetDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhdirection::Result>::Create(channel_.get(), cq, rpcmethod_GetDirectionResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>* ZhDirectionService::Stub::PrepareAsyncGetDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhdirection::Result>::Create(channel_.get(), cq, rpcmethod_GetDirectionResult_, context, request, false, nullptr);
}

::grpc::Status ZhDirectionService::Stub::RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhdirection::RecordRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecordStart_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhdirection::RecordRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordStart_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::RecordStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::PrepareAsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::zczh::zhdirection::RecordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecordStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::AsyncRecordStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecordStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecordStop_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordStop_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::RecordStop(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::PrepareAsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecordStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::AsyncRecordStopRaw(::grpc::ClientContext* context, const ::zb::dcts::node::TaskAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecordStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataHoldOpen_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldOpen_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::DataHoldOpen(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::PrepareAsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::DataHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataHoldOpen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::AsyncDataHoldOpenRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataHoldOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataHoldReset_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldReset_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::DataHoldReset(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::PrepareAsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::DataHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataHoldReset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::AsyncDataHoldResetRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataHoldResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::zb::dcts::node::NodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataHoldClose_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldClose_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::DataHoldClose(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataHoldClose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::PrepareAsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeReply, ::zb::dcts::node::spectrum::DataHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataHoldClose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* ZhDirectionService::Stub::AsyncDataHoldCloseRaw(::grpc::ClientContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataHoldCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::StartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhdirection::PosRequest, ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartPos_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::StartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhdirection::PosRequest, ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartPos_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::StartPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::PosTaskId>* ZhDirectionService::Stub::PrepareAsyncStartPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::zb::dcts::node::zczh::zhdirection::PosRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartPos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::PosTaskId>* ZhDirectionService::Stub::AsyncStartPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartPosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::PosResult>* ZhDirectionService::Stub::GetPosResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhdirection::PosResult>::Create(channel_.get(), rpcmethod_GetPosResult_, context, request);
}

void ZhDirectionService::Stub::experimental_async::GetPosResult(::grpc::ClientContext* context, ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhdirection::PosResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhdirection::PosResult>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPosResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::PosResult>* ZhDirectionService::Stub::AsyncGetPosResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhdirection::PosResult>::Create(channel_.get(), cq, rpcmethod_GetPosResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::PosResult>* ZhDirectionService::Stub::PrepareAsyncGetPosResultRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhdirection::PosResult>::Create(channel_.get(), cq, rpcmethod_GetPosResult_, context, request, false, nullptr);
}

::grpc::Status ZhDirectionService::Stub::StopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopPos_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::StopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPos_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::StopPos(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhDirectionService::Stub::PrepareAsyncStopPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopPos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhDirectionService::Stub::AsyncStopPosRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopPosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::DirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhdirection::RecordReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DirectRecordQuery_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::DirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhdirection::RecordReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DirectRecordQuery_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::DirectRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DirectRecordQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::RecordReply>* ZhDirectionService::Stub::PrepareAsyncDirectRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::zczh::zhdirection::RecordReply, ::zb::dcts::TimeSpan, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DirectRecordQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhdirection::RecordReply>* ZhDirectionService::Stub::AsyncDirectRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDirectRecordQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::zb::dcts::node::TaskAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayStart_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStart_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhDirectionService::Stub::PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::TaskAccount, ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* ZhDirectionService::Stub::AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayStop_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStop_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhDirectionService::Stub::PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhDirectionService::Stub::AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZhDirectionService::Stub::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplayAdjust_, context, request, response);
}

void ZhDirectionService::Stub::experimental_async::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayAdjust_, context, request, response, std::move(f));
}

void ZhDirectionService::Stub::experimental_async::ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplayAdjust_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhDirectionService::Stub::PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::zb::dcts::node::replay::AdjustRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplayAdjust_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ZhDirectionService::Stub::AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplayAdjustRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zb::dcts::node::zczh::zhdirection::Result>* ZhDirectionService::Stub::GetReplayDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
  return ::grpc::internal::ClientReaderFactory< ::zb::dcts::node::zczh::zhdirection::Result>::Create(channel_.get(), rpcmethod_GetReplayDirectionResult_, context, request);
}

void ZhDirectionService::Stub::experimental_async::GetReplayDirectionResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhdirection::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zb::dcts::node::zczh::zhdirection::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_GetReplayDirectionResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>* ZhDirectionService::Stub::AsyncGetReplayDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhdirection::Result>::Create(channel_.get(), cq, rpcmethod_GetReplayDirectionResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhdirection::Result>* ZhDirectionService::Stub::PrepareAsyncGetReplayDirectionResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zb::dcts::node::zczh::zhdirection::Result>::Create(channel_.get(), cq, rpcmethod_GetReplayDirectionResult_, context, request, false, nullptr);
}

ZhDirectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::zczh::zhdirection::DirectionRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* req,
             ::zb::dcts::node::TaskAccount* resp) {
               return service->StartDirection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->StopDirection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhDirectionService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhdirection::Result>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhdirection::Result>* writer) {
               return service->GetDirectionResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::zczh::zhdirection::RecordRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhdirection::RecordRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->RecordStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::TaskAccount, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::TaskAccount* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->RecordStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::DataHoldRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DataHoldOpen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::DataHoldRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DataHoldReset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::spectrum::DataHoldRequest, ::zb::dcts::node::NodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::spectrum::DataHoldRequest* req,
             ::zb::dcts::node::NodeReply* resp) {
               return service->DataHoldClose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::zczh::zhdirection::PosRequest, ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhdirection::PosRequest* req,
             ::zb::dcts::node::zczh::zhdirection::PosTaskId* resp) {
               return service->StartPos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhDirectionService::Service, ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::zb::dcts::node::zczh::zhdirection::PosResult>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhdirection::PosTaskId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhdirection::PosResult>* writer) {
               return service->GetPosResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::zczh::zhdirection::PosTaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhdirection::PosTaskId* req,
             ::google::protobuf::Empty* resp) {
               return service->StopPos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhdirection::RecordReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TimeSpan* req,
             ::zb::dcts::node::zczh::zhdirection::RecordReply* resp) {
               return service->DirectRecordQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest, ::zb::dcts::node::TaskAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* req,
             ::zb::dcts::node::TaskAccount* resp) {
               return service->ReplayStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::TaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::google::protobuf::Empty* resp) {
               return service->ReplayStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZhDirectionService::Service, ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::replay::AdjustRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ReplayAdjust(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZhDirectionService_method_names[15],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ZhDirectionService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhdirection::Result>(
          [](ZhDirectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::grpc::ServerWriter<::zb::dcts::node::zczh::zhdirection::Result>* writer) {
               return service->GetReplayDirectionResult(ctx, req, writer);
             }, this)));
}

ZhDirectionService::Service::~Service() {
}

::grpc::Status ZhDirectionService::Service::StartDirection(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::DirectionRequest* request, ::zb::dcts::node::TaskAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::StopDirection(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::GetDirectionResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::RecordStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::RecordRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::RecordStop(::grpc::ServerContext* context, const ::zb::dcts::node::TaskAccount* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::DataHoldOpen(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::DataHoldReset(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::DataHoldClose(::grpc::ServerContext* context, const ::zb::dcts::node::spectrum::DataHoldRequest* request, ::zb::dcts::node::NodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::StartPos(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::PosRequest* request, ::zb::dcts::node::zczh::zhdirection::PosTaskId* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::GetPosResult(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::PosResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::StopPos(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::PosTaskId* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::DirectRecordQuery(::grpc::ServerContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhdirection::RecordReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::ReplayStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhdirection::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::ReplayStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::ReplayAdjust(::grpc::ServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZhDirectionService::Service::GetReplayDirectionResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhdirection::Result>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace node
}  // namespace zczh
}  // namespace zhdirection

