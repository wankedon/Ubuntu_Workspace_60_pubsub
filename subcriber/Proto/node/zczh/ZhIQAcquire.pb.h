// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/zczh/ZhIQAcquire.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhIQAcquire_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhIQAcquire_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/node.pb.h"
#include "node/spectrum.pb.h"
#include "node/replay.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fzczh_2fZhIQAcquire_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fzczh_2fZhIQAcquire_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIQAcquire {
class QueryRecordReply;
struct QueryRecordReplyDefaultTypeInternal;
extern QueryRecordReplyDefaultTypeInternal _QueryRecordReply_default_instance_;
class QueryRecordRequest;
struct QueryRecordRequestDefaultTypeInternal;
extern QueryRecordRequestDefaultTypeInternal _QueryRecordRequest_default_instance_;
class RecordDescriptor;
struct RecordDescriptorDefaultTypeInternal;
extern RecordDescriptorDefaultTypeInternal _RecordDescriptor_default_instance_;
class ReplayStartRequest;
struct ReplayStartRequestDefaultTypeInternal;
extern ReplayStartRequestDefaultTypeInternal _ReplayStartRequest_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class ResultHeader;
struct ResultHeaderDefaultTypeInternal;
extern ResultHeaderDefaultTypeInternal _ResultHeader_default_instance_;
class ResutlBody;
struct ResutlBodyDefaultTypeInternal;
extern ResutlBodyDefaultTypeInternal _ResutlBody_default_instance_;
class StartIQRequest;
struct StartIQRequestDefaultTypeInternal;
extern StartIQRequestDefaultTypeInternal _StartIQRequest_default_instance_;
class TaskParam;
struct TaskParamDefaultTypeInternal;
extern TaskParamDefaultTypeInternal _TaskParam_default_instance_;
}  // namespace zhIQAcquire
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::QueryRecordReply>(Arena*);
template<> ::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::QueryRecordRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor>(Arena*);
template<> ::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::ReplayStartRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhIQAcquire::Result* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::Result>(Arena*);
template<> ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::ResultHeader>(Arena*);
template<> ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::ResutlBody>(Arena*);
template<> ::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::StartIQRequest>(Arena*);
template<> ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* Arena::CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::TaskParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhIQAcquire {

enum IFBandWidth : int {
  BAND_1K = 0,
  BAND_2K = 1,
  BAND_5K = 2,
  BAND_10K = 3,
  BAND_20K = 4,
  BAND_50K = 5,
  BAND_100K = 6,
  BAND_200K = 7,
  BAND_500K = 8,
  BAND_1M = 9,
  BAND_2M = 10,
  BAND_5M = 11,
  BAND_10M = 12,
  BAND_20M = 13,
  BAND_40M = 14,
  BAND_80M = 15,
  IFBandWidth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IFBandWidth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IFBandWidth_IsValid(int value);
constexpr IFBandWidth IFBandWidth_MIN = BAND_1K;
constexpr IFBandWidth IFBandWidth_MAX = BAND_80M;
constexpr int IFBandWidth_ARRAYSIZE = IFBandWidth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IFBandWidth_descriptor();
template<typename T>
inline const std::string& IFBandWidth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IFBandWidth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IFBandWidth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IFBandWidth_descriptor(), enum_t_value);
}
inline bool IFBandWidth_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IFBandWidth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IFBandWidth>(
    IFBandWidth_descriptor(), name, value);
}
// ===================================================================

class TaskParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIQAcquire.TaskParam) */ {
 public:
  inline TaskParam() : TaskParam(nullptr) {}
  virtual ~TaskParam();
  explicit constexpr TaskParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParam(const TaskParam& from);
  TaskParam(TaskParam&& from) noexcept
    : TaskParam() {
    *this = ::std::move(from);
  }

  inline TaskParam& operator=(const TaskParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParam& operator=(TaskParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParam* internal_default_instance() {
    return reinterpret_cast<const TaskParam*>(
               &_TaskParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskParam& a, TaskParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskParam* New() const final {
    return CreateMaybeMessage<TaskParam>(nullptr);
  }

  TaskParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskParam& from);
  void MergeFrom(const TaskParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIQAcquire.TaskParam";
  }
  protected:
  explicit TaskParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpanFieldNumber = 1,
    kIFBandwidthFieldNumber = 2,
    kIntervalFieldNumber = 3,
    kAttenuationGainFieldNumber = 4,
    kAntennaFieldNumber = 5,
    kReceiveModeFieldNumber = 6,
    kPointsFieldNumber = 7,
    kHeaderOnlyFieldNumber = 8,
    kIsRecordFieldNumber = 9,
  };
  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  bool has_span() const;
  private:
  bool _internal_has_span() const;
  public:
  void clear_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_span();
  void set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_span();
  public:
  void unsafe_arena_set_allocated_span(
      ::zb::dcts::node::spectrum::FrequencySpan* span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_span();

  // .zb.dcts.node.zczh.zhIQAcquire.IFBandWidth IF_bandwidth = 2;
  void clear_if_bandwidth();
  ::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth if_bandwidth() const;
  void set_if_bandwidth(::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth value);
  private:
  ::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth _internal_if_bandwidth() const;
  void _internal_set_if_bandwidth(::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth value);
  public:

  // int32 interval = 3;
  void clear_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 interval() const;
  void set_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_interval() const;
  void _internal_set_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attenuation_gain = 4;
  void clear_attenuation_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain() const;
  void set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 5;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_mode = 6;
  void clear_receive_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode() const;
  void set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_mode() const;
  void _internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 points = 7;
  void clear_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 points() const;
  void set_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points() const;
  void _internal_set_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool header_only = 8;
  void clear_header_only();
  bool header_only() const;
  void set_header_only(bool value);
  private:
  bool _internal_header_only() const;
  void _internal_set_header_only(bool value);
  public:

  // bool is_record = 9;
  void clear_is_record();
  bool is_record() const;
  void set_is_record(bool value);
  private:
  bool _internal_is_record() const;
  void _internal_set_is_record(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIQAcquire.TaskParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::spectrum::FrequencySpan* span_;
  int if_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::int32 interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_;
  bool header_only_;
  bool is_record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIQAcquire_2eproto;
};
// -------------------------------------------------------------------

class StartIQRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest) */ {
 public:
  inline StartIQRequest() : StartIQRequest(nullptr) {}
  virtual ~StartIQRequest();
  explicit constexpr StartIQRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartIQRequest(const StartIQRequest& from);
  StartIQRequest(StartIQRequest&& from) noexcept
    : StartIQRequest() {
    *this = ::std::move(from);
  }

  inline StartIQRequest& operator=(const StartIQRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartIQRequest& operator=(StartIQRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartIQRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartIQRequest* internal_default_instance() {
    return reinterpret_cast<const StartIQRequest*>(
               &_StartIQRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartIQRequest& a, StartIQRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartIQRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartIQRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartIQRequest* New() const final {
    return CreateMaybeMessage<StartIQRequest>(nullptr);
  }

  StartIQRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartIQRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartIQRequest& from);
  void MergeFrom(const StartIQRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartIQRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIQAcquire.StartIQRequest";
  }
  protected:
  explicit StartIQRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunnerFieldNumber = 1,
    kTaskParamFieldNumber = 2,
  };
  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  int task_runner_size() const;
  private:
  int _internal_task_runner_size() const;
  public:
  void clear_task_runner();
  ::zb::dcts::node::NodeDevice* mutable_task_runner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
      mutable_task_runner();
  private:
  const ::zb::dcts::node::NodeDevice& _internal_task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* _internal_add_task_runner();
  public:
  const ::zb::dcts::node::NodeDevice& task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* add_task_runner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
      task_runner() const;

  // .zb.dcts.node.zczh.zhIQAcquire.TaskParam task_param = 2;
  bool has_task_param() const;
  private:
  bool _internal_has_task_param() const;
  public:
  void clear_task_param();
  const ::zb::dcts::node::zczh::zhIQAcquire::TaskParam& task_param() const;
  ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* release_task_param();
  ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* mutable_task_param();
  void set_allocated_task_param(::zb::dcts::node::zczh::zhIQAcquire::TaskParam* task_param);
  private:
  const ::zb::dcts::node::zczh::zhIQAcquire::TaskParam& _internal_task_param() const;
  ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* _internal_mutable_task_param();
  public:
  void unsafe_arena_set_allocated_task_param(
      ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* task_param);
  ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* unsafe_arena_release_task_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice > task_runner_;
  ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* task_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIQAcquire_2eproto;
};
// -------------------------------------------------------------------

class ResultHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIQAcquire.ResultHeader) */ {
 public:
  inline ResultHeader() : ResultHeader(nullptr) {}
  virtual ~ResultHeader();
  explicit constexpr ResultHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultHeader(const ResultHeader& from);
  ResultHeader(ResultHeader&& from) noexcept
    : ResultHeader() {
    *this = ::std::move(from);
  }

  inline ResultHeader& operator=(const ResultHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultHeader& operator=(ResultHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultHeader* internal_default_instance() {
    return reinterpret_cast<const ResultHeader*>(
               &_ResultHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResultHeader& a, ResultHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultHeader* New() const final {
    return CreateMaybeMessage<ResultHeader>(nullptr);
  }

  ResultHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultHeader& from);
  void MergeFrom(const ResultHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIQAcquire.ResultHeader";
  }
  protected:
  explicit ResultHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 2,
    kResultFromFieldNumber = 1,
    kTimeStampFieldNumber = 12,
    kPositionFieldNumber = 15,
    kSequenceNumberFieldNumber = 3,
    kSweepIndexFieldNumber = 4,
    kSegmentIndexFieldNumber = 5,
    kDataTypeFieldNumber = 6,
    kTruncateBitsFieldNumber = 7,
    kIsLastOneFieldNumber = 8,
    kCenterFrequencyFieldNumber = 9,
    kSampleRateFieldNumber = 10,
    kScaleToVoltsFieldNumber = 11,
  };
  // string record_id = 2;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.node.NodeDevice result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::node::NodeDevice& result_from() const;
  ::zb::dcts::node::NodeDevice* release_result_from();
  ::zb::dcts::node::NodeDevice* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::node::NodeDevice* result_from);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_result_from() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::node::NodeDevice* result_from);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_result_from();

  // .zb.dcts.Timestamp time_stamp = 12;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const ::zb::dcts::Timestamp& time_stamp() const;
  ::zb::dcts::Timestamp* release_time_stamp();
  ::zb::dcts::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp);
  private:
  const ::zb::dcts::Timestamp& _internal_time_stamp() const;
  ::zb::dcts::Timestamp* _internal_mutable_time_stamp();
  public:
  void unsafe_arena_set_allocated_time_stamp(
      ::zb::dcts::Timestamp* time_stamp);
  ::zb::dcts::Timestamp* unsafe_arena_release_time_stamp();

  // .zb.dcts.Position position = 15;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::zb::dcts::Position& position() const;
  ::zb::dcts::Position* release_position();
  ::zb::dcts::Position* mutable_position();
  void set_allocated_position(::zb::dcts::Position* position);
  private:
  const ::zb::dcts::Position& _internal_position() const;
  ::zb::dcts::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::zb::dcts::Position* position);
  ::zb::dcts::Position* unsafe_arena_release_position();

  // uint64 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sweep_index = 4;
  void clear_sweep_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 sweep_index() const;
  void set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sweep_index() const;
  void _internal_set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 segment_index = 5;
  void clear_segment_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_index() const;
  void set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_segment_index() const;
  void _internal_set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 data_type = 6;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 truncate_bits = 7;
  void clear_truncate_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 truncate_bits() const;
  void set_truncate_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_truncate_bits() const;
  void _internal_set_truncate_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_last_one = 8;
  void clear_is_last_one();
  bool is_last_one() const;
  void set_is_last_one(bool value);
  private:
  bool _internal_is_last_one() const;
  void _internal_set_is_last_one(bool value);
  public:

  // double center_frequency = 9;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // double sample_rate = 10;
  void clear_sample_rate();
  double sample_rate() const;
  void set_sample_rate(double value);
  private:
  double _internal_sample_rate() const;
  void _internal_set_sample_rate(double value);
  public:

  // double scale_to_volts = 11;
  void clear_scale_to_volts();
  double scale_to_volts() const;
  void set_scale_to_volts(double value);
  private:
  double _internal_scale_to_volts() const;
  void _internal_set_scale_to_volts(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIQAcquire.ResultHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::node::NodeDevice* result_from_;
  ::zb::dcts::Timestamp* time_stamp_;
  ::zb::dcts::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sweep_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 truncate_bits_;
  bool is_last_one_;
  double center_frequency_;
  double sample_rate_;
  double scale_to_volts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIQAcquire_2eproto;
};
// -------------------------------------------------------------------

class ResutlBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIQAcquire.ResutlBody) */ {
 public:
  inline ResutlBody() : ResutlBody(nullptr) {}
  virtual ~ResutlBody();
  explicit constexpr ResutlBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResutlBody(const ResutlBody& from);
  ResutlBody(ResutlBody&& from) noexcept
    : ResutlBody() {
    *this = ::std::move(from);
  }

  inline ResutlBody& operator=(const ResutlBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResutlBody& operator=(ResutlBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResutlBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResutlBody* internal_default_instance() {
    return reinterpret_cast<const ResutlBody*>(
               &_ResutlBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResutlBody& a, ResutlBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ResutlBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResutlBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResutlBody* New() const final {
    return CreateMaybeMessage<ResutlBody>(nullptr);
  }

  ResutlBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResutlBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResutlBody& from);
  void MergeFrom(const ResutlBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResutlBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIQAcquire.ResutlBody";
  }
  protected:
  explicit ResutlBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIqDataFieldNumber = 1,
  };
  // repeated float iq_data = 1;
  int iq_data_size() const;
  private:
  int _internal_iq_data_size() const;
  public:
  void clear_iq_data();
  private:
  float _internal_iq_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_iq_data() const;
  void _internal_add_iq_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_iq_data();
  public:
  float iq_data(int index) const;
  void set_iq_data(int index, float value);
  void add_iq_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      iq_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_iq_data();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIQAcquire.ResutlBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > iq_data_;
  mutable std::atomic<int> _iq_data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIQAcquire_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIQAcquire.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIQAcquire.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .zb.dcts.node.zczh.zhIQAcquire.ResultHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader& header() const;
  ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* release_header();
  ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* mutable_header();
  void set_allocated_header(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* header);
  private:
  const ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader& _internal_header() const;
  ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* header);
  ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* unsafe_arena_release_header();

  // .zb.dcts.node.zczh.zhIQAcquire.ResutlBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody& body() const;
  ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* release_body();
  ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* mutable_body();
  void set_allocated_body(::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* body);
  private:
  const ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody& _internal_body() const;
  ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* body);
  ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIQAcquire.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* header_;
  ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIQAcquire_2eproto;
};
// -------------------------------------------------------------------

class RecordDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor) */ {
 public:
  inline RecordDescriptor() : RecordDescriptor(nullptr) {}
  virtual ~RecordDescriptor();
  explicit constexpr RecordDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordDescriptor(const RecordDescriptor& from);
  RecordDescriptor(RecordDescriptor&& from) noexcept
    : RecordDescriptor() {
    *this = ::std::move(from);
  }

  inline RecordDescriptor& operator=(const RecordDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordDescriptor& operator=(RecordDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordDescriptor* internal_default_instance() {
    return reinterpret_cast<const RecordDescriptor*>(
               &_RecordDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RecordDescriptor& a, RecordDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordDescriptor* New() const final {
    return CreateMaybeMessage<RecordDescriptor>(nullptr);
  }

  RecordDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordDescriptor& from);
  void MergeFrom(const RecordDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor";
  }
  protected:
  explicit RecordDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandsFieldNumber = 5,
    kRecordIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kTimeSpanFieldNumber = 3,
    kRecordCountFieldNumber = 4,
  };
  // repeated .zb.dcts.node.spectrum.BaseBand bands = 5;
  int bands_size() const;
  private:
  int _internal_bands_size() const;
  public:
  void clear_bands();
  ::zb::dcts::node::spectrum::BaseBand* mutable_bands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::BaseBand >*
      mutable_bands();
  private:
  const ::zb::dcts::node::spectrum::BaseBand& _internal_bands(int index) const;
  ::zb::dcts::node::spectrum::BaseBand* _internal_add_bands();
  public:
  const ::zb::dcts::node::spectrum::BaseBand& bands(int index) const;
  ::zb::dcts::node::spectrum::BaseBand* add_bands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::BaseBand >&
      bands() const;

  // string record_id = 1;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.node.NodeDevice from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::zb::dcts::node::NodeDevice& from() const;
  ::zb::dcts::node::NodeDevice* release_from();
  ::zb::dcts::node::NodeDevice* mutable_from();
  void set_allocated_from(::zb::dcts::node::NodeDevice* from);
  private:
  const ::zb::dcts::node::NodeDevice& _internal_from() const;
  ::zb::dcts::node::NodeDevice* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::zb::dcts::node::NodeDevice* from);
  ::zb::dcts::node::NodeDevice* unsafe_arena_release_from();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // uint32 record_count = 4;
  void clear_record_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count() const;
  void set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_count() const;
  void _internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::BaseBand > bands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::node::NodeDevice* from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIQAcquire_2eproto;
};
// -------------------------------------------------------------------

class QueryRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest) */ {
 public:
  inline QueryRecordRequest() : QueryRecordRequest(nullptr) {}
  virtual ~QueryRecordRequest();
  explicit constexpr QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRecordRequest(const QueryRecordRequest& from);
  QueryRecordRequest(QueryRecordRequest&& from) noexcept
    : QueryRecordRequest() {
    *this = ::std::move(from);
  }

  inline QueryRecordRequest& operator=(const QueryRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRecordRequest& operator=(QueryRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRecordRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRecordRequest*>(
               &_QueryRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryRecordRequest& a, QueryRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordRequest* New() const final {
    return CreateMaybeMessage<QueryRecordRequest>(nullptr);
  }

  QueryRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRecordRequest& from);
  void MergeFrom(const QueryRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest";
  }
  protected:
  explicit QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskAccountFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kFreqSpanFieldNumber = 5,
    kSegmentCountFieldNumber = 2,
  };
  // .zb.dcts.node.TaskAccount task_account = 1;
  bool has_task_account() const;
  private:
  bool _internal_has_task_account() const;
  public:
  void clear_task_account();
  const ::zb::dcts::node::TaskAccount& task_account() const;
  ::zb::dcts::node::TaskAccount* release_task_account();
  ::zb::dcts::node::TaskAccount* mutable_task_account();
  void set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account);
  private:
  const ::zb::dcts::node::TaskAccount& _internal_task_account() const;
  ::zb::dcts::node::TaskAccount* _internal_mutable_task_account();
  public:
  void unsafe_arena_set_allocated_task_account(
      ::zb::dcts::node::TaskAccount* task_account);
  ::zb::dcts::node::TaskAccount* unsafe_arena_release_task_account();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::node::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // int32 segment_count = 2;
  void clear_segment_count();
  ::PROTOBUF_NAMESPACE_ID::int32 segment_count() const;
  void set_segment_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_segment_count() const;
  void _internal_set_segment_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::TaskAccount* task_account_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::node::spectrum::FrequencySpan* freq_span_;
  ::PROTOBUF_NAMESPACE_ID::int32 segment_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIQAcquire_2eproto;
};
// -------------------------------------------------------------------

class QueryRecordReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply) */ {
 public:
  inline QueryRecordReply() : QueryRecordReply(nullptr) {}
  virtual ~QueryRecordReply();
  explicit constexpr QueryRecordReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRecordReply(const QueryRecordReply& from);
  QueryRecordReply(QueryRecordReply&& from) noexcept
    : QueryRecordReply() {
    *this = ::std::move(from);
  }

  inline QueryRecordReply& operator=(const QueryRecordReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRecordReply& operator=(QueryRecordReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRecordReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRecordReply* internal_default_instance() {
    return reinterpret_cast<const QueryRecordReply*>(
               &_QueryRecordReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryRecordReply& a, QueryRecordReply& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRecordReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRecordReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordReply* New() const final {
    return CreateMaybeMessage<QueryRecordReply>(nullptr);
  }

  QueryRecordReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRecordReply& from);
  void MergeFrom(const QueryRecordReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply";
  }
  protected:
  explicit QueryRecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchingRecordsFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // repeated .zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor matching_records = 2;
  int matching_records_size() const;
  private:
  int _internal_matching_records_size() const;
  public:
  void clear_matching_records();
  ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor* mutable_matching_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor >*
      mutable_matching_records();
  private:
  const ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor& _internal_matching_records(int index) const;
  ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor* _internal_add_matching_records();
  public:
  const ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor& matching_records(int index) const;
  ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor* add_matching_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor >&
      matching_records() const;

  // .zb.dcts.node.NodeId node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  const ::zb::dcts::node::NodeId& node_id() const;
  ::zb::dcts::node::NodeId* release_node_id();
  ::zb::dcts::node::NodeId* mutable_node_id();
  void set_allocated_node_id(::zb::dcts::node::NodeId* node_id);
  private:
  const ::zb::dcts::node::NodeId& _internal_node_id() const;
  ::zb::dcts::node::NodeId* _internal_mutable_node_id();
  public:
  void unsafe_arena_set_allocated_node_id(
      ::zb::dcts::node::NodeId* node_id);
  ::zb::dcts::node::NodeId* unsafe_arena_release_node_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor > matching_records_;
  ::zb::dcts::node::NodeId* node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIQAcquire_2eproto;
};
// -------------------------------------------------------------------

class ReplayStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest) */ {
 public:
  inline ReplayStartRequest() : ReplayStartRequest(nullptr) {}
  virtual ~ReplayStartRequest();
  explicit constexpr ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplayStartRequest(const ReplayStartRequest& from);
  ReplayStartRequest(ReplayStartRequest&& from) noexcept
    : ReplayStartRequest() {
    *this = ::std::move(from);
  }

  inline ReplayStartRequest& operator=(const ReplayStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayStartRequest& operator=(ReplayStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplayStartRequest* internal_default_instance() {
    return reinterpret_cast<const ReplayStartRequest*>(
               &_ReplayStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReplayStartRequest& a, ReplayStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayStartRequest* New() const final {
    return CreateMaybeMessage<ReplayStartRequest>(nullptr);
  }

  ReplayStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayStartRequest& from);
  void MergeFrom(const ReplayStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest";
  }
  protected:
  explicit ReplayStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fzczh_2fZhIQAcquire_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplayIdFieldNumber = 1,
    kResultIntervalFieldNumber = 3,
  };
  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::zb::dcts::node::replay::ReplayId& replay_id() const;
  ::zb::dcts::node::replay::ReplayId* release_replay_id();
  ::zb::dcts::node::replay::ReplayId* mutable_replay_id();
  void set_allocated_replay_id(::zb::dcts::node::replay::ReplayId* replay_id);
  private:
  const ::zb::dcts::node::replay::ReplayId& _internal_replay_id() const;
  ::zb::dcts::node::replay::ReplayId* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::zb::dcts::node::replay::ReplayId* replay_id);
  ::zb::dcts::node::replay::ReplayId* unsafe_arena_release_replay_id();

  // int32 result_interval = 3;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::replay::ReplayId* replay_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fzczh_2fZhIQAcquire_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskParam

// .zb.dcts.node.spectrum.FrequencySpan span = 1;
inline bool TaskParam::_internal_has_span() const {
  return this != internal_default_instance() && span_ != nullptr;
}
inline bool TaskParam::has_span() const {
  return _internal_has_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& TaskParam::_internal_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& TaskParam::span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.TaskParam.span)
  return _internal_span();
}
inline void TaskParam::unsafe_arena_set_allocated_span(
    ::zb::dcts::node::spectrum::FrequencySpan* span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  span_ = span;
  if (span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.TaskParam.span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::release_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::unsafe_arena_release_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.TaskParam.span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::_internal_mutable_span() {
  
  if (span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    span_ = p;
  }
  return span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* TaskParam::mutable_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.TaskParam.span)
  return _internal_mutable_span();
}
inline void TaskParam::set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  if (span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span)->GetArena();
    if (message_arena != submessage_arena) {
      span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.TaskParam.span)
}

// .zb.dcts.node.zczh.zhIQAcquire.IFBandWidth IF_bandwidth = 2;
inline void TaskParam::clear_if_bandwidth() {
  if_bandwidth_ = 0;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth TaskParam::_internal_if_bandwidth() const {
  return static_cast< ::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth >(if_bandwidth_);
}
inline ::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth TaskParam::if_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.TaskParam.IF_bandwidth)
  return _internal_if_bandwidth();
}
inline void TaskParam::_internal_set_if_bandwidth(::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth value) {
  
  if_bandwidth_ = value;
}
inline void TaskParam::set_if_bandwidth(::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth value) {
  _internal_set_if_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.TaskParam.IF_bandwidth)
}

// int32 interval = 3;
inline void TaskParam::clear_interval() {
  interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_interval() const {
  return interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.TaskParam.interval)
  return _internal_interval();
}
inline void TaskParam::_internal_set_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  interval_ = value;
}
inline void TaskParam::set_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.TaskParam.interval)
}

// int32 attenuation_gain = 4;
inline void TaskParam::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.TaskParam.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void TaskParam::_internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_gain_ = value;
}
inline void TaskParam::set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.TaskParam.attenuation_gain)
}

// int32 antenna = 5;
inline void TaskParam::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.TaskParam.antenna)
  return _internal_antenna();
}
inline void TaskParam::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void TaskParam::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.TaskParam.antenna)
}

// int32 receive_mode = 6;
inline void TaskParam::clear_receive_mode() {
  receive_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::_internal_receive_mode() const {
  return receive_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskParam::receive_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.TaskParam.receive_mode)
  return _internal_receive_mode();
}
inline void TaskParam::_internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_mode_ = value;
}
inline void TaskParam::set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.TaskParam.receive_mode)
}

// uint32 points = 7;
inline void TaskParam::clear_points() {
  points_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskParam::_internal_points() const {
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskParam::points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.TaskParam.points)
  return _internal_points();
}
inline void TaskParam::_internal_set_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  points_ = value;
}
inline void TaskParam::set_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.TaskParam.points)
}

// bool header_only = 8;
inline void TaskParam::clear_header_only() {
  header_only_ = false;
}
inline bool TaskParam::_internal_header_only() const {
  return header_only_;
}
inline bool TaskParam::header_only() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.TaskParam.header_only)
  return _internal_header_only();
}
inline void TaskParam::_internal_set_header_only(bool value) {
  
  header_only_ = value;
}
inline void TaskParam::set_header_only(bool value) {
  _internal_set_header_only(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.TaskParam.header_only)
}

// bool is_record = 9;
inline void TaskParam::clear_is_record() {
  is_record_ = false;
}
inline bool TaskParam::_internal_is_record() const {
  return is_record_;
}
inline bool TaskParam::is_record() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.TaskParam.is_record)
  return _internal_is_record();
}
inline void TaskParam::_internal_set_is_record(bool value) {
  
  is_record_ = value;
}
inline void TaskParam::set_is_record(bool value) {
  _internal_set_is_record(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.TaskParam.is_record)
}

// -------------------------------------------------------------------

// StartIQRequest

// repeated .zb.dcts.node.NodeDevice task_runner = 1;
inline int StartIQRequest::_internal_task_runner_size() const {
  return task_runner_.size();
}
inline int StartIQRequest::task_runner_size() const {
  return _internal_task_runner_size();
}
inline ::zb::dcts::node::NodeDevice* StartIQRequest::mutable_task_runner(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_runner)
  return task_runner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
StartIQRequest::mutable_task_runner() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_runner)
  return &task_runner_;
}
inline const ::zb::dcts::node::NodeDevice& StartIQRequest::_internal_task_runner(int index) const {
  return task_runner_.Get(index);
}
inline const ::zb::dcts::node::NodeDevice& StartIQRequest::task_runner(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_runner)
  return _internal_task_runner(index);
}
inline ::zb::dcts::node::NodeDevice* StartIQRequest::_internal_add_task_runner() {
  return task_runner_.Add();
}
inline ::zb::dcts::node::NodeDevice* StartIQRequest::add_task_runner() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_runner)
  return _internal_add_task_runner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
StartIQRequest::task_runner() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_runner)
  return task_runner_;
}

// .zb.dcts.node.zczh.zhIQAcquire.TaskParam task_param = 2;
inline bool StartIQRequest::_internal_has_task_param() const {
  return this != internal_default_instance() && task_param_ != nullptr;
}
inline bool StartIQRequest::has_task_param() const {
  return _internal_has_task_param();
}
inline void StartIQRequest::clear_task_param() {
  if (GetArena() == nullptr && task_param_ != nullptr) {
    delete task_param_;
  }
  task_param_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhIQAcquire::TaskParam& StartIQRequest::_internal_task_param() const {
  const ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* p = task_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhIQAcquire::TaskParam&>(
      ::zb::dcts::node::zczh::zhIQAcquire::_TaskParam_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhIQAcquire::TaskParam& StartIQRequest::task_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_param)
  return _internal_task_param();
}
inline void StartIQRequest::unsafe_arena_set_allocated_task_param(
    ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* task_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_param_);
  }
  task_param_ = task_param;
  if (task_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_param)
}
inline ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* StartIQRequest::release_task_param() {
  
  ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* temp = task_param_;
  task_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* StartIQRequest::unsafe_arena_release_task_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_param)
  
  ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* temp = task_param_;
  task_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* StartIQRequest::_internal_mutable_task_param() {
  
  if (task_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::TaskParam>(GetArena());
    task_param_ = p;
  }
  return task_param_;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::TaskParam* StartIQRequest::mutable_task_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_param)
  return _internal_mutable_task_param();
}
inline void StartIQRequest::set_allocated_task_param(::zb::dcts::node::zczh::zhIQAcquire::TaskParam* task_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_param_;
  }
  if (task_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task_param);
    if (message_arena != submessage_arena) {
      task_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_param, submessage_arena);
    }
    
  } else {
    
  }
  task_param_ = task_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.StartIQRequest.task_param)
}

// -------------------------------------------------------------------

// ResultHeader

// .zb.dcts.node.NodeDevice result_from = 1;
inline bool ResultHeader::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool ResultHeader::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::node::NodeDevice& ResultHeader::_internal_result_from() const {
  const ::zb::dcts::node::NodeDevice* p = result_from_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& ResultHeader::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.result_from)
  return _internal_result_from();
}
inline void ResultHeader::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::node::NodeDevice* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.result_from)
}
inline ::zb::dcts::node::NodeDevice* ResultHeader::release_result_from() {
  
  ::zb::dcts::node::NodeDevice* temp = result_from_;
  result_from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* ResultHeader::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.result_from)
  
  ::zb::dcts::node::NodeDevice* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* ResultHeader::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::node::NodeDevice* ResultHeader::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.result_from)
  return _internal_mutable_result_from();
}
inline void ResultHeader::set_allocated_result_from(::zb::dcts::node::NodeDevice* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.result_from)
}

// string record_id = 2;
inline void ResultHeader::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& ResultHeader::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id)
  return _internal_record_id();
}
inline void ResultHeader::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id)
}
inline std::string* ResultHeader::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& ResultHeader::_internal_record_id() const {
  return record_id_.Get();
}
inline void ResultHeader::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResultHeader::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id)
}
inline void ResultHeader::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id)
}
inline void ResultHeader::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id)
}
inline std::string* ResultHeader::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResultHeader::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultHeader::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.record_id)
}

// uint64 sequence_number = 3;
inline void ResultHeader::clear_sequence_number() {
  sequence_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResultHeader::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResultHeader::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.sequence_number)
  return _internal_sequence_number();
}
inline void ResultHeader::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_number_ = value;
}
inline void ResultHeader::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.sequence_number)
}

// uint64 sweep_index = 4;
inline void ResultHeader::clear_sweep_index() {
  sweep_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResultHeader::_internal_sweep_index() const {
  return sweep_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResultHeader::sweep_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.sweep_index)
  return _internal_sweep_index();
}
inline void ResultHeader::_internal_set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sweep_index_ = value;
}
inline void ResultHeader::set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sweep_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.sweep_index)
}

// uint32 segment_index = 5;
inline void ResultHeader::clear_segment_index() {
  segment_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResultHeader::_internal_segment_index() const {
  return segment_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResultHeader::segment_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.segment_index)
  return _internal_segment_index();
}
inline void ResultHeader::_internal_set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  segment_index_ = value;
}
inline void ResultHeader::set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_segment_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.segment_index)
}

// int32 data_type = 6;
inline void ResultHeader::clear_data_type() {
  data_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultHeader::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultHeader::data_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.data_type)
  return _internal_data_type();
}
inline void ResultHeader::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_type_ = value;
}
inline void ResultHeader::set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.data_type)
}

// uint32 truncate_bits = 7;
inline void ResultHeader::clear_truncate_bits() {
  truncate_bits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResultHeader::_internal_truncate_bits() const {
  return truncate_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResultHeader::truncate_bits() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.truncate_bits)
  return _internal_truncate_bits();
}
inline void ResultHeader::_internal_set_truncate_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  truncate_bits_ = value;
}
inline void ResultHeader::set_truncate_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_truncate_bits(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.truncate_bits)
}

// bool is_last_one = 8;
inline void ResultHeader::clear_is_last_one() {
  is_last_one_ = false;
}
inline bool ResultHeader::_internal_is_last_one() const {
  return is_last_one_;
}
inline bool ResultHeader::is_last_one() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.is_last_one)
  return _internal_is_last_one();
}
inline void ResultHeader::_internal_set_is_last_one(bool value) {
  
  is_last_one_ = value;
}
inline void ResultHeader::set_is_last_one(bool value) {
  _internal_set_is_last_one(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.is_last_one)
}

// double center_frequency = 9;
inline void ResultHeader::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double ResultHeader::_internal_center_frequency() const {
  return center_frequency_;
}
inline double ResultHeader::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.center_frequency)
  return _internal_center_frequency();
}
inline void ResultHeader::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void ResultHeader::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.center_frequency)
}

// double sample_rate = 10;
inline void ResultHeader::clear_sample_rate() {
  sample_rate_ = 0;
}
inline double ResultHeader::_internal_sample_rate() const {
  return sample_rate_;
}
inline double ResultHeader::sample_rate() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.sample_rate)
  return _internal_sample_rate();
}
inline void ResultHeader::_internal_set_sample_rate(double value) {
  
  sample_rate_ = value;
}
inline void ResultHeader::set_sample_rate(double value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.sample_rate)
}

// double scale_to_volts = 11;
inline void ResultHeader::clear_scale_to_volts() {
  scale_to_volts_ = 0;
}
inline double ResultHeader::_internal_scale_to_volts() const {
  return scale_to_volts_;
}
inline double ResultHeader::scale_to_volts() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.scale_to_volts)
  return _internal_scale_to_volts();
}
inline void ResultHeader::_internal_set_scale_to_volts(double value) {
  
  scale_to_volts_ = value;
}
inline void ResultHeader::set_scale_to_volts(double value) {
  _internal_set_scale_to_volts(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.scale_to_volts)
}

// .zb.dcts.Timestamp time_stamp = 12;
inline bool ResultHeader::_internal_has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != nullptr;
}
inline bool ResultHeader::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const ::zb::dcts::Timestamp& ResultHeader::_internal_time_stamp() const {
  const ::zb::dcts::Timestamp* p = time_stamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Timestamp&>(
      ::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& ResultHeader::time_stamp() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.time_stamp)
  return _internal_time_stamp();
}
inline void ResultHeader::unsafe_arena_set_allocated_time_stamp(
    ::zb::dcts::Timestamp* time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.time_stamp)
}
inline ::zb::dcts::Timestamp* ResultHeader::release_time_stamp() {
  
  ::zb::dcts::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* ResultHeader::unsafe_arena_release_time_stamp() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.time_stamp)
  
  ::zb::dcts::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* ResultHeader::_internal_mutable_time_stamp() {
  
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    time_stamp_ = p;
  }
  return time_stamp_;
}
inline ::zb::dcts::Timestamp* ResultHeader::mutable_time_stamp() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.time_stamp)
  return _internal_mutable_time_stamp();
}
inline void ResultHeader::set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.time_stamp)
}

// .zb.dcts.Position position = 15;
inline bool ResultHeader::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool ResultHeader::has_position() const {
  return _internal_has_position();
}
inline const ::zb::dcts::Position& ResultHeader::_internal_position() const {
  const ::zb::dcts::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Position&>(
      ::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& ResultHeader::position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.position)
  return _internal_position();
}
inline void ResultHeader::unsafe_arena_set_allocated_position(
    ::zb::dcts::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.position)
}
inline ::zb::dcts::Position* ResultHeader::release_position() {
  
  ::zb::dcts::Position* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* ResultHeader::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.position)
  
  ::zb::dcts::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* ResultHeader::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::zb::dcts::Position* ResultHeader::mutable_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.position)
  return _internal_mutable_position();
}
inline void ResultHeader::set_allocated_position(::zb::dcts::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.ResultHeader.position)
}

// -------------------------------------------------------------------

// ResutlBody

// repeated float iq_data = 1;
inline int ResutlBody::_internal_iq_data_size() const {
  return iq_data_.size();
}
inline int ResutlBody::iq_data_size() const {
  return _internal_iq_data_size();
}
inline void ResutlBody::clear_iq_data() {
  iq_data_.Clear();
}
inline float ResutlBody::_internal_iq_data(int index) const {
  return iq_data_.Get(index);
}
inline float ResutlBody::iq_data(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ResutlBody.iq_data)
  return _internal_iq_data(index);
}
inline void ResutlBody::set_iq_data(int index, float value) {
  iq_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ResutlBody.iq_data)
}
inline void ResutlBody::_internal_add_iq_data(float value) {
  iq_data_.Add(value);
}
inline void ResutlBody::add_iq_data(float value) {
  _internal_add_iq_data(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhIQAcquire.ResutlBody.iq_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ResutlBody::_internal_iq_data() const {
  return iq_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ResutlBody::iq_data() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhIQAcquire.ResutlBody.iq_data)
  return _internal_iq_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ResutlBody::_internal_mutable_iq_data() {
  return &iq_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ResutlBody::mutable_iq_data() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhIQAcquire.ResutlBody.iq_data)
  return _internal_mutable_iq_data();
}

// -------------------------------------------------------------------

// Result

// .zb.dcts.node.zczh.zhIQAcquire.ResultHeader header = 1;
inline bool Result::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Result::has_header() const {
  return _internal_has_header();
}
inline void Result::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader& Result::_internal_header() const {
  const ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader&>(
      ::zb::dcts::node::zczh::zhIQAcquire::_ResultHeader_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader& Result::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.Result.header)
  return _internal_header();
}
inline void Result::unsafe_arena_set_allocated_header(
    ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.Result.header)
}
inline ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* Result::release_header() {
  
  ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* Result::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.Result.header)
  
  ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* Result::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::ResultHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* Result::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.Result.header)
  return _internal_mutable_header();
}
inline void Result::set_allocated_header(::zb::dcts::node::zczh::zhIQAcquire::ResultHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.Result.header)
}

// .zb.dcts.node.zczh.zhIQAcquire.ResutlBody body = 2;
inline bool Result::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool Result::has_body() const {
  return _internal_has_body();
}
inline void Result::clear_body() {
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody& Result::_internal_body() const {
  const ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody&>(
      ::zb::dcts::node::zczh::zhIQAcquire::_ResutlBody_default_instance_);
}
inline const ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody& Result::body() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.Result.body)
  return _internal_body();
}
inline void Result::unsafe_arena_set_allocated_body(
    ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.Result.body)
}
inline ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* Result::release_body() {
  
  ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* Result::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.Result.body)
  
  ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* Result::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::zczh::zhIQAcquire::ResutlBody>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* Result::mutable_body() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.Result.body)
  return _internal_mutable_body();
}
inline void Result::set_allocated_body(::zb::dcts::node::zczh::zhIQAcquire::ResutlBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.Result.body)
}

// -------------------------------------------------------------------

// RecordDescriptor

// string record_id = 1;
inline void RecordDescriptor::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& RecordDescriptor::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id)
  return _internal_record_id();
}
inline void RecordDescriptor::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& RecordDescriptor::_internal_record_id() const {
  return record_id_.Get();
}
inline void RecordDescriptor::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecordDescriptor::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id)
}
inline void RecordDescriptor::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id)
}
inline std::string* RecordDescriptor::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecordDescriptor::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDescriptor::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_id)
}

// .zb.dcts.node.NodeDevice from = 2;
inline bool RecordDescriptor::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool RecordDescriptor::has_from() const {
  return _internal_has_from();
}
inline const ::zb::dcts::node::NodeDevice& RecordDescriptor::_internal_from() const {
  const ::zb::dcts::node::NodeDevice* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeDevice&>(
      ::zb::dcts::node::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::node::NodeDevice& RecordDescriptor::from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.from)
  return _internal_from();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_from(
    ::zb::dcts::node::NodeDevice* from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.from)
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::release_from() {
  
  ::zb::dcts::node::NodeDevice* temp = from_;
  from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.from)
  
  ::zb::dcts::node::NodeDevice* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeDevice>(GetArena());
    from_ = p;
  }
  return from_;
}
inline ::zb::dcts::node::NodeDevice* RecordDescriptor::mutable_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.from)
  return _internal_mutable_from();
}
inline void RecordDescriptor::set_allocated_from(::zb::dcts::node::NodeDevice* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from)->GetArena();
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.from)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool RecordDescriptor::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool RecordDescriptor::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& RecordDescriptor::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.time_span)
  return _internal_time_span();
}
inline void RecordDescriptor::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.time_span)
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* RecordDescriptor::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.time_span)
  return _internal_mutable_time_span();
}
inline void RecordDescriptor::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.time_span)
}

// uint32 record_count = 4;
inline void RecordDescriptor::clear_record_count() {
  record_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::_internal_record_count() const {
  return record_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordDescriptor::record_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_count)
  return _internal_record_count();
}
inline void RecordDescriptor::_internal_set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  record_count_ = value;
}
inline void RecordDescriptor::set_record_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.record_count)
}

// repeated .zb.dcts.node.spectrum.BaseBand bands = 5;
inline int RecordDescriptor::_internal_bands_size() const {
  return bands_.size();
}
inline int RecordDescriptor::bands_size() const {
  return _internal_bands_size();
}
inline ::zb::dcts::node::spectrum::BaseBand* RecordDescriptor::mutable_bands(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.bands)
  return bands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::BaseBand >*
RecordDescriptor::mutable_bands() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.bands)
  return &bands_;
}
inline const ::zb::dcts::node::spectrum::BaseBand& RecordDescriptor::_internal_bands(int index) const {
  return bands_.Get(index);
}
inline const ::zb::dcts::node::spectrum::BaseBand& RecordDescriptor::bands(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.bands)
  return _internal_bands(index);
}
inline ::zb::dcts::node::spectrum::BaseBand* RecordDescriptor::_internal_add_bands() {
  return bands_.Add();
}
inline ::zb::dcts::node::spectrum::BaseBand* RecordDescriptor::add_bands() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.bands)
  return _internal_add_bands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::spectrum::BaseBand >&
RecordDescriptor::bands() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor.bands)
  return bands_;
}

// -------------------------------------------------------------------

// QueryRecordRequest

// .zb.dcts.node.TaskAccount task_account = 1;
inline bool QueryRecordRequest::_internal_has_task_account() const {
  return this != internal_default_instance() && task_account_ != nullptr;
}
inline bool QueryRecordRequest::has_task_account() const {
  return _internal_has_task_account();
}
inline const ::zb::dcts::node::TaskAccount& QueryRecordRequest::_internal_task_account() const {
  const ::zb::dcts::node::TaskAccount* p = task_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::TaskAccount&>(
      ::zb::dcts::node::_TaskAccount_default_instance_);
}
inline const ::zb::dcts::node::TaskAccount& QueryRecordRequest::task_account() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.task_account)
  return _internal_task_account();
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_task_account(
    ::zb::dcts::node::TaskAccount* task_account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  task_account_ = task_account;
  if (task_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.task_account)
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::release_task_account() {
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::unsafe_arena_release_task_account() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.task_account)
  
  ::zb::dcts::node::TaskAccount* temp = task_account_;
  task_account_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::_internal_mutable_task_account() {
  
  if (task_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::TaskAccount>(GetArena());
    task_account_ = p;
  }
  return task_account_;
}
inline ::zb::dcts::node::TaskAccount* QueryRecordRequest::mutable_task_account() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.task_account)
  return _internal_mutable_task_account();
}
inline void QueryRecordRequest::set_allocated_task_account(::zb::dcts::node::TaskAccount* task_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account_);
  }
  if (task_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_account)->GetArena();
    if (message_arena != submessage_arena) {
      task_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_account, submessage_arena);
    }
    
  } else {
    
  }
  task_account_ = task_account;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.task_account)
}

// int32 segment_count = 2;
inline void QueryRecordRequest::clear_segment_count() {
  segment_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRecordRequest::_internal_segment_count() const {
  return segment_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRecordRequest::segment_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.segment_count)
  return _internal_segment_count();
}
inline void QueryRecordRequest::_internal_set_segment_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  segment_count_ = value;
}
inline void QueryRecordRequest::set_segment_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_segment_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.segment_count)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool QueryRecordRequest::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool QueryRecordRequest::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& QueryRecordRequest::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TimeSpan&>(
      ::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& QueryRecordRequest::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.time_span)
  return _internal_time_span();
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.time_span)
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::release_time_span() {
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* QueryRecordRequest::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.time_span)
  return _internal_mutable_time_span();
}
inline void QueryRecordRequest::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.time_span)
}

// .zb.dcts.node.spectrum.FrequencySpan freq_span = 5;
inline bool QueryRecordRequest::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool QueryRecordRequest::has_freq_span() const {
  return _internal_has_freq_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& QueryRecordRequest::_internal_freq_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& QueryRecordRequest::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.freq_span)
  return _internal_freq_span();
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.freq_span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::release_freq_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.freq_span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* QueryRecordRequest::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.freq_span)
  return _internal_mutable_freq_span();
}
inline void QueryRecordRequest::set_allocated_freq_span(::zb::dcts::node::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span)->GetArena();
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.QueryRecordRequest.freq_span)
}

// -------------------------------------------------------------------

// QueryRecordReply

// .zb.dcts.node.NodeId node_id = 1;
inline bool QueryRecordReply::_internal_has_node_id() const {
  return this != internal_default_instance() && node_id_ != nullptr;
}
inline bool QueryRecordReply::has_node_id() const {
  return _internal_has_node_id();
}
inline const ::zb::dcts::node::NodeId& QueryRecordReply::_internal_node_id() const {
  const ::zb::dcts::node::NodeId* p = node_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeId&>(
      ::zb::dcts::node::_NodeId_default_instance_);
}
inline const ::zb::dcts::node::NodeId& QueryRecordReply::node_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.node_id)
  return _internal_node_id();
}
inline void QueryRecordReply::unsafe_arena_set_allocated_node_id(
    ::zb::dcts::node::NodeId* node_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.node_id)
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::release_node_id() {
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.node_id)
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::_internal_mutable_node_id() {
  
  if (node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeId>(GetArena());
    node_id_ = p;
  }
  return node_id_;
}
inline ::zb::dcts::node::NodeId* QueryRecordReply::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.node_id)
  return _internal_mutable_node_id();
}
inline void QueryRecordReply::set_allocated_node_id(::zb::dcts::node::NodeId* node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  if (node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id)->GetArena();
    if (message_arena != submessage_arena) {
      node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_id, submessage_arena);
    }
    
  } else {
    
  }
  node_id_ = node_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.node_id)
}

// repeated .zb.dcts.node.zczh.zhIQAcquire.RecordDescriptor matching_records = 2;
inline int QueryRecordReply::_internal_matching_records_size() const {
  return matching_records_.size();
}
inline int QueryRecordReply::matching_records_size() const {
  return _internal_matching_records_size();
}
inline void QueryRecordReply::clear_matching_records() {
  matching_records_.Clear();
}
inline ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor* QueryRecordReply::mutable_matching_records(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.matching_records)
  return matching_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor >*
QueryRecordReply::mutable_matching_records() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.matching_records)
  return &matching_records_;
}
inline const ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor& QueryRecordReply::_internal_matching_records(int index) const {
  return matching_records_.Get(index);
}
inline const ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor& QueryRecordReply::matching_records(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.matching_records)
  return _internal_matching_records(index);
}
inline ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor* QueryRecordReply::_internal_add_matching_records() {
  return matching_records_.Add();
}
inline ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor* QueryRecordReply::add_matching_records() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.matching_records)
  return _internal_add_matching_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::zczh::zhIQAcquire::RecordDescriptor >&
QueryRecordReply::matching_records() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.zczh.zhIQAcquire.QueryRecordReply.matching_records)
  return matching_records_;
}

// -------------------------------------------------------------------

// ReplayStartRequest

// .zb.dcts.node.replay.ReplayId replay_id = 1;
inline bool ReplayStartRequest::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool ReplayStartRequest::has_replay_id() const {
  return _internal_has_replay_id();
}
inline const ::zb::dcts::node::replay::ReplayId& ReplayStartRequest::_internal_replay_id() const {
  const ::zb::dcts::node::replay::ReplayId* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::replay::ReplayId&>(
      ::zb::dcts::node::replay::_ReplayId_default_instance_);
}
inline const ::zb::dcts::node::replay::ReplayId& ReplayStartRequest::replay_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest.replay_id)
  return _internal_replay_id();
}
inline void ReplayStartRequest::unsafe_arena_set_allocated_replay_id(
    ::zb::dcts::node::replay::ReplayId* replay_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest.replay_id)
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::release_replay_id() {
  
  ::zb::dcts::node::replay::ReplayId* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest.replay_id)
  
  ::zb::dcts::node::replay::ReplayId* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::replay::ReplayId>(GetArena());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::zb::dcts::node::replay::ReplayId* ReplayStartRequest::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest.replay_id)
  return _internal_mutable_replay_id();
}
inline void ReplayStartRequest::set_allocated_replay_id(::zb::dcts::node::replay::ReplayId* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id)->GetArena();
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest.replay_id)
}

// int32 result_interval = 3;
inline void ReplayStartRequest::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplayStartRequest::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest.result_interval)
  return _internal_result_interval();
}
inline void ReplayStartRequest::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void ReplayStartRequest::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.zczh.zhIQAcquire.ReplayStartRequest.result_interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zhIQAcquire
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth>() {
  return ::zb::dcts::node::zczh::zhIQAcquire::IFBandWidth_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fzczh_2fZhIQAcquire_2eproto
