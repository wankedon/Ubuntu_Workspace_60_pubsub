// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/zczh/ZhPosition.proto
#ifndef GRPC_node_2fzczh_2fZhPosition_2eproto__INCLUDED
#define GRPC_node_2fzczh_2fZhPosition_2eproto__INCLUDED

#include "node/zczh/ZhPosition.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace node {
namespace zczh {
namespace zhposition {

class ZhPositionService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.node.zczh.zhposition.ZhPositionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 实时
    virtual ::grpc::Status RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>> GetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>>(GetRealtimeResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>> AsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>>(AsyncGetRealtimeResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>> PrepareAsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>>(PrepareAsyncGetRealtimeResultRaw(context, request, cq));
    }
    virtual ::grpc::Status RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> AsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(AsyncRealtimeStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>> PrepareAsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>>(PrepareAsyncRealtimeStopRaw(context, request, cq));
    }
    // 回放
    virtual ::grpc::Status ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::zb::dcts::node::zczh::zhposition::RecordReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhposition::RecordReply>> AsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhposition::RecordReply>>(AsyncReplayRecordQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhposition::RecordReply>> PrepareAsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhposition::RecordReply>>(PrepareAsyncReplayRecordQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::zb::dcts::node::TaskAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>> GetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>>(GetReplayResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>> AsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>>(AsyncGetReplayResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>> PrepareAsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>>(PrepareAsyncGetReplayResultRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 实时
      virtual void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) = 0;
      #else
      virtual void GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) = 0;
      #endif
      virtual void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 回放
      virtual void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) = 0;
      #else
      virtual void GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>* GetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>* AsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>* PrepareAsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* AsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::NodeReply>* PrepareAsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhposition::RecordReply>* AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::zczh::zhposition::RecordReply>* PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>* GetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>* AsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::node::zczh::zhposition::Result>* PrepareAsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncRealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncRealtimeStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhposition::Result>> GetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhposition::Result>>(GetRealtimeResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>> AsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>>(AsyncGetRealtimeResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>> PrepareAsyncGetRealtimeResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>>(PrepareAsyncGetRealtimeResultRaw(context, request, cq));
    }
    ::grpc::Status RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::NodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> AsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(AsyncRealtimeStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>> PrepareAsyncRealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>>(PrepareAsyncRealtimeStopRaw(context, request, cq));
    }
    ::grpc::Status ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::zb::dcts::node::zczh::zhposition::RecordReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhposition::RecordReply>> AsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhposition::RecordReply>>(AsyncReplayRecordQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhposition::RecordReply>> PrepareAsyncReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhposition::RecordReply>>(PrepareAsyncReplayRecordQueryRaw(context, request, cq));
    }
    ::grpc::Status ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::zb::dcts::node::TaskAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> AsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(AsyncReplayStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>> PrepareAsyncReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>>(PrepareAsyncReplayStartRaw(context, request, cq));
    }
    ::grpc::Status ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncReplayStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncReplayStopRaw(context, request, cq));
    }
    ::grpc::Status ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncReplayAdjustRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhposition::Result>> GetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::node::zczh::zhposition::Result>>(GetReplayResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>> AsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>>(AsyncGetReplayResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>> PrepareAsyncGetReplayResult(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>>(PrepareAsyncGetReplayResultRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RealtimeStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) override;
      #else
      void GetRealtimeResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) override;
      #endif
      void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RealtimeStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayRecordQuery(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayStart(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayStop(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayAdjust(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) override;
      #else
      void GetReplayResult(::grpc::ClientContext* context, ::zb::dcts::TaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::node::zczh::zhposition::Result>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncRealtimeStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhposition::Result>* GetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>* AsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>* PrepareAsyncGetRealtimeResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* AsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeReply>* PrepareAsyncRealtimeStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhposition::RecordReply>* AsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::zczh::zhposition::RecordReply>* PrepareAsyncReplayRecordQueryRaw(::grpc::ClientContext* context, const ::zb::dcts::TimeSpan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* AsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::node::TaskAccount>* PrepareAsyncReplayStartRaw(::grpc::ClientContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncReplayStopRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncReplayAdjustRaw(::grpc::ClientContext* context, const ::zb::dcts::node::replay::AdjustRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::node::zczh::zhposition::Result>* GetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>* AsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::node::zczh::zhposition::Result>* PrepareAsyncGetReplayResultRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RealtimeStart_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRealtimeResult_;
    const ::grpc::internal::RpcMethod rpcmethod_RealtimeStop_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayRecordQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStart_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayStop_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayAdjust_;
    const ::grpc::internal::RpcMethod rpcmethod_GetReplayResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 实时
    virtual ::grpc::Status RealtimeStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status GetRealtimeResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* writer);
    virtual ::grpc::Status RealtimeStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response);
    // 回放
    virtual ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response);
    virtual ::grpc::Status ReplayStart(::grpc::ServerContext* context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response);
    virtual ::grpc::Status ReplayStop(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status ReplayAdjust(::grpc::ServerContext* context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetReplayResult(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeResult(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhposition::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStop(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::NodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhposition::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayRecordQuery(::grpc::ServerContext* context, ::zb::dcts::TimeSpan* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::zczh::zhposition::RecordReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStart() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::node::TaskAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayStop() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::zb::dcts::node::replay::AdjustRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplayResult(::grpc::ServerContext* context, ::zb::dcts::TaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::node::zczh::zhposition::Result>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RealtimeStart<WithAsyncMethod_GetRealtimeResult<WithAsyncMethod_RealtimeStop<WithAsyncMethod_ReplayRecordQuery<WithAsyncMethod_ReplayStart<WithAsyncMethod_ReplayStop<WithAsyncMethod_ReplayAdjust<WithAsyncMethod_GetReplayResult<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RealtimeStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhposition::TaskStartRequest, ::zb::dcts::node::TaskAccount>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->RealtimeStart(context, request, response); }));}
    void SetMessageAllocatorFor_RealtimeStart(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::zczh::zhposition::TaskStartRequest, ::zb::dcts::node::TaskAccount>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhposition::TaskStartRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RealtimeStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RealtimeStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRealtimeResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhposition::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::TaskId* request) { return this->GetRealtimeResult(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhposition::Result>* GetRealtimeResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::zb::dcts::node::zczh::zhposition::Result>* GetRealtimeResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RealtimeStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::NodeReply* response) { return this->RealtimeStop(context, request, response); }));}
    void SetMessageAllocatorFor_RealtimeStop(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RealtimeStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RealtimeStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayRecordQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhposition::RecordReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::TimeSpan* request, ::zb::dcts::node::zczh::zhposition::RecordReply* response) { return this->ReplayRecordQuery(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayRecordQuery(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhposition::RecordReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhposition::RecordReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhposition::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhposition::RecordReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayRecordQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhposition::RecordReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhposition::ReplayStartRequest, ::zb::dcts::node::TaskAccount>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* request, ::zb::dcts::node::TaskAccount* response) { return this->ReplayStart(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStart(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::zczh::zhposition::ReplayStartRequest, ::zb::dcts::node::TaskAccount>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::zczh::zhposition::ReplayStartRequest, ::zb::dcts::node::TaskAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response) { return this->ReplayStop(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayStop(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::TaskId, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::TaskId, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayAdjust() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::node::replay::AdjustRequest* request, ::google::protobuf::Empty* response) { return this->ReplayAdjust(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayAdjust(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayAdjust(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetReplayResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhposition::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::TaskId* request) { return this->GetReplayResult(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::node::zczh::zhposition::Result>* GetReplayResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::zb::dcts::node::zczh::zhposition::Result>* GetReplayResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RealtimeStart<ExperimentalWithCallbackMethod_GetRealtimeResult<ExperimentalWithCallbackMethod_RealtimeStop<ExperimentalWithCallbackMethod_ReplayRecordQuery<ExperimentalWithCallbackMethod_ReplayStart<ExperimentalWithCallbackMethod_ReplayStop<ExperimentalWithCallbackMethod_ReplayAdjust<ExperimentalWithCallbackMethod_GetReplayResult<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RealtimeStart<ExperimentalWithCallbackMethod_GetRealtimeResult<ExperimentalWithCallbackMethod_RealtimeStop<ExperimentalWithCallbackMethod_ReplayRecordQuery<ExperimentalWithCallbackMethod_ReplayStart<ExperimentalWithCallbackMethod_ReplayStop<ExperimentalWithCallbackMethod_ReplayAdjust<ExperimentalWithCallbackMethod_GetReplayResult<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhposition::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStart() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayStop() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRealtimeResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealtimeStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhposition::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayRecordQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStart() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayStop() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayAdjust(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetReplayResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RealtimeStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RealtimeStart(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RealtimeStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RealtimeStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRealtimeResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetRealtimeResult(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRealtimeResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetRealtimeResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RealtimeStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RealtimeStop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RealtimeStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RealtimeStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayRecordQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayRecordQuery(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhposition::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayRecordQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayRecordQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStart(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayStop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayAdjust() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayAdjust(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayAdjust(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayAdjust(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetReplayResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetReplayResult(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetReplayResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetReplayResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RealtimeStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RealtimeStart() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhposition::TaskStartRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhposition::TaskStartRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedRealtimeStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RealtimeStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RealtimeStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::TaskStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRealtimeStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhposition::TaskStartRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RealtimeStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RealtimeStop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::NodeReply>* streamer) {
                       return this->StreamedRealtimeStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RealtimeStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RealtimeStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::zb::dcts::node::NodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRealtimeStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::zb::dcts::node::NodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayRecordQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayRecordQuery() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhposition::RecordReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TimeSpan, ::zb::dcts::node::zczh::zhposition::RecordReply>* streamer) {
                       return this->StreamedReplayRecordQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayRecordQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayRecordQuery(::grpc::ServerContext* /*context*/, const ::zb::dcts::TimeSpan* /*request*/, ::zb::dcts::node::zczh::zhposition::RecordReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayRecordQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TimeSpan,::zb::dcts::node::zczh::zhposition::RecordReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStart() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::zczh::zhposition::ReplayStartRequest, ::zb::dcts::node::TaskAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::zczh::zhposition::ReplayStartRequest, ::zb::dcts::node::TaskAccount>* streamer) {
                       return this->StreamedReplayStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStart(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::zczh::zhposition::ReplayStartRequest* /*request*/, ::zb::dcts::node::TaskAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::zczh::zhposition::ReplayStartRequest,::zb::dcts::node::TaskAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayStop() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::TaskId, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::TaskId, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedReplayStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayStop(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::TaskId,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayAdjust : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayAdjust() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::zb::dcts::node::replay::AdjustRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedReplayAdjust(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayAdjust() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayAdjust(::grpc::ServerContext* /*context*/, const ::zb::dcts::node::replay::AdjustRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayAdjust(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::node::replay::AdjustRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RealtimeStart<WithStreamedUnaryMethod_RealtimeStop<WithStreamedUnaryMethod_ReplayRecordQuery<WithStreamedUnaryMethod_ReplayStart<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRealtimeResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRealtimeResult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhposition::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhposition::Result>* streamer) {
                       return this->StreamedGetRealtimeResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRealtimeResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRealtimeResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRealtimeResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::TaskId,::zb::dcts::node::zczh::zhposition::Result>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetReplayResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetReplayResult() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhposition::Result>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::zb::dcts::TaskId, ::zb::dcts::node::zczh::zhposition::Result>* streamer) {
                       return this->StreamedGetReplayResult(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetReplayResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetReplayResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::TaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::node::zczh::zhposition::Result>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetReplayResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::TaskId,::zb::dcts::node::zczh::zhposition::Result>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetRealtimeResult<WithSplitStreamingMethod_GetReplayResult<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RealtimeStart<WithSplitStreamingMethod_GetRealtimeResult<WithStreamedUnaryMethod_RealtimeStop<WithStreamedUnaryMethod_ReplayRecordQuery<WithStreamedUnaryMethod_ReplayStart<WithStreamedUnaryMethod_ReplayStop<WithStreamedUnaryMethod_ReplayAdjust<WithSplitStreamingMethod_GetReplayResult<Service > > > > > > > > StreamedService;
};

}  // namespace zhposition
}  // namespace zczh
}  // namespace node
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_node_2fzczh_2fZhPosition_2eproto__INCLUDED
