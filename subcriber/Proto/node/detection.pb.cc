// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/detection.proto

#include "node/detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace detection {
constexpr ThresholdSector::ThresholdSector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : freq_span_(nullptr)
  , level_(0){}
struct ThresholdSectorDefaultTypeInternal {
  constexpr ThresholdSectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThresholdSectorDefaultTypeInternal() {}
  union {
    ThresholdSector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThresholdSectorDefaultTypeInternal _ThresholdSector_default_instance_;
constexpr HistoryThresholdParam::HistoryThresholdParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : span_(nullptr)
  , max_load_count_(0)
  , offset_(0){}
struct HistoryThresholdParamDefaultTypeInternal {
  constexpr HistoryThresholdParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HistoryThresholdParamDefaultTypeInternal() {}
  union {
    HistoryThresholdParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HistoryThresholdParamDefaultTypeInternal _HistoryThresholdParam_default_instance_;
constexpr UserThresholdParam::UserThresholdParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sectors_(){}
struct UserThresholdParamDefaultTypeInternal {
  constexpr UserThresholdParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserThresholdParamDefaultTypeInternal() {}
  union {
    UserThresholdParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserThresholdParamDefaultTypeInternal _UserThresholdParam_default_instance_;
constexpr AdaptiveThresholdParam::AdaptiveThresholdParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : average_count_(0)
  , partition_mode_(0)

  , offset_(0){}
struct AdaptiveThresholdParamDefaultTypeInternal {
  constexpr AdaptiveThresholdParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdaptiveThresholdParamDefaultTypeInternal() {}
  union {
    AdaptiveThresholdParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdaptiveThresholdParamDefaultTypeInternal _AdaptiveThresholdParam_default_instance_;
constexpr EnergyDetectionParam::EnergyDetectionParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_types_()
  , _active_types_cached_byte_size_()
  , history_threshold_(nullptr)
  , user_threshold_(nullptr)
  , adaptive_threshold_(nullptr)
  , logic_(0)
{}
struct EnergyDetectionParamDefaultTypeInternal {
  constexpr EnergyDetectionParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnergyDetectionParamDefaultTypeInternal() {}
  union {
    EnergyDetectionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnergyDetectionParamDefaultTypeInternal _EnergyDetectionParam_default_instance_;
constexpr ThresholdRefLine::ThresholdRefLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threshold_trace_()
  , _threshold_trace_cached_byte_size_()
  , type_(0)
{}
struct ThresholdRefLineDefaultTypeInternal {
  constexpr ThresholdRefLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThresholdRefLineDefaultTypeInternal() {}
  union {
    ThresholdRefLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThresholdRefLineDefaultTypeInternal _ThresholdRefLine_default_instance_;
constexpr SignalFeature::SignalFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spectrum_detail_()
  , _spectrum_detail_cached_byte_size_()
  , hits_detail_()
  , _hits_detail_cached_byte_size_()
  , time_span_(nullptr)
  , signal_band_(nullptr)
  , amplitude_(nullptr)
  , hits_(nullptr)
  , num_sweep_(0){}
struct SignalFeatureDefaultTypeInternal {
  constexpr SignalFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalFeatureDefaultTypeInternal() {}
  union {
    SignalFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalFeatureDefaultTypeInternal _SignalFeature_default_instance_;
constexpr SignalSegment::SignalSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , center_freq_(nullptr)
  , band_width_(nullptr)
  , amplitude_(nullptr)
  , time_span_(nullptr)
  , segment_seq_(0)
  , total_sweep_(0)
  , total_hits_(0){}
struct SignalSegmentDefaultTypeInternal {
  constexpr SignalSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalSegmentDefaultTypeInternal() {}
  union {
    SignalSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalSegmentDefaultTypeInternal _SignalSegment_default_instance_;
constexpr HitsSegmentation::HitsSegmentation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hits_prob_()
  , bandwidth_range_(nullptr){}
struct HitsSegmentationDefaultTypeInternal {
  constexpr HitsSegmentationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HitsSegmentationDefaultTypeInternal() {}
  union {
    HitsSegmentation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HitsSegmentationDefaultTypeInternal _HitsSegmentation_default_instance_;
constexpr SegmentationParam::SegmentationParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hits_param_(nullptr)
  , enable_filters_(0u)
  , num_overlap_(0){}
struct SegmentationParamDefaultTypeInternal {
  constexpr SegmentationParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SegmentationParamDefaultTypeInternal() {}
  union {
    SegmentationParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SegmentationParamDefaultTypeInternal _SegmentationParam_default_instance_;
constexpr SpectrumIntersection::SpectrumIntersection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_intersection_ratio_(0)
  , max_time_gap_(0){}
struct SpectrumIntersectionDefaultTypeInternal {
  constexpr SpectrumIntersectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpectrumIntersectionDefaultTypeInternal() {}
  union {
    SpectrumIntersection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpectrumIntersectionDefaultTypeInternal _SpectrumIntersection_default_instance_;
constexpr MergeParam::MergeParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_merge_param_(nullptr)
  , signal_merge_param_(nullptr)
  , policy_(0)
{}
struct MergeParamDefaultTypeInternal {
  constexpr MergeParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeParamDefaultTypeInternal() {}
  union {
    MergeParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeParamDefaultTypeInternal _MergeParam_default_instance_;
constexpr DetectionOption::DetectionOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clear_signal_lib_history_(nullptr)
  , commit_result_period_(nullptr){}
struct DetectionOptionDefaultTypeInternal {
  constexpr DetectionOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectionOptionDefaultTypeInternal() {}
  union {
    DetectionOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectionOptionDefaultTypeInternal _DetectionOption_default_instance_;
constexpr DetectionParam::DetectionParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : energy_detect_param_(nullptr)
  , segmentation_param_(nullptr)
  , merge_param_(nullptr)
  , options_(nullptr){}
struct DetectionParamDefaultTypeInternal {
  constexpr DetectionParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectionParamDefaultTypeInternal() {}
  union {
    DetectionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectionParamDefaultTypeInternal _DetectionParam_default_instance_;
constexpr SignalList::SignalList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detected_signals_()
  , merged_signal_id_(){}
struct SignalListDefaultTypeInternal {
  constexpr SignalListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalListDefaultTypeInternal() {}
  union {
    SignalList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalListDefaultTypeInternal _SignalList_default_instance_;
constexpr DetectionRequest::DetectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , detection_param_(nullptr){}
struct DetectionRequestDefaultTypeInternal {
  constexpr DetectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetectionRequestDefaultTypeInternal() {}
  union {
    DetectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetectionRequestDefaultTypeInternal _DetectionRequest_default_instance_;
constexpr DetailKeeping::DetailKeeping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signal_id_()
  , keeping_(false){}
struct DetailKeepingDefaultTypeInternal {
  constexpr DetailKeepingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetailKeepingDefaultTypeInternal() {}
  union {
    DetailKeeping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetailKeepingDefaultTypeInternal _DetailKeeping_default_instance_;
constexpr DetailKeepingRequest::DetailKeepingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_account_(nullptr)
  , detail_keeping_(nullptr){}
struct DetailKeepingRequestDefaultTypeInternal {
  constexpr DetailKeepingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetailKeepingRequestDefaultTypeInternal() {}
  union {
    DetailKeepingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetailKeepingRequestDefaultTypeInternal _DetailKeepingRequest_default_instance_;
}  // namespace detection
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fdetection_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fdetection_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fdetection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::ThresholdSector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::ThresholdSector, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::ThresholdSector, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::HistoryThresholdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::HistoryThresholdParam, span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::HistoryThresholdParam, max_load_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::HistoryThresholdParam, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::UserThresholdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::UserThresholdParam, sectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::AdaptiveThresholdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::AdaptiveThresholdParam, average_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::AdaptiveThresholdParam, partition_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::AdaptiveThresholdParam, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::EnergyDetectionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::EnergyDetectionParam, active_types_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::EnergyDetectionParam, logic_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::EnergyDetectionParam, history_threshold_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::EnergyDetectionParam, user_threshold_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::EnergyDetectionParam, adaptive_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::ThresholdRefLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::ThresholdRefLine, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::ThresholdRefLine, threshold_trace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalFeature, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalFeature, signal_band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalFeature, num_sweep_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalFeature, amplitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalFeature, hits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalFeature, spectrum_detail_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalFeature, hits_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, segment_seq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, center_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, band_width_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, amplitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, total_sweep_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, total_hits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalSegment, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::HitsSegmentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::HitsSegmentation, hits_prob_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::HitsSegmentation, bandwidth_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SegmentationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SegmentationParam, enable_filters_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SegmentationParam, num_overlap_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SegmentationParam, hits_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SpectrumIntersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SpectrumIntersection, min_intersection_ratio_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SpectrumIntersection, max_time_gap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::MergeParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::MergeParam, policy_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::MergeParam, feature_merge_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::MergeParam, signal_merge_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionOption, clear_signal_lib_history_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionOption, commit_result_period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionParam, energy_detect_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionParam, segmentation_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionParam, merge_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionParam, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalList, detected_signals_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::SignalList, merged_signal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetectionRequest, detection_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetailKeeping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetailKeeping, signal_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetailKeeping, keeping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetailKeepingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetailKeepingRequest, task_account_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::detection::DetailKeepingRequest, detail_keeping_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::detection::ThresholdSector)},
  { 7, -1, sizeof(::zb::dcts::node::detection::HistoryThresholdParam)},
  { 15, -1, sizeof(::zb::dcts::node::detection::UserThresholdParam)},
  { 21, -1, sizeof(::zb::dcts::node::detection::AdaptiveThresholdParam)},
  { 29, -1, sizeof(::zb::dcts::node::detection::EnergyDetectionParam)},
  { 39, -1, sizeof(::zb::dcts::node::detection::ThresholdRefLine)},
  { 46, -1, sizeof(::zb::dcts::node::detection::SignalFeature)},
  { 58, -1, sizeof(::zb::dcts::node::detection::SignalSegment)},
  { 72, -1, sizeof(::zb::dcts::node::detection::HitsSegmentation)},
  { 79, -1, sizeof(::zb::dcts::node::detection::SegmentationParam)},
  { 87, -1, sizeof(::zb::dcts::node::detection::SpectrumIntersection)},
  { 94, -1, sizeof(::zb::dcts::node::detection::MergeParam)},
  { 102, -1, sizeof(::zb::dcts::node::detection::DetectionOption)},
  { 109, -1, sizeof(::zb::dcts::node::detection::DetectionParam)},
  { 118, -1, sizeof(::zb::dcts::node::detection::SignalList)},
  { 125, -1, sizeof(::zb::dcts::node::detection::DetectionRequest)},
  { 132, -1, sizeof(::zb::dcts::node::detection::DetailKeeping)},
  { 139, -1, sizeof(::zb::dcts::node::detection::DetailKeepingRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_ThresholdSector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_HistoryThresholdParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_UserThresholdParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_AdaptiveThresholdParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_EnergyDetectionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_ThresholdRefLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_SignalFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_SignalSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_HitsSegmentation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_SegmentationParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_SpectrumIntersection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_MergeParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_DetectionOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_DetectionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_SignalList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_DetectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_DetailKeeping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::detection::_DetailKeepingRequest_default_instance_),
};

const char descriptor_table_protodef_node_2fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024node/detection.proto\022\026zb.dcts.node.det"
  "ection\032\ndcts.proto\032\023node/spectrum.proto\032"
  "\017node/node.proto\"Y\n\017ThresholdSector\0227\n\tf"
  "req_span\030\001 \001(\0132$.zb.dcts.node.spectrum.F"
  "requencySpan\022\r\n\005level\030\002 \001(\002\"`\n\025HistoryTh"
  "resholdParam\022\037\n\004span\030\001 \001(\0132\021.zb.dcts.Tim"
  "eSpan\022\026\n\016max_load_count\030\003 \001(\005\022\016\n\006offset\030"
  "\004 \001(\002\"N\n\022UserThresholdParam\0228\n\007sectors\030\001"
  " \003(\0132\'.zb.dcts.node.detection.ThresholdS"
  "ector\"\326\001\n\026AdaptiveThresholdParam\022\025\n\raver"
  "age_count\030\001 \001(\005\022T\n\016partition_mode\030\002 \001(\0162"
  "<.zb.dcts.node.detection.AdaptiveThresho"
  "ldParam.PartitionMode\022\016\n\006offset\030\003 \001(\002\"\?\n"
  "\rPartitionMode\022\017\n\013PM_STANDARD\020\000\022\020\n\014PM_AG"
  "GRESIVE\020\001\022\013\n\007PM_FAST\020\002\"\230\003\n\024EnergyDetecti"
  "onParam\022;\n\014active_types\030\001 \003(\0162%.zb.dcts."
  "node.detection.ThresholdType\022E\n\005logic\030\003 "
  "\001(\01626.zb.dcts.node.detection.EnergyDetec"
  "tionParam.LogicType\022H\n\021history_threshold"
  "\030\005 \001(\0132-.zb.dcts.node.detection.HistoryT"
  "hresholdParam\022B\n\016user_threshold\030\006 \001(\0132*."
  "zb.dcts.node.detection.UserThresholdPara"
  "m\022J\n\022adaptive_threshold\030\007 \001(\0132..zb.dcts."
  "node.detection.AdaptiveThresholdParam\"\"\n"
  "\tLogicType\022\n\n\006LT_AND\020\000\022\t\n\005LT_OR\020\001\"`\n\020Thr"
  "esholdRefLine\0223\n\004type\030\001 \001(\0162%.zb.dcts.no"
  "de.detection.ThresholdType\022\027\n\017threshold_"
  "trace\030\002 \003(\002\"\375\001\n\rSignalFeature\022$\n\ttime_sp"
  "an\030\001 \001(\0132\021.zb.dcts.TimeSpan\0226\n\013signal_ba"
  "nd\030\002 \001(\0132!.zb.dcts.node.spectrum.SignalB"
  "and\022\021\n\tnum_sweep\030\003 \001(\005\022(\n\tamplitude\030\004 \001("
  "\0132\025.zb.dcts.StatisticVal\022#\n\004hits\030\005 \001(\0132\025"
  ".zb.dcts.StatisticVal\022\027\n\017spectrum_detail"
  "\030\010 \003(\002\022\023\n\013hits_detail\030\t \003(\002\"\270\002\n\rSignalSe"
  "gment\022\n\n\002id\030\001 \001(\t\022\023\n\013segment_seq\030\002 \001(\005\022*"
  "\n\013center_freq\030\003 \001(\0132\025.zb.dcts.StatisticV"
  "al\022)\n\nband_width\030\004 \001(\0132\025.zb.dcts.Statist"
  "icVal\022(\n\tamplitude\030\005 \001(\0132\025.zb.dcts.Stati"
  "sticVal\022$\n\ttime_span\030\006 \001(\0132\021.zb.dcts.Tim"
  "eSpan\022\023\n\013total_sweep\030\007 \001(\005\022\022\n\ntotal_hits"
  "\030\010 \001(\005\0226\n\007feature\030\t \003(\0132%.zb.dcts.node.d"
  "etection.SignalFeature\"`\n\020HitsSegmentati"
  "on\022\"\n\thits_prob\030\001 \003(\0132\017.zb.dcts.DRange\022("
  "\n\017bandwidth_range\030\002 \001(\0132\017.zb.dcts.DRange"
  "\"~\n\021SegmentationParam\022\026\n\016enable_filters\030"
  "\001 \001(\r\022\023\n\013num_overlap\030\002 \001(\005\022<\n\nhits_param"
  "\030\003 \001(\0132(.zb.dcts.node.detection.HitsSegm"
  "entation\"L\n\024SpectrumIntersection\022\036\n\026min_"
  "intersection_ratio\030\001 \001(\002\022\024\n\014max_time_gap"
  "\030\002 \001(\005\"\326\001\n\nMergeParam\0223\n\006policy\030\001 \001(\0162#."
  "zb.dcts.node.detection.MergePolicy\022I\n\023fe"
  "ature_merge_param\030\003 \001(\0132,.zb.dcts.node.d"
  "etection.SpectrumIntersection\022H\n\022signal_"
  "merge_param\030\004 \001(\0132,.zb.dcts.node.detecti"
  "on.SpectrumIntersection\"u\n\017DetectionOpti"
  "on\0222\n\030clear_signal_lib_history\030\001 \001(\0132\020.z"
  "b.dcts.Boolean\022.\n\024commit_result_period\030\003"
  " \001(\0132\020.zb.dcts.Integer\"\225\002\n\016DetectionPara"
  "m\022I\n\023energy_detect_param\030\001 \001(\0132,.zb.dcts"
  ".node.detection.EnergyDetectionParam\022E\n\022"
  "segmentation_param\030\003 \001(\0132).zb.dcts.node."
  "detection.SegmentationParam\0227\n\013merge_par"
  "am\030\004 \001(\0132\".zb.dcts.node.detection.MergeP"
  "aram\0228\n\007options\030\005 \001(\0132\'.zb.dcts.node.det"
  "ection.DetectionOption\"g\n\nSignalList\022\?\n\020"
  "detected_signals\030\001 \003(\0132%.zb.dcts.node.de"
  "tection.SignalSegment\022\030\n\020merged_signal_i"
  "d\030\002 \003(\t\"\204\001\n\020DetectionRequest\022/\n\014task_acc"
  "ount\030\001 \001(\0132\031.zb.dcts.node.TaskAccount\022\?\n"
  "\017detection_param\030\002 \001(\0132&.zb.dcts.node.de"
  "tection.DetectionParam\"3\n\rDetailKeeping\022"
  "\021\n\tsignal_id\030\001 \003(\t\022\017\n\007keeping\030\002 \001(\010\"\206\001\n\024"
  "DetailKeepingRequest\022/\n\014task_account\030\001 \001"
  "(\0132\031.zb.dcts.node.TaskAccount\022=\n\016detail_"
  "keeping\030\002 \001(\0132%.zb.dcts.node.detection.D"
  "etailKeeping*;\n\rThresholdType\022\013\n\007HISTORY"
  "\020\000\022\017\n\013USER_DEFINE\020\001\022\014\n\010ADAPTIVE\020\002*P\n\016Sig"
  "nalActivity\022\n\n\006ACTIVE\020\000\022\014\n\010INACTIVE\020\001\022\013\n"
  "\007DECAYED\020\002\022\n\n\006MERGED\020\003\022\013\n\007UNKNOWN\020\004*]\n\026S"
  "egmentationFilterType\022\014\n\010RESERVED\020\000\022\013\n\007O"
  "VERLAP\020\001\022\010\n\004HITS\020\002\022\016\n\nWHITE_LIST\020\004\022\016\n\nBL"
  "ACK_LIST\020\010*;\n\013MergePolicy\022\r\n\tNO_POLICY\020\000"
  "\022\035\n\031SPECTRUM_INTERSECT_POLICY\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fdetection_2eproto_deps[3] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_node_2fnode_2eproto,
  &::descriptor_table_node_2fspectrum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fdetection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fdetection_2eproto = {
  false, false, 3319, descriptor_table_protodef_node_2fdetection_2eproto, "node/detection.proto", 
  &descriptor_table_node_2fdetection_2eproto_once, descriptor_table_node_2fdetection_2eproto_deps, 3, 18,
  schemas, file_default_instances, TableStruct_node_2fdetection_2eproto::offsets,
  file_level_metadata_node_2fdetection_2eproto, file_level_enum_descriptors_node_2fdetection_2eproto, file_level_service_descriptors_node_2fdetection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fdetection_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fdetection_2eproto);
  return descriptor_table_node_2fdetection_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fdetection_2eproto(&descriptor_table_node_2fdetection_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace detection {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdaptiveThresholdParam_PartitionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fdetection_2eproto);
  return file_level_enum_descriptors_node_2fdetection_2eproto[0];
}
bool AdaptiveThresholdParam_PartitionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PM_STANDARD;
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PM_AGGRESIVE;
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PM_FAST;
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PartitionMode_MIN;
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PartitionMode_MAX;
constexpr int AdaptiveThresholdParam::PartitionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnergyDetectionParam_LogicType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fdetection_2eproto);
  return file_level_enum_descriptors_node_2fdetection_2eproto[1];
}
bool EnergyDetectionParam_LogicType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnergyDetectionParam_LogicType EnergyDetectionParam::LT_AND;
constexpr EnergyDetectionParam_LogicType EnergyDetectionParam::LT_OR;
constexpr EnergyDetectionParam_LogicType EnergyDetectionParam::LogicType_MIN;
constexpr EnergyDetectionParam_LogicType EnergyDetectionParam::LogicType_MAX;
constexpr int EnergyDetectionParam::LogicType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThresholdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fdetection_2eproto);
  return file_level_enum_descriptors_node_2fdetection_2eproto[2];
}
bool ThresholdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignalActivity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fdetection_2eproto);
  return file_level_enum_descriptors_node_2fdetection_2eproto[3];
}
bool SignalActivity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentationFilterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fdetection_2eproto);
  return file_level_enum_descriptors_node_2fdetection_2eproto[4];
}
bool SegmentationFilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergePolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fdetection_2eproto);
  return file_level_enum_descriptors_node_2fdetection_2eproto[5];
}
bool MergePolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ThresholdSector::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& freq_span(const ThresholdSector* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
ThresholdSector::_Internal::freq_span(const ThresholdSector* msg) {
  return *msg->freq_span_;
}
void ThresholdSector::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
ThresholdSector::ThresholdSector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.ThresholdSector)
}
ThresholdSector::ThresholdSector(const ThresholdSector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.ThresholdSector)
}

void ThresholdSector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&freq_span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&freq_span_)) + sizeof(level_));
}

ThresholdSector::~ThresholdSector() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.ThresholdSector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThresholdSector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
}

void ThresholdSector::ArenaDtor(void* object) {
  ThresholdSector* _this = reinterpret_cast< ThresholdSector* >(object);
  (void)_this;
}
void ThresholdSector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThresholdSector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThresholdSector::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.ThresholdSector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThresholdSector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThresholdSector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.ThresholdSector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_span(this), target, stream);
  }

  // float level = 2;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.ThresholdSector)
  return target;
}

size_t ThresholdSector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.ThresholdSector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // float level = 2;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThresholdSector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.ThresholdSector)
  GOOGLE_DCHECK_NE(&from, this);
  const ThresholdSector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThresholdSector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.ThresholdSector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.ThresholdSector)
    MergeFrom(*source);
  }
}

void ThresholdSector::MergeFrom(const ThresholdSector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.ThresholdSector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (!(from.level() <= 0 && from.level() >= 0)) {
    _internal_set_level(from._internal_level());
  }
}

void ThresholdSector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.ThresholdSector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdSector::CopyFrom(const ThresholdSector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.ThresholdSector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdSector::IsInitialized() const {
  return true;
}

void ThresholdSector::InternalSwap(ThresholdSector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThresholdSector, level_)
      + sizeof(ThresholdSector::level_)
      - PROTOBUF_FIELD_OFFSET(ThresholdSector, freq_span_)>(
          reinterpret_cast<char*>(&freq_span_),
          reinterpret_cast<char*>(&other->freq_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdSector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistoryThresholdParam::_Internal {
 public:
  static const ::zb::dcts::TimeSpan& span(const HistoryThresholdParam* msg);
};

const ::zb::dcts::TimeSpan&
HistoryThresholdParam::_Internal::span(const HistoryThresholdParam* msg) {
  return *msg->span_;
}
void HistoryThresholdParam::clear_span() {
  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
}
HistoryThresholdParam::HistoryThresholdParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.HistoryThresholdParam)
}
HistoryThresholdParam::HistoryThresholdParam(const HistoryThresholdParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_span()) {
    span_ = new ::zb::dcts::TimeSpan(*from.span_);
  } else {
    span_ = nullptr;
  }
  ::memcpy(&max_load_count_, &from.max_load_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&max_load_count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.HistoryThresholdParam)
}

void HistoryThresholdParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&span_)) + sizeof(offset_));
}

HistoryThresholdParam::~HistoryThresholdParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.HistoryThresholdParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryThresholdParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete span_;
}

void HistoryThresholdParam::ArenaDtor(void* object) {
  HistoryThresholdParam* _this = reinterpret_cast< HistoryThresholdParam* >(object);
  (void)_this;
}
void HistoryThresholdParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryThresholdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistoryThresholdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.HistoryThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  ::memset(&max_load_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&max_load_count_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryThresholdParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TimeSpan span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_load_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_load_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryThresholdParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.HistoryThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan span = 1;
  if (this->has_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::span(this), target, stream);
  }

  // int32 max_load_count = 3;
  if (this->max_load_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_load_count(), target);
  }

  // float offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.HistoryThresholdParam)
  return target;
}

size_t HistoryThresholdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.HistoryThresholdParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan span = 1;
  if (this->has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  // int32 max_load_count = 3;
  if (this->max_load_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_load_count());
  }

  // float offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryThresholdParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.HistoryThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryThresholdParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryThresholdParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.HistoryThresholdParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.HistoryThresholdParam)
    MergeFrom(*source);
  }
}

void HistoryThresholdParam::MergeFrom(const HistoryThresholdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.HistoryThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    _internal_mutable_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_span());
  }
  if (from.max_load_count() != 0) {
    _internal_set_max_load_count(from._internal_max_load_count());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
}

void HistoryThresholdParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.HistoryThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryThresholdParam::CopyFrom(const HistoryThresholdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.HistoryThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryThresholdParam::IsInitialized() const {
  return true;
}

void HistoryThresholdParam::InternalSwap(HistoryThresholdParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryThresholdParam, offset_)
      + sizeof(HistoryThresholdParam::offset_)
      - PROTOBUF_FIELD_OFFSET(HistoryThresholdParam, span_)>(
          reinterpret_cast<char*>(&span_),
          reinterpret_cast<char*>(&other->span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryThresholdParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserThresholdParam::_Internal {
 public:
};

UserThresholdParam::UserThresholdParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sectors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.UserThresholdParam)
}
UserThresholdParam::UserThresholdParam(const UserThresholdParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sectors_(from.sectors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.UserThresholdParam)
}

void UserThresholdParam::SharedCtor() {
}

UserThresholdParam::~UserThresholdParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.UserThresholdParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserThresholdParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserThresholdParam::ArenaDtor(void* object) {
  UserThresholdParam* _this = reinterpret_cast< UserThresholdParam* >(object);
  (void)_this;
}
void UserThresholdParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserThresholdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserThresholdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.UserThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sectors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserThresholdParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.detection.ThresholdSector sectors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserThresholdParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.UserThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.ThresholdSector sectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sectors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.UserThresholdParam)
  return target;
}

size_t UserThresholdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.UserThresholdParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.ThresholdSector sectors = 1;
  total_size += 1UL * this->_internal_sectors_size();
  for (const auto& msg : this->sectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserThresholdParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.UserThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  const UserThresholdParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserThresholdParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.UserThresholdParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.UserThresholdParam)
    MergeFrom(*source);
  }
}

void UserThresholdParam::MergeFrom(const UserThresholdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.UserThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sectors_.MergeFrom(from.sectors_);
}

void UserThresholdParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.UserThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserThresholdParam::CopyFrom(const UserThresholdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.UserThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserThresholdParam::IsInitialized() const {
  return true;
}

void UserThresholdParam::InternalSwap(UserThresholdParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sectors_.InternalSwap(&other->sectors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserThresholdParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdaptiveThresholdParam::_Internal {
 public:
};

AdaptiveThresholdParam::AdaptiveThresholdParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.AdaptiveThresholdParam)
}
AdaptiveThresholdParam::AdaptiveThresholdParam(const AdaptiveThresholdParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_count_, &from.average_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&average_count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.AdaptiveThresholdParam)
}

void AdaptiveThresholdParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&average_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&average_count_)) + sizeof(offset_));
}

AdaptiveThresholdParam::~AdaptiveThresholdParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.AdaptiveThresholdParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdaptiveThresholdParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdaptiveThresholdParam::ArenaDtor(void* object) {
  AdaptiveThresholdParam* _this = reinterpret_cast< AdaptiveThresholdParam* >(object);
  (void)_this;
}
void AdaptiveThresholdParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdaptiveThresholdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdaptiveThresholdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.AdaptiveThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&average_count_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdaptiveThresholdParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 average_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          average_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.AdaptiveThresholdParam.PartitionMode partition_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_partition_mode(static_cast<::zb::dcts::node::detection::AdaptiveThresholdParam_PartitionMode>(val));
        } else goto handle_unusual;
        continue;
      // float offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdaptiveThresholdParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.AdaptiveThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 average_count = 1;
  if (this->average_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_average_count(), target);
  }

  // .zb.dcts.node.detection.AdaptiveThresholdParam.PartitionMode partition_mode = 2;
  if (this->partition_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_partition_mode(), target);
  }

  // float offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.AdaptiveThresholdParam)
  return target;
}

size_t AdaptiveThresholdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.AdaptiveThresholdParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 average_count = 1;
  if (this->average_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_count());
  }

  // .zb.dcts.node.detection.AdaptiveThresholdParam.PartitionMode partition_mode = 2;
  if (this->partition_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_partition_mode());
  }

  // float offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdaptiveThresholdParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.AdaptiveThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AdaptiveThresholdParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdaptiveThresholdParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.AdaptiveThresholdParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.AdaptiveThresholdParam)
    MergeFrom(*source);
  }
}

void AdaptiveThresholdParam::MergeFrom(const AdaptiveThresholdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.AdaptiveThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.average_count() != 0) {
    _internal_set_average_count(from._internal_average_count());
  }
  if (from.partition_mode() != 0) {
    _internal_set_partition_mode(from._internal_partition_mode());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
}

void AdaptiveThresholdParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.AdaptiveThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaptiveThresholdParam::CopyFrom(const AdaptiveThresholdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.AdaptiveThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveThresholdParam::IsInitialized() const {
  return true;
}

void AdaptiveThresholdParam::InternalSwap(AdaptiveThresholdParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdaptiveThresholdParam, offset_)
      + sizeof(AdaptiveThresholdParam::offset_)
      - PROTOBUF_FIELD_OFFSET(AdaptiveThresholdParam, average_count_)>(
          reinterpret_cast<char*>(&average_count_),
          reinterpret_cast<char*>(&other->average_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdaptiveThresholdParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnergyDetectionParam::_Internal {
 public:
  static const ::zb::dcts::node::detection::HistoryThresholdParam& history_threshold(const EnergyDetectionParam* msg);
  static const ::zb::dcts::node::detection::UserThresholdParam& user_threshold(const EnergyDetectionParam* msg);
  static const ::zb::dcts::node::detection::AdaptiveThresholdParam& adaptive_threshold(const EnergyDetectionParam* msg);
};

const ::zb::dcts::node::detection::HistoryThresholdParam&
EnergyDetectionParam::_Internal::history_threshold(const EnergyDetectionParam* msg) {
  return *msg->history_threshold_;
}
const ::zb::dcts::node::detection::UserThresholdParam&
EnergyDetectionParam::_Internal::user_threshold(const EnergyDetectionParam* msg) {
  return *msg->user_threshold_;
}
const ::zb::dcts::node::detection::AdaptiveThresholdParam&
EnergyDetectionParam::_Internal::adaptive_threshold(const EnergyDetectionParam* msg) {
  return *msg->adaptive_threshold_;
}
EnergyDetectionParam::EnergyDetectionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  active_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.EnergyDetectionParam)
}
EnergyDetectionParam::EnergyDetectionParam(const EnergyDetectionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      active_types_(from.active_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_history_threshold()) {
    history_threshold_ = new ::zb::dcts::node::detection::HistoryThresholdParam(*from.history_threshold_);
  } else {
    history_threshold_ = nullptr;
  }
  if (from._internal_has_user_threshold()) {
    user_threshold_ = new ::zb::dcts::node::detection::UserThresholdParam(*from.user_threshold_);
  } else {
    user_threshold_ = nullptr;
  }
  if (from._internal_has_adaptive_threshold()) {
    adaptive_threshold_ = new ::zb::dcts::node::detection::AdaptiveThresholdParam(*from.adaptive_threshold_);
  } else {
    adaptive_threshold_ = nullptr;
  }
  logic_ = from.logic_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.EnergyDetectionParam)
}

void EnergyDetectionParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&history_threshold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logic_) -
    reinterpret_cast<char*>(&history_threshold_)) + sizeof(logic_));
}

EnergyDetectionParam::~EnergyDetectionParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.EnergyDetectionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnergyDetectionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete history_threshold_;
  if (this != internal_default_instance()) delete user_threshold_;
  if (this != internal_default_instance()) delete adaptive_threshold_;
}

void EnergyDetectionParam::ArenaDtor(void* object) {
  EnergyDetectionParam* _this = reinterpret_cast< EnergyDetectionParam* >(object);
  (void)_this;
}
void EnergyDetectionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnergyDetectionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnergyDetectionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.EnergyDetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_types_.Clear();
  if (GetArena() == nullptr && history_threshold_ != nullptr) {
    delete history_threshold_;
  }
  history_threshold_ = nullptr;
  if (GetArena() == nullptr && user_threshold_ != nullptr) {
    delete user_threshold_;
  }
  user_threshold_ = nullptr;
  if (GetArena() == nullptr && adaptive_threshold_ != nullptr) {
    delete adaptive_threshold_;
  }
  adaptive_threshold_ = nullptr;
  logic_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnergyDetectionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.detection.ThresholdType active_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_active_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_active_types(static_cast<::zb::dcts::node::detection::ThresholdType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.EnergyDetectionParam.LogicType logic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_logic(static_cast<::zb::dcts::node::detection::EnergyDetectionParam_LogicType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.HistoryThresholdParam history_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_history_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.UserThresholdParam user_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.AdaptiveThresholdParam adaptive_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_adaptive_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnergyDetectionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.EnergyDetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.ThresholdType active_types = 1;
  {
    int byte_size = _active_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, active_types_, byte_size, target);
    }
  }

  // .zb.dcts.node.detection.EnergyDetectionParam.LogicType logic = 3;
  if (this->logic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_logic(), target);
  }

  // .zb.dcts.node.detection.HistoryThresholdParam history_threshold = 5;
  if (this->has_history_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::history_threshold(this), target, stream);
  }

  // .zb.dcts.node.detection.UserThresholdParam user_threshold = 6;
  if (this->has_user_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::user_threshold(this), target, stream);
  }

  // .zb.dcts.node.detection.AdaptiveThresholdParam adaptive_threshold = 7;
  if (this->has_adaptive_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::adaptive_threshold(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.EnergyDetectionParam)
  return target;
}

size_t EnergyDetectionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.EnergyDetectionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.ThresholdType active_types = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_active_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_active_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _active_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.node.detection.HistoryThresholdParam history_threshold = 5;
  if (this->has_history_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *history_threshold_);
  }

  // .zb.dcts.node.detection.UserThresholdParam user_threshold = 6;
  if (this->has_user_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_threshold_);
  }

  // .zb.dcts.node.detection.AdaptiveThresholdParam adaptive_threshold = 7;
  if (this->has_adaptive_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adaptive_threshold_);
  }

  // .zb.dcts.node.detection.EnergyDetectionParam.LogicType logic = 3;
  if (this->logic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_logic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnergyDetectionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.EnergyDetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const EnergyDetectionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnergyDetectionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.EnergyDetectionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.EnergyDetectionParam)
    MergeFrom(*source);
  }
}

void EnergyDetectionParam::MergeFrom(const EnergyDetectionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.EnergyDetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_types_.MergeFrom(from.active_types_);
  if (from.has_history_threshold()) {
    _internal_mutable_history_threshold()->::zb::dcts::node::detection::HistoryThresholdParam::MergeFrom(from._internal_history_threshold());
  }
  if (from.has_user_threshold()) {
    _internal_mutable_user_threshold()->::zb::dcts::node::detection::UserThresholdParam::MergeFrom(from._internal_user_threshold());
  }
  if (from.has_adaptive_threshold()) {
    _internal_mutable_adaptive_threshold()->::zb::dcts::node::detection::AdaptiveThresholdParam::MergeFrom(from._internal_adaptive_threshold());
  }
  if (from.logic() != 0) {
    _internal_set_logic(from._internal_logic());
  }
}

void EnergyDetectionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.EnergyDetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergyDetectionParam::CopyFrom(const EnergyDetectionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.EnergyDetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergyDetectionParam::IsInitialized() const {
  return true;
}

void EnergyDetectionParam::InternalSwap(EnergyDetectionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  active_types_.InternalSwap(&other->active_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnergyDetectionParam, logic_)
      + sizeof(EnergyDetectionParam::logic_)
      - PROTOBUF_FIELD_OFFSET(EnergyDetectionParam, history_threshold_)>(
          reinterpret_cast<char*>(&history_threshold_),
          reinterpret_cast<char*>(&other->history_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnergyDetectionParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ThresholdRefLine::_Internal {
 public:
};

ThresholdRefLine::ThresholdRefLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  threshold_trace_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.ThresholdRefLine)
}
ThresholdRefLine::ThresholdRefLine(const ThresholdRefLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      threshold_trace_(from.threshold_trace_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.ThresholdRefLine)
}

void ThresholdRefLine::SharedCtor() {
type_ = 0;
}

ThresholdRefLine::~ThresholdRefLine() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.ThresholdRefLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThresholdRefLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThresholdRefLine::ArenaDtor(void* object) {
  ThresholdRefLine* _this = reinterpret_cast< ThresholdRefLine* >(object);
  (void)_this;
}
void ThresholdRefLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThresholdRefLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThresholdRefLine::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.ThresholdRefLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_trace_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThresholdRefLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.detection.ThresholdType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::node::detection::ThresholdType>(val));
        } else goto handle_unusual;
        continue;
      // repeated float threshold_trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_threshold_trace(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_threshold_trace(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThresholdRefLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.ThresholdRefLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.detection.ThresholdType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated float threshold_trace = 2;
  if (this->_internal_threshold_trace_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_threshold_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.ThresholdRefLine)
  return target;
}

size_t ThresholdRefLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.ThresholdRefLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float threshold_trace = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_threshold_trace_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _threshold_trace_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.node.detection.ThresholdType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThresholdRefLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.ThresholdRefLine)
  GOOGLE_DCHECK_NE(&from, this);
  const ThresholdRefLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThresholdRefLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.ThresholdRefLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.ThresholdRefLine)
    MergeFrom(*source);
  }
}

void ThresholdRefLine::MergeFrom(const ThresholdRefLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.ThresholdRefLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threshold_trace_.MergeFrom(from.threshold_trace_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ThresholdRefLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.ThresholdRefLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdRefLine::CopyFrom(const ThresholdRefLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.ThresholdRefLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdRefLine::IsInitialized() const {
  return true;
}

void ThresholdRefLine::InternalSwap(ThresholdRefLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  threshold_trace_.InternalSwap(&other->threshold_trace_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdRefLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalFeature::_Internal {
 public:
  static const ::zb::dcts::TimeSpan& time_span(const SignalFeature* msg);
  static const ::zb::dcts::node::spectrum::SignalBand& signal_band(const SignalFeature* msg);
  static const ::zb::dcts::StatisticVal& amplitude(const SignalFeature* msg);
  static const ::zb::dcts::StatisticVal& hits(const SignalFeature* msg);
};

const ::zb::dcts::TimeSpan&
SignalFeature::_Internal::time_span(const SignalFeature* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::node::spectrum::SignalBand&
SignalFeature::_Internal::signal_band(const SignalFeature* msg) {
  return *msg->signal_band_;
}
const ::zb::dcts::StatisticVal&
SignalFeature::_Internal::amplitude(const SignalFeature* msg) {
  return *msg->amplitude_;
}
const ::zb::dcts::StatisticVal&
SignalFeature::_Internal::hits(const SignalFeature* msg) {
  return *msg->hits_;
}
void SignalFeature::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void SignalFeature::clear_signal_band() {
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
}
void SignalFeature::clear_amplitude() {
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
}
void SignalFeature::clear_hits() {
  if (GetArena() == nullptr && hits_ != nullptr) {
    delete hits_;
  }
  hits_ = nullptr;
}
SignalFeature::SignalFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spectrum_detail_(arena),
  hits_detail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.SignalFeature)
}
SignalFeature::SignalFeature(const SignalFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spectrum_detail_(from.spectrum_detail_),
      hits_detail_(from.hits_detail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_signal_band()) {
    signal_band_ = new ::zb::dcts::node::spectrum::SignalBand(*from.signal_band_);
  } else {
    signal_band_ = nullptr;
  }
  if (from._internal_has_amplitude()) {
    amplitude_ = new ::zb::dcts::StatisticVal(*from.amplitude_);
  } else {
    amplitude_ = nullptr;
  }
  if (from._internal_has_hits()) {
    hits_ = new ::zb::dcts::StatisticVal(*from.hits_);
  } else {
    hits_ = nullptr;
  }
  num_sweep_ = from.num_sweep_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.SignalFeature)
}

void SignalFeature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_sweep_) -
    reinterpret_cast<char*>(&time_span_)) + sizeof(num_sweep_));
}

SignalFeature::~SignalFeature() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.SignalFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete signal_band_;
  if (this != internal_default_instance()) delete amplitude_;
  if (this != internal_default_instance()) delete hits_;
}

void SignalFeature::ArenaDtor(void* object) {
  SignalFeature* _this = reinterpret_cast< SignalFeature* >(object);
  (void)_this;
}
void SignalFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.SignalFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spectrum_detail_.Clear();
  hits_detail_.Clear();
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
  if (GetArena() == nullptr && hits_ != nullptr) {
    delete hits_;
  }
  hits_ = nullptr;
  num_sweep_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TimeSpan time_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.spectrum.SignalBand signal_band = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_sweep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_sweep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal amplitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_amplitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal hits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float spectrum_detail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spectrum_detail(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          _internal_add_spectrum_detail(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float hits_detail = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_hits_detail(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_hits_detail(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.SignalFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan time_span = 1;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.node.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal_band(this), target, stream);
  }

  // int32 num_sweep = 3;
  if (this->num_sweep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_sweep(), target);
  }

  // .zb.dcts.StatisticVal amplitude = 4;
  if (this->has_amplitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::amplitude(this), target, stream);
  }

  // .zb.dcts.StatisticVal hits = 5;
  if (this->has_hits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hits(this), target, stream);
  }

  // repeated float spectrum_detail = 8;
  if (this->_internal_spectrum_detail_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_spectrum_detail(), target);
  }

  // repeated float hits_detail = 9;
  if (this->_internal_hits_detail_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_hits_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.SignalFeature)
  return target;
}

size_t SignalFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.SignalFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float spectrum_detail = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spectrum_detail_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spectrum_detail_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float hits_detail = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_hits_detail_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hits_detail_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.TimeSpan time_span = 1;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.node.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_band_);
  }

  // .zb.dcts.StatisticVal amplitude = 4;
  if (this->has_amplitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amplitude_);
  }

  // .zb.dcts.StatisticVal hits = 5;
  if (this->has_hits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hits_);
  }

  // int32 num_sweep = 3;
  if (this->num_sweep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_sweep());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.SignalFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.SignalFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.SignalFeature)
    MergeFrom(*source);
  }
}

void SignalFeature::MergeFrom(const SignalFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.SignalFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spectrum_detail_.MergeFrom(from.spectrum_detail_);
  hits_detail_.MergeFrom(from.hits_detail_);
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_signal_band()) {
    _internal_mutable_signal_band()->::zb::dcts::node::spectrum::SignalBand::MergeFrom(from._internal_signal_band());
  }
  if (from.has_amplitude()) {
    _internal_mutable_amplitude()->::zb::dcts::StatisticVal::MergeFrom(from._internal_amplitude());
  }
  if (from.has_hits()) {
    _internal_mutable_hits()->::zb::dcts::StatisticVal::MergeFrom(from._internal_hits());
  }
  if (from.num_sweep() != 0) {
    _internal_set_num_sweep(from._internal_num_sweep());
  }
}

void SignalFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.SignalFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalFeature::CopyFrom(const SignalFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.SignalFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalFeature::IsInitialized() const {
  return true;
}

void SignalFeature::InternalSwap(SignalFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spectrum_detail_.InternalSwap(&other->spectrum_detail_);
  hits_detail_.InternalSwap(&other->hits_detail_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalFeature, num_sweep_)
      + sizeof(SignalFeature::num_sweep_)
      - PROTOBUF_FIELD_OFFSET(SignalFeature, time_span_)>(
          reinterpret_cast<char*>(&time_span_),
          reinterpret_cast<char*>(&other->time_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalSegment::_Internal {
 public:
  static const ::zb::dcts::StatisticVal& center_freq(const SignalSegment* msg);
  static const ::zb::dcts::StatisticVal& band_width(const SignalSegment* msg);
  static const ::zb::dcts::StatisticVal& amplitude(const SignalSegment* msg);
  static const ::zb::dcts::TimeSpan& time_span(const SignalSegment* msg);
};

const ::zb::dcts::StatisticVal&
SignalSegment::_Internal::center_freq(const SignalSegment* msg) {
  return *msg->center_freq_;
}
const ::zb::dcts::StatisticVal&
SignalSegment::_Internal::band_width(const SignalSegment* msg) {
  return *msg->band_width_;
}
const ::zb::dcts::StatisticVal&
SignalSegment::_Internal::amplitude(const SignalSegment* msg) {
  return *msg->amplitude_;
}
const ::zb::dcts::TimeSpan&
SignalSegment::_Internal::time_span(const SignalSegment* msg) {
  return *msg->time_span_;
}
void SignalSegment::clear_center_freq() {
  if (GetArena() == nullptr && center_freq_ != nullptr) {
    delete center_freq_;
  }
  center_freq_ = nullptr;
}
void SignalSegment::clear_band_width() {
  if (GetArena() == nullptr && band_width_ != nullptr) {
    delete band_width_;
  }
  band_width_ = nullptr;
}
void SignalSegment::clear_amplitude() {
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
}
void SignalSegment::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
SignalSegment::SignalSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feature_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.SignalSegment)
}
SignalSegment::SignalSegment(const SignalSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  if (from._internal_has_center_freq()) {
    center_freq_ = new ::zb::dcts::StatisticVal(*from.center_freq_);
  } else {
    center_freq_ = nullptr;
  }
  if (from._internal_has_band_width()) {
    band_width_ = new ::zb::dcts::StatisticVal(*from.band_width_);
  } else {
    band_width_ = nullptr;
  }
  if (from._internal_has_amplitude()) {
    amplitude_ = new ::zb::dcts::StatisticVal(*from.amplitude_);
  } else {
    amplitude_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  ::memcpy(&segment_seq_, &from.segment_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_hits_) -
    reinterpret_cast<char*>(&segment_seq_)) + sizeof(total_hits_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.SignalSegment)
}

void SignalSegment::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_freq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_hits_) -
    reinterpret_cast<char*>(&center_freq_)) + sizeof(total_hits_));
}

SignalSegment::~SignalSegment() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.SignalSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_freq_;
  if (this != internal_default_instance()) delete band_width_;
  if (this != internal_default_instance()) delete amplitude_;
  if (this != internal_default_instance()) delete time_span_;
}

void SignalSegment::ArenaDtor(void* object) {
  SignalSegment* _this = reinterpret_cast< SignalSegment* >(object);
  (void)_this;
}
void SignalSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.SignalSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  id_.ClearToEmpty();
  if (GetArena() == nullptr && center_freq_ != nullptr) {
    delete center_freq_;
  }
  center_freq_ = nullptr;
  if (GetArena() == nullptr && band_width_ != nullptr) {
    delete band_width_;
  }
  band_width_ = nullptr;
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  ::memset(&segment_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_hits_) -
      reinterpret_cast<char*>(&segment_seq_)) + sizeof(total_hits_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.detection.SignalSegment.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 segment_seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          segment_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal center_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_freq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal band_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal amplitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_amplitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_sweep = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_sweep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_hits = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.detection.SignalFeature feature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.SignalSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.detection.SignalSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 segment_seq = 2;
  if (this->segment_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_segment_seq(), target);
  }

  // .zb.dcts.StatisticVal center_freq = 3;
  if (this->has_center_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::center_freq(this), target, stream);
  }

  // .zb.dcts.StatisticVal band_width = 4;
  if (this->has_band_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::band_width(this), target, stream);
  }

  // .zb.dcts.StatisticVal amplitude = 5;
  if (this->has_amplitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::amplitude(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 6;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::time_span(this), target, stream);
  }

  // int32 total_sweep = 7;
  if (this->total_sweep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_sweep(), target);
  }

  // int32 total_hits = 8;
  if (this->total_hits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_total_hits(), target);
  }

  // repeated .zb.dcts.node.detection.SignalFeature feature = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_feature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.SignalSegment)
  return target;
}

size_t SignalSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.SignalSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.SignalFeature feature = 9;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .zb.dcts.StatisticVal center_freq = 3;
  if (this->has_center_freq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_freq_);
  }

  // .zb.dcts.StatisticVal band_width = 4;
  if (this->has_band_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *band_width_);
  }

  // .zb.dcts.StatisticVal amplitude = 5;
  if (this->has_amplitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amplitude_);
  }

  // .zb.dcts.TimeSpan time_span = 6;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // int32 segment_seq = 2;
  if (this->segment_seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_segment_seq());
  }

  // int32 total_sweep = 7;
  if (this->total_sweep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_sweep());
  }

  // int32 total_hits = 8;
  if (this->total_hits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_hits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.SignalSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.SignalSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.SignalSegment)
    MergeFrom(*source);
  }
}

void SignalSegment::MergeFrom(const SignalSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.SignalSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_center_freq()) {
    _internal_mutable_center_freq()->::zb::dcts::StatisticVal::MergeFrom(from._internal_center_freq());
  }
  if (from.has_band_width()) {
    _internal_mutable_band_width()->::zb::dcts::StatisticVal::MergeFrom(from._internal_band_width());
  }
  if (from.has_amplitude()) {
    _internal_mutable_amplitude()->::zb::dcts::StatisticVal::MergeFrom(from._internal_amplitude());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.segment_seq() != 0) {
    _internal_set_segment_seq(from._internal_segment_seq());
  }
  if (from.total_sweep() != 0) {
    _internal_set_total_sweep(from._internal_total_sweep());
  }
  if (from.total_hits() != 0) {
    _internal_set_total_hits(from._internal_total_hits());
  }
}

void SignalSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.SignalSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSegment::CopyFrom(const SignalSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.SignalSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSegment::IsInitialized() const {
  return true;
}

void SignalSegment::InternalSwap(SignalSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalSegment, total_hits_)
      + sizeof(SignalSegment::total_hits_)
      - PROTOBUF_FIELD_OFFSET(SignalSegment, center_freq_)>(
          reinterpret_cast<char*>(&center_freq_),
          reinterpret_cast<char*>(&other->center_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HitsSegmentation::_Internal {
 public:
  static const ::zb::dcts::DRange& bandwidth_range(const HitsSegmentation* msg);
};

const ::zb::dcts::DRange&
HitsSegmentation::_Internal::bandwidth_range(const HitsSegmentation* msg) {
  return *msg->bandwidth_range_;
}
void HitsSegmentation::clear_hits_prob() {
  hits_prob_.Clear();
}
void HitsSegmentation::clear_bandwidth_range() {
  if (GetArena() == nullptr && bandwidth_range_ != nullptr) {
    delete bandwidth_range_;
  }
  bandwidth_range_ = nullptr;
}
HitsSegmentation::HitsSegmentation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hits_prob_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.HitsSegmentation)
}
HitsSegmentation::HitsSegmentation(const HitsSegmentation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hits_prob_(from.hits_prob_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bandwidth_range()) {
    bandwidth_range_ = new ::zb::dcts::DRange(*from.bandwidth_range_);
  } else {
    bandwidth_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.HitsSegmentation)
}

void HitsSegmentation::SharedCtor() {
bandwidth_range_ = nullptr;
}

HitsSegmentation::~HitsSegmentation() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.HitsSegmentation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HitsSegmentation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bandwidth_range_;
}

void HitsSegmentation::ArenaDtor(void* object) {
  HitsSegmentation* _this = reinterpret_cast< HitsSegmentation* >(object);
  (void)_this;
}
void HitsSegmentation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitsSegmentation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HitsSegmentation::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.HitsSegmentation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_prob_.Clear();
  if (GetArena() == nullptr && bandwidth_range_ != nullptr) {
    delete bandwidth_range_;
  }
  bandwidth_range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitsSegmentation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.DRange hits_prob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits_prob(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.DRange bandwidth_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bandwidth_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HitsSegmentation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.HitsSegmentation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.DRange hits_prob = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_prob_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hits_prob(i), target, stream);
  }

  // .zb.dcts.DRange bandwidth_range = 2;
  if (this->has_bandwidth_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bandwidth_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.HitsSegmentation)
  return target;
}

size_t HitsSegmentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.HitsSegmentation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.DRange hits_prob = 1;
  total_size += 1UL * this->_internal_hits_prob_size();
  for (const auto& msg : this->hits_prob_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.DRange bandwidth_range = 2;
  if (this->has_bandwidth_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bandwidth_range_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HitsSegmentation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.HitsSegmentation)
  GOOGLE_DCHECK_NE(&from, this);
  const HitsSegmentation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HitsSegmentation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.HitsSegmentation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.HitsSegmentation)
    MergeFrom(*source);
  }
}

void HitsSegmentation::MergeFrom(const HitsSegmentation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.HitsSegmentation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_prob_.MergeFrom(from.hits_prob_);
  if (from.has_bandwidth_range()) {
    _internal_mutable_bandwidth_range()->::zb::dcts::DRange::MergeFrom(from._internal_bandwidth_range());
  }
}

void HitsSegmentation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.HitsSegmentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitsSegmentation::CopyFrom(const HitsSegmentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.HitsSegmentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitsSegmentation::IsInitialized() const {
  return true;
}

void HitsSegmentation::InternalSwap(HitsSegmentation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hits_prob_.InternalSwap(&other->hits_prob_);
  swap(bandwidth_range_, other->bandwidth_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HitsSegmentation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SegmentationParam::_Internal {
 public:
  static const ::zb::dcts::node::detection::HitsSegmentation& hits_param(const SegmentationParam* msg);
};

const ::zb::dcts::node::detection::HitsSegmentation&
SegmentationParam::_Internal::hits_param(const SegmentationParam* msg) {
  return *msg->hits_param_;
}
SegmentationParam::SegmentationParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.SegmentationParam)
}
SegmentationParam::SegmentationParam(const SegmentationParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hits_param()) {
    hits_param_ = new ::zb::dcts::node::detection::HitsSegmentation(*from.hits_param_);
  } else {
    hits_param_ = nullptr;
  }
  ::memcpy(&enable_filters_, &from.enable_filters_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_overlap_) -
    reinterpret_cast<char*>(&enable_filters_)) + sizeof(num_overlap_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.SegmentationParam)
}

void SegmentationParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hits_param_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_overlap_) -
    reinterpret_cast<char*>(&hits_param_)) + sizeof(num_overlap_));
}

SegmentationParam::~SegmentationParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.SegmentationParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentationParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hits_param_;
}

void SegmentationParam::ArenaDtor(void* object) {
  SegmentationParam* _this = reinterpret_cast< SegmentationParam* >(object);
  (void)_this;
}
void SegmentationParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentationParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SegmentationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.SegmentationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hits_param_ != nullptr) {
    delete hits_param_;
  }
  hits_param_ = nullptr;
  ::memset(&enable_filters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_overlap_) -
      reinterpret_cast<char*>(&enable_filters_)) + sizeof(num_overlap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentationParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 enable_filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_filters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_overlap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.HitsSegmentation hits_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hits_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentationParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.SegmentationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 enable_filters = 1;
  if (this->enable_filters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_enable_filters(), target);
  }

  // int32 num_overlap = 2;
  if (this->num_overlap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_overlap(), target);
  }

  // .zb.dcts.node.detection.HitsSegmentation hits_param = 3;
  if (this->has_hits_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hits_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.SegmentationParam)
  return target;
}

size_t SegmentationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.SegmentationParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.detection.HitsSegmentation hits_param = 3;
  if (this->has_hits_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hits_param_);
  }

  // uint32 enable_filters = 1;
  if (this->enable_filters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enable_filters());
  }

  // int32 num_overlap = 2;
  if (this->num_overlap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_overlap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentationParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.SegmentationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentationParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentationParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.SegmentationParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.SegmentationParam)
    MergeFrom(*source);
  }
}

void SegmentationParam::MergeFrom(const SegmentationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.SegmentationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hits_param()) {
    _internal_mutable_hits_param()->::zb::dcts::node::detection::HitsSegmentation::MergeFrom(from._internal_hits_param());
  }
  if (from.enable_filters() != 0) {
    _internal_set_enable_filters(from._internal_enable_filters());
  }
  if (from.num_overlap() != 0) {
    _internal_set_num_overlap(from._internal_num_overlap());
  }
}

void SegmentationParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.SegmentationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationParam::CopyFrom(const SegmentationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.SegmentationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationParam::IsInitialized() const {
  return true;
}

void SegmentationParam::InternalSwap(SegmentationParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentationParam, num_overlap_)
      + sizeof(SegmentationParam::num_overlap_)
      - PROTOBUF_FIELD_OFFSET(SegmentationParam, hits_param_)>(
          reinterpret_cast<char*>(&hits_param_),
          reinterpret_cast<char*>(&other->hits_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentationParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpectrumIntersection::_Internal {
 public:
};

SpectrumIntersection::SpectrumIntersection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.SpectrumIntersection)
}
SpectrumIntersection::SpectrumIntersection(const SpectrumIntersection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_intersection_ratio_, &from.min_intersection_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_time_gap_) -
    reinterpret_cast<char*>(&min_intersection_ratio_)) + sizeof(max_time_gap_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.SpectrumIntersection)
}

void SpectrumIntersection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_intersection_ratio_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_time_gap_) -
    reinterpret_cast<char*>(&min_intersection_ratio_)) + sizeof(max_time_gap_));
}

SpectrumIntersection::~SpectrumIntersection() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.SpectrumIntersection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpectrumIntersection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpectrumIntersection::ArenaDtor(void* object) {
  SpectrumIntersection* _this = reinterpret_cast< SpectrumIntersection* >(object);
  (void)_this;
}
void SpectrumIntersection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpectrumIntersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpectrumIntersection::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.SpectrumIntersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_intersection_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_time_gap_) -
      reinterpret_cast<char*>(&min_intersection_ratio_)) + sizeof(max_time_gap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpectrumIntersection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min_intersection_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_intersection_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 max_time_gap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_time_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpectrumIntersection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.SpectrumIntersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_intersection_ratio = 1;
  if (!(this->min_intersection_ratio() <= 0 && this->min_intersection_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_intersection_ratio(), target);
  }

  // int32 max_time_gap = 2;
  if (this->max_time_gap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_time_gap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.SpectrumIntersection)
  return target;
}

size_t SpectrumIntersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.SpectrumIntersection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min_intersection_ratio = 1;
  if (!(this->min_intersection_ratio() <= 0 && this->min_intersection_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 max_time_gap = 2;
  if (this->max_time_gap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_time_gap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectrumIntersection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.SpectrumIntersection)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectrumIntersection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpectrumIntersection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.SpectrumIntersection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.SpectrumIntersection)
    MergeFrom(*source);
  }
}

void SpectrumIntersection::MergeFrom(const SpectrumIntersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.SpectrumIntersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min_intersection_ratio() <= 0 && from.min_intersection_ratio() >= 0)) {
    _internal_set_min_intersection_ratio(from._internal_min_intersection_ratio());
  }
  if (from.max_time_gap() != 0) {
    _internal_set_max_time_gap(from._internal_max_time_gap());
  }
}

void SpectrumIntersection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.SpectrumIntersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrumIntersection::CopyFrom(const SpectrumIntersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.SpectrumIntersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrumIntersection::IsInitialized() const {
  return true;
}

void SpectrumIntersection::InternalSwap(SpectrumIntersection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpectrumIntersection, max_time_gap_)
      + sizeof(SpectrumIntersection::max_time_gap_)
      - PROTOBUF_FIELD_OFFSET(SpectrumIntersection, min_intersection_ratio_)>(
          reinterpret_cast<char*>(&min_intersection_ratio_),
          reinterpret_cast<char*>(&other->min_intersection_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpectrumIntersection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MergeParam::_Internal {
 public:
  static const ::zb::dcts::node::detection::SpectrumIntersection& feature_merge_param(const MergeParam* msg);
  static const ::zb::dcts::node::detection::SpectrumIntersection& signal_merge_param(const MergeParam* msg);
};

const ::zb::dcts::node::detection::SpectrumIntersection&
MergeParam::_Internal::feature_merge_param(const MergeParam* msg) {
  return *msg->feature_merge_param_;
}
const ::zb::dcts::node::detection::SpectrumIntersection&
MergeParam::_Internal::signal_merge_param(const MergeParam* msg) {
  return *msg->signal_merge_param_;
}
MergeParam::MergeParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.MergeParam)
}
MergeParam::MergeParam(const MergeParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_feature_merge_param()) {
    feature_merge_param_ = new ::zb::dcts::node::detection::SpectrumIntersection(*from.feature_merge_param_);
  } else {
    feature_merge_param_ = nullptr;
  }
  if (from._internal_has_signal_merge_param()) {
    signal_merge_param_ = new ::zb::dcts::node::detection::SpectrumIntersection(*from.signal_merge_param_);
  } else {
    signal_merge_param_ = nullptr;
  }
  policy_ = from.policy_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.MergeParam)
}

void MergeParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feature_merge_param_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&policy_) -
    reinterpret_cast<char*>(&feature_merge_param_)) + sizeof(policy_));
}

MergeParam::~MergeParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.MergeParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MergeParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete feature_merge_param_;
  if (this != internal_default_instance()) delete signal_merge_param_;
}

void MergeParam::ArenaDtor(void* object) {
  MergeParam* _this = reinterpret_cast< MergeParam* >(object);
  (void)_this;
}
void MergeParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.MergeParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && feature_merge_param_ != nullptr) {
    delete feature_merge_param_;
  }
  feature_merge_param_ = nullptr;
  if (GetArena() == nullptr && signal_merge_param_ != nullptr) {
    delete signal_merge_param_;
  }
  signal_merge_param_ = nullptr;
  policy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.detection.MergePolicy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_policy(static_cast<::zb::dcts::node::detection::MergePolicy>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.SpectrumIntersection feature_merge_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_merge_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.SpectrumIntersection signal_merge_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_merge_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.MergeParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.detection.MergePolicy policy = 1;
  if (this->policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_policy(), target);
  }

  // .zb.dcts.node.detection.SpectrumIntersection feature_merge_param = 3;
  if (this->has_feature_merge_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::feature_merge_param(this), target, stream);
  }

  // .zb.dcts.node.detection.SpectrumIntersection signal_merge_param = 4;
  if (this->has_signal_merge_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::signal_merge_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.MergeParam)
  return target;
}

size_t MergeParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.MergeParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.detection.SpectrumIntersection feature_merge_param = 3;
  if (this->has_feature_merge_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feature_merge_param_);
  }

  // .zb.dcts.node.detection.SpectrumIntersection signal_merge_param = 4;
  if (this->has_signal_merge_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_merge_param_);
  }

  // .zb.dcts.node.detection.MergePolicy policy = 1;
  if (this->policy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_policy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.MergeParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.MergeParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.MergeParam)
    MergeFrom(*source);
  }
}

void MergeParam::MergeFrom(const MergeParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.MergeParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_feature_merge_param()) {
    _internal_mutable_feature_merge_param()->::zb::dcts::node::detection::SpectrumIntersection::MergeFrom(from._internal_feature_merge_param());
  }
  if (from.has_signal_merge_param()) {
    _internal_mutable_signal_merge_param()->::zb::dcts::node::detection::SpectrumIntersection::MergeFrom(from._internal_signal_merge_param());
  }
  if (from.policy() != 0) {
    _internal_set_policy(from._internal_policy());
  }
}

void MergeParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.MergeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeParam::CopyFrom(const MergeParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.MergeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeParam::IsInitialized() const {
  return true;
}

void MergeParam::InternalSwap(MergeParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeParam, policy_)
      + sizeof(MergeParam::policy_)
      - PROTOBUF_FIELD_OFFSET(MergeParam, feature_merge_param_)>(
          reinterpret_cast<char*>(&feature_merge_param_),
          reinterpret_cast<char*>(&other->feature_merge_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetectionOption::_Internal {
 public:
  static const ::zb::dcts::Boolean& clear_signal_lib_history(const DetectionOption* msg);
  static const ::zb::dcts::Integer& commit_result_period(const DetectionOption* msg);
};

const ::zb::dcts::Boolean&
DetectionOption::_Internal::clear_signal_lib_history(const DetectionOption* msg) {
  return *msg->clear_signal_lib_history_;
}
const ::zb::dcts::Integer&
DetectionOption::_Internal::commit_result_period(const DetectionOption* msg) {
  return *msg->commit_result_period_;
}
void DetectionOption::clear_clear_signal_lib_history() {
  if (GetArena() == nullptr && clear_signal_lib_history_ != nullptr) {
    delete clear_signal_lib_history_;
  }
  clear_signal_lib_history_ = nullptr;
}
void DetectionOption::clear_commit_result_period() {
  if (GetArena() == nullptr && commit_result_period_ != nullptr) {
    delete commit_result_period_;
  }
  commit_result_period_ = nullptr;
}
DetectionOption::DetectionOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.DetectionOption)
}
DetectionOption::DetectionOption(const DetectionOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clear_signal_lib_history()) {
    clear_signal_lib_history_ = new ::zb::dcts::Boolean(*from.clear_signal_lib_history_);
  } else {
    clear_signal_lib_history_ = nullptr;
  }
  if (from._internal_has_commit_result_period()) {
    commit_result_period_ = new ::zb::dcts::Integer(*from.commit_result_period_);
  } else {
    commit_result_period_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.DetectionOption)
}

void DetectionOption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clear_signal_lib_history_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&commit_result_period_) -
    reinterpret_cast<char*>(&clear_signal_lib_history_)) + sizeof(commit_result_period_));
}

DetectionOption::~DetectionOption() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.DetectionOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetectionOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete clear_signal_lib_history_;
  if (this != internal_default_instance()) delete commit_result_period_;
}

void DetectionOption::ArenaDtor(void* object) {
  DetectionOption* _this = reinterpret_cast< DetectionOption* >(object);
  (void)_this;
}
void DetectionOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectionOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectionOption::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.DetectionOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && clear_signal_lib_history_ != nullptr) {
    delete clear_signal_lib_history_;
  }
  clear_signal_lib_history_ = nullptr;
  if (GetArena() == nullptr && commit_result_period_ != nullptr) {
    delete commit_result_period_;
  }
  commit_result_period_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.Boolean clear_signal_lib_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_signal_lib_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Integer commit_result_period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_result_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.DetectionOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.Boolean clear_signal_lib_history = 1;
  if (this->has_clear_signal_lib_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::clear_signal_lib_history(this), target, stream);
  }

  // .zb.dcts.Integer commit_result_period = 3;
  if (this->has_commit_result_period()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::commit_result_period(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.DetectionOption)
  return target;
}

size_t DetectionOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.DetectionOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.Boolean clear_signal_lib_history = 1;
  if (this->has_clear_signal_lib_history()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clear_signal_lib_history_);
  }

  // .zb.dcts.Integer commit_result_period = 3;
  if (this->has_commit_result_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_result_period_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.DetectionOption)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.DetectionOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.DetectionOption)
    MergeFrom(*source);
  }
}

void DetectionOption::MergeFrom(const DetectionOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.DetectionOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clear_signal_lib_history()) {
    _internal_mutable_clear_signal_lib_history()->::zb::dcts::Boolean::MergeFrom(from._internal_clear_signal_lib_history());
  }
  if (from.has_commit_result_period()) {
    _internal_mutable_commit_result_period()->::zb::dcts::Integer::MergeFrom(from._internal_commit_result_period());
  }
}

void DetectionOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.DetectionOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionOption::CopyFrom(const DetectionOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.DetectionOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionOption::IsInitialized() const {
  return true;
}

void DetectionOption::InternalSwap(DetectionOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionOption, commit_result_period_)
      + sizeof(DetectionOption::commit_result_period_)
      - PROTOBUF_FIELD_OFFSET(DetectionOption, clear_signal_lib_history_)>(
          reinterpret_cast<char*>(&clear_signal_lib_history_),
          reinterpret_cast<char*>(&other->clear_signal_lib_history_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetectionParam::_Internal {
 public:
  static const ::zb::dcts::node::detection::EnergyDetectionParam& energy_detect_param(const DetectionParam* msg);
  static const ::zb::dcts::node::detection::SegmentationParam& segmentation_param(const DetectionParam* msg);
  static const ::zb::dcts::node::detection::MergeParam& merge_param(const DetectionParam* msg);
  static const ::zb::dcts::node::detection::DetectionOption& options(const DetectionParam* msg);
};

const ::zb::dcts::node::detection::EnergyDetectionParam&
DetectionParam::_Internal::energy_detect_param(const DetectionParam* msg) {
  return *msg->energy_detect_param_;
}
const ::zb::dcts::node::detection::SegmentationParam&
DetectionParam::_Internal::segmentation_param(const DetectionParam* msg) {
  return *msg->segmentation_param_;
}
const ::zb::dcts::node::detection::MergeParam&
DetectionParam::_Internal::merge_param(const DetectionParam* msg) {
  return *msg->merge_param_;
}
const ::zb::dcts::node::detection::DetectionOption&
DetectionParam::_Internal::options(const DetectionParam* msg) {
  return *msg->options_;
}
DetectionParam::DetectionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.DetectionParam)
}
DetectionParam::DetectionParam(const DetectionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_energy_detect_param()) {
    energy_detect_param_ = new ::zb::dcts::node::detection::EnergyDetectionParam(*from.energy_detect_param_);
  } else {
    energy_detect_param_ = nullptr;
  }
  if (from._internal_has_segmentation_param()) {
    segmentation_param_ = new ::zb::dcts::node::detection::SegmentationParam(*from.segmentation_param_);
  } else {
    segmentation_param_ = nullptr;
  }
  if (from._internal_has_merge_param()) {
    merge_param_ = new ::zb::dcts::node::detection::MergeParam(*from.merge_param_);
  } else {
    merge_param_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::zb::dcts::node::detection::DetectionOption(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.DetectionParam)
}

void DetectionParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&energy_detect_param_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&energy_detect_param_)) + sizeof(options_));
}

DetectionParam::~DetectionParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.DetectionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetectionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete energy_detect_param_;
  if (this != internal_default_instance()) delete segmentation_param_;
  if (this != internal_default_instance()) delete merge_param_;
  if (this != internal_default_instance()) delete options_;
}

void DetectionParam::ArenaDtor(void* object) {
  DetectionParam* _this = reinterpret_cast< DetectionParam* >(object);
  (void)_this;
}
void DetectionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.DetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && energy_detect_param_ != nullptr) {
    delete energy_detect_param_;
  }
  energy_detect_param_ = nullptr;
  if (GetArena() == nullptr && segmentation_param_ != nullptr) {
    delete segmentation_param_;
  }
  segmentation_param_ = nullptr;
  if (GetArena() == nullptr && merge_param_ != nullptr) {
    delete merge_param_;
  }
  merge_param_ = nullptr;
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.detection.EnergyDetectionParam energy_detect_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_energy_detect_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.SegmentationParam segmentation_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_segmentation_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.MergeParam merge_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.DetectionOption options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.DetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.detection.EnergyDetectionParam energy_detect_param = 1;
  if (this->has_energy_detect_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::energy_detect_param(this), target, stream);
  }

  // .zb.dcts.node.detection.SegmentationParam segmentation_param = 3;
  if (this->has_segmentation_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::segmentation_param(this), target, stream);
  }

  // .zb.dcts.node.detection.MergeParam merge_param = 4;
  if (this->has_merge_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::merge_param(this), target, stream);
  }

  // .zb.dcts.node.detection.DetectionOption options = 5;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.DetectionParam)
  return target;
}

size_t DetectionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.DetectionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.detection.EnergyDetectionParam energy_detect_param = 1;
  if (this->has_energy_detect_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *energy_detect_param_);
  }

  // .zb.dcts.node.detection.SegmentationParam segmentation_param = 3;
  if (this->has_segmentation_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segmentation_param_);
  }

  // .zb.dcts.node.detection.MergeParam merge_param = 4;
  if (this->has_merge_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *merge_param_);
  }

  // .zb.dcts.node.detection.DetectionOption options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.DetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.DetectionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.DetectionParam)
    MergeFrom(*source);
  }
}

void DetectionParam::MergeFrom(const DetectionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.DetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_energy_detect_param()) {
    _internal_mutable_energy_detect_param()->::zb::dcts::node::detection::EnergyDetectionParam::MergeFrom(from._internal_energy_detect_param());
  }
  if (from.has_segmentation_param()) {
    _internal_mutable_segmentation_param()->::zb::dcts::node::detection::SegmentationParam::MergeFrom(from._internal_segmentation_param());
  }
  if (from.has_merge_param()) {
    _internal_mutable_merge_param()->::zb::dcts::node::detection::MergeParam::MergeFrom(from._internal_merge_param());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::zb::dcts::node::detection::DetectionOption::MergeFrom(from._internal_options());
  }
}

void DetectionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.DetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionParam::CopyFrom(const DetectionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.DetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionParam::IsInitialized() const {
  return true;
}

void DetectionParam::InternalSwap(DetectionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionParam, options_)
      + sizeof(DetectionParam::options_)
      - PROTOBUF_FIELD_OFFSET(DetectionParam, energy_detect_param_)>(
          reinterpret_cast<char*>(&energy_detect_param_),
          reinterpret_cast<char*>(&other->energy_detect_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalList::_Internal {
 public:
};

SignalList::SignalList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detected_signals_(arena),
  merged_signal_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.SignalList)
}
SignalList::SignalList(const SignalList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detected_signals_(from.detected_signals_),
      merged_signal_id_(from.merged_signal_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.SignalList)
}

void SignalList::SharedCtor() {
}

SignalList::~SignalList() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.SignalList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignalList::ArenaDtor(void* object) {
  SignalList* _this = reinterpret_cast< SignalList* >(object);
  (void)_this;
}
void SignalList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalList::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.SignalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detected_signals_.Clear();
  merged_signal_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.detection.SignalSegment detected_signals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detected_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string merged_signal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_merged_signal_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.detection.SignalList.merged_signal_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.SignalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.SignalSegment detected_signals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detected_signals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_detected_signals(i), target, stream);
  }

  // repeated string merged_signal_id = 2;
  for (int i = 0, n = this->_internal_merged_signal_id_size(); i < n; i++) {
    const auto& s = this->_internal_merged_signal_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.detection.SignalList.merged_signal_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.SignalList)
  return target;
}

size_t SignalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.SignalList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.detection.SignalSegment detected_signals = 1;
  total_size += 1UL * this->_internal_detected_signals_size();
  for (const auto& msg : this->detected_signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string merged_signal_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(merged_signal_id_.size());
  for (int i = 0, n = merged_signal_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      merged_signal_id_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.SignalList)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.SignalList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.SignalList)
    MergeFrom(*source);
  }
}

void SignalList::MergeFrom(const SignalList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.SignalList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detected_signals_.MergeFrom(from.detected_signals_);
  merged_signal_id_.MergeFrom(from.merged_signal_id_);
}

void SignalList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.SignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalList::CopyFrom(const SignalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.SignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalList::IsInitialized() const {
  return true;
}

void SignalList::InternalSwap(SignalList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detected_signals_.InternalSwap(&other->detected_signals_);
  merged_signal_id_.InternalSwap(&other->merged_signal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetectionRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const DetectionRequest* msg);
  static const ::zb::dcts::node::detection::DetectionParam& detection_param(const DetectionRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
DetectionRequest::_Internal::task_account(const DetectionRequest* msg) {
  return *msg->task_account_;
}
const ::zb::dcts::node::detection::DetectionParam&
DetectionRequest::_Internal::detection_param(const DetectionRequest* msg) {
  return *msg->detection_param_;
}
void DetectionRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
DetectionRequest::DetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.DetectionRequest)
}
DetectionRequest::DetectionRequest(const DetectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  if (from._internal_has_detection_param()) {
    detection_param_ = new ::zb::dcts::node::detection::DetectionParam(*from.detection_param_);
  } else {
    detection_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.DetectionRequest)
}

void DetectionRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&detection_param_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(detection_param_));
}

DetectionRequest::~DetectionRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.DetectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
  if (this != internal_default_instance()) delete detection_param_;
}

void DetectionRequest::ArenaDtor(void* object) {
  DetectionRequest* _this = reinterpret_cast< DetectionRequest* >(object);
  (void)_this;
}
void DetectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.DetectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.DetectionParam detection_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.DetectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // .zb.dcts.node.detection.DetectionParam detection_param = 2;
  if (this->has_detection_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::detection_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.DetectionRequest)
  return target;
}

size_t DetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.DetectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // .zb.dcts.node.detection.DetectionParam detection_param = 2;
  if (this->has_detection_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.DetectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.DetectionRequest)
    MergeFrom(*source);
  }
}

void DetectionRequest::MergeFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.has_detection_param()) {
    _internal_mutable_detection_param()->::zb::dcts::node::detection::DetectionParam::MergeFrom(from._internal_detection_param());
  }
}

void DetectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionRequest::CopyFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionRequest::IsInitialized() const {
  return true;
}

void DetectionRequest::InternalSwap(DetectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionRequest, detection_param_)
      + sizeof(DetectionRequest::detection_param_)
      - PROTOBUF_FIELD_OFFSET(DetectionRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetailKeeping::_Internal {
 public:
};

DetailKeeping::DetailKeeping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signal_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.DetailKeeping)
}
DetailKeeping::DetailKeeping(const DetailKeeping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signal_id_(from.signal_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keeping_ = from.keeping_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.DetailKeeping)
}

void DetailKeeping::SharedCtor() {
keeping_ = false;
}

DetailKeeping::~DetailKeeping() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.DetailKeeping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailKeeping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DetailKeeping::ArenaDtor(void* object) {
  DetailKeeping* _this = reinterpret_cast< DetailKeeping* >(object);
  (void)_this;
}
void DetailKeeping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailKeeping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetailKeeping::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.DetailKeeping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_id_.Clear();
  keeping_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailKeeping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string signal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signal_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.detection.DetailKeeping.signal_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool keeping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          keeping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailKeeping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.DetailKeeping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string signal_id = 1;
  for (int i = 0, n = this->_internal_signal_id_size(); i < n; i++) {
    const auto& s = this->_internal_signal_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.detection.DetailKeeping.signal_id");
    target = stream->WriteString(1, s, target);
  }

  // bool keeping = 2;
  if (this->keeping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_keeping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.DetailKeeping)
  return target;
}

size_t DetailKeeping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.DetailKeeping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string signal_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signal_id_.size());
  for (int i = 0, n = signal_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      signal_id_.Get(i));
  }

  // bool keeping = 2;
  if (this->keeping() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailKeeping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.DetailKeeping)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailKeeping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailKeeping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.DetailKeeping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.DetailKeeping)
    MergeFrom(*source);
  }
}

void DetailKeeping::MergeFrom(const DetailKeeping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.DetailKeeping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_id_.MergeFrom(from.signal_id_);
  if (from.keeping() != 0) {
    _internal_set_keeping(from._internal_keeping());
  }
}

void DetailKeeping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.DetailKeeping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailKeeping::CopyFrom(const DetailKeeping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.DetailKeeping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailKeeping::IsInitialized() const {
  return true;
}

void DetailKeeping::InternalSwap(DetailKeeping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signal_id_.InternalSwap(&other->signal_id_);
  swap(keeping_, other->keeping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailKeeping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetailKeepingRequest::_Internal {
 public:
  static const ::zb::dcts::node::TaskAccount& task_account(const DetailKeepingRequest* msg);
  static const ::zb::dcts::node::detection::DetailKeeping& detail_keeping(const DetailKeepingRequest* msg);
};

const ::zb::dcts::node::TaskAccount&
DetailKeepingRequest::_Internal::task_account(const DetailKeepingRequest* msg) {
  return *msg->task_account_;
}
const ::zb::dcts::node::detection::DetailKeeping&
DetailKeepingRequest::_Internal::detail_keeping(const DetailKeepingRequest* msg) {
  return *msg->detail_keeping_;
}
void DetailKeepingRequest::clear_task_account() {
  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
}
DetailKeepingRequest::DetailKeepingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.detection.DetailKeepingRequest)
}
DetailKeepingRequest::DetailKeepingRequest(const DetailKeepingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_account()) {
    task_account_ = new ::zb::dcts::node::TaskAccount(*from.task_account_);
  } else {
    task_account_ = nullptr;
  }
  if (from._internal_has_detail_keeping()) {
    detail_keeping_ = new ::zb::dcts::node::detection::DetailKeeping(*from.detail_keeping_);
  } else {
    detail_keeping_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.detection.DetailKeepingRequest)
}

void DetailKeepingRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&detail_keeping_) -
    reinterpret_cast<char*>(&task_account_)) + sizeof(detail_keeping_));
}

DetailKeepingRequest::~DetailKeepingRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.detection.DetailKeepingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailKeepingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_account_;
  if (this != internal_default_instance()) delete detail_keeping_;
}

void DetailKeepingRequest::ArenaDtor(void* object) {
  DetailKeepingRequest* _this = reinterpret_cast< DetailKeepingRequest* >(object);
  (void)_this;
}
void DetailKeepingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailKeepingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetailKeepingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.detection.DetailKeepingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_account_ != nullptr) {
    delete task_account_;
  }
  task_account_ = nullptr;
  if (GetArena() == nullptr && detail_keeping_ != nullptr) {
    delete detail_keeping_;
  }
  detail_keeping_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailKeepingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.TaskAccount task_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.detection.DetailKeeping detail_keeping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail_keeping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailKeepingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.detection.DetailKeepingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_account(this), target, stream);
  }

  // .zb.dcts.node.detection.DetailKeeping detail_keeping = 2;
  if (this->has_detail_keeping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::detail_keeping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.detection.DetailKeepingRequest)
  return target;
}

size_t DetailKeepingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.detection.DetailKeepingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.TaskAccount task_account = 1;
  if (this->has_task_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_account_);
  }

  // .zb.dcts.node.detection.DetailKeeping detail_keeping = 2;
  if (this->has_detail_keeping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_keeping_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailKeepingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.detection.DetailKeepingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailKeepingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailKeepingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.detection.DetailKeepingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.detection.DetailKeepingRequest)
    MergeFrom(*source);
  }
}

void DetailKeepingRequest::MergeFrom(const DetailKeepingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.detection.DetailKeepingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_account()) {
    _internal_mutable_task_account()->::zb::dcts::node::TaskAccount::MergeFrom(from._internal_task_account());
  }
  if (from.has_detail_keeping()) {
    _internal_mutable_detail_keeping()->::zb::dcts::node::detection::DetailKeeping::MergeFrom(from._internal_detail_keeping());
  }
}

void DetailKeepingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.detection.DetailKeepingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailKeepingRequest::CopyFrom(const DetailKeepingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.detection.DetailKeepingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailKeepingRequest::IsInitialized() const {
  return true;
}

void DetailKeepingRequest::InternalSwap(DetailKeepingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailKeepingRequest, detail_keeping_)
      + sizeof(DetailKeepingRequest::detail_keeping_)
      - PROTOBUF_FIELD_OFFSET(DetailKeepingRequest, task_account_)>(
          reinterpret_cast<char*>(&task_account_),
          reinterpret_cast<char*>(&other->task_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailKeepingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace detection
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::ThresholdSector* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::ThresholdSector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::ThresholdSector >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::HistoryThresholdParam* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::HistoryThresholdParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::HistoryThresholdParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::UserThresholdParam* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::UserThresholdParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::UserThresholdParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::AdaptiveThresholdParam* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::AdaptiveThresholdParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::AdaptiveThresholdParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::EnergyDetectionParam* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::EnergyDetectionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::EnergyDetectionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::ThresholdRefLine* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::ThresholdRefLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::ThresholdRefLine >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::SignalFeature* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::SignalFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::SignalFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::SignalSegment* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::SignalSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::SignalSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::HitsSegmentation* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::HitsSegmentation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::HitsSegmentation >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::SegmentationParam* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::SegmentationParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::SegmentationParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::SpectrumIntersection* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::SpectrumIntersection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::SpectrumIntersection >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::MergeParam* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::MergeParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::MergeParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::DetectionOption* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::DetectionOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::DetectionOption >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::DetectionParam* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::DetectionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::DetectionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::SignalList* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::SignalList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::SignalList >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::DetectionRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::DetectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::DetectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::DetailKeeping* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::DetailKeeping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::DetailKeeping >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::detection::DetailKeepingRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::detection::DetailKeepingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::detection::DetailKeepingRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
