// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/nodeInternal.proto

#include "node/nodeInternal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
constexpr NodeIdentity::NodeIdentity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_pos_(nullptr)
  , id_(nullptr){}
struct NodeIdentityDefaultTypeInternal {
  constexpr NodeIdentityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeIdentityDefaultTypeInternal() {}
  union {
    NodeIdentity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeIdentityDefaultTypeInternal _NodeIdentity_default_instance_;
constexpr WANConfig::WANConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_(nullptr)
  , source_(nullptr)
  , pub_(nullptr)
  , sub_(nullptr){}
struct WANConfigDefaultTypeInternal {
  constexpr WANConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WANConfigDefaultTypeInternal() {}
  union {
    WANConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WANConfigDefaultTypeInternal _WANConfig_default_instance_;
constexpr DeviceConfig::DeviceConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(nullptr)
  , id_(nullptr)
  , type_(0)
{}
struct DeviceConfigDefaultTypeInternal {
  constexpr DeviceConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceConfigDefaultTypeInternal() {}
  union {
    DeviceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
constexpr LANConfig::LANConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cluster_3900_()
  , cluster_radardf_(){}
struct LANConfigDefaultTypeInternal {
  constexpr LANConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LANConfigDefaultTypeInternal() {}
  union {
    LANConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LANConfigDefaultTypeInternal _LANConfig_default_instance_;
constexpr NodeConfig::NodeConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identity_(nullptr)
  , wan_conf_(nullptr)
  , lan_conf_(nullptr){}
struct NodeConfigDefaultTypeInternal {
  constexpr NodeConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeConfigDefaultTypeInternal() {}
  union {
    NodeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeConfigDefaultTypeInternal _NodeConfig_default_instance_;
constexpr TaskMsgId::TaskMsgId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tid_(0u)
  , nid_(0u)
  , did_(0u){}
struct TaskMsgIdDefaultTypeInternal {
  constexpr TaskMsgIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskMsgIdDefaultTypeInternal() {}
  union {
    TaskMsgId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskMsgIdDefaultTypeInternal _TaskMsgId_default_instance_;
constexpr AbnormalMsgRecord::AbnormalMsgRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_msg_id_(){}
struct AbnormalMsgRecordDefaultTypeInternal {
  constexpr AbnormalMsgRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AbnormalMsgRecordDefaultTypeInternal() {}
  union {
    AbnormalMsgRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AbnormalMsgRecordDefaultTypeInternal _AbnormalMsgRecord_default_instance_;
constexpr ServerConfig_ServicesEntry_DoNotUse::ServerConfig_ServicesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServerConfig_ServicesEntry_DoNotUseDefaultTypeInternal {
  constexpr ServerConfig_ServicesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerConfig_ServicesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ServerConfig_ServicesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerConfig_ServicesEntry_DoNotUseDefaultTypeInternal _ServerConfig_ServicesEntry_DoNotUse_default_instance_;
constexpr ServerConfig::ServerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : services_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , server_(nullptr)
  , sink_(nullptr)
  , pub_(nullptr)
  , sub_(nullptr){}
struct ServerConfigDefaultTypeInternal {
  constexpr ServerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerConfigDefaultTypeInternal() {}
  union {
    ServerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fnodeInternal_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fnodeInternal_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fnodeInternal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fnodeInternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeIdentity, node_name_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeIdentity, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeIdentity, default_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::WANConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::WANConfig, client_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::WANConfig, source_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::WANConfig, pub_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::WANConfig, sub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceConfig, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceConfig, address_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::DeviceConfig, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::LANConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::LANConfig, cluster_3900_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::LANConfig, cluster_radardf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeConfig, identity_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeConfig, wan_conf_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::NodeConfig, lan_conf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskMsgId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskMsgId, tid_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskMsgId, nid_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::TaskMsgId, did_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::AbnormalMsgRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::AbnormalMsgRecord, task_msg_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig, server_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig, sink_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig, pub_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig, sub_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::ServerConfig, services_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::NodeIdentity)},
  { 8, -1, sizeof(::zb::dcts::node::WANConfig)},
  { 17, -1, sizeof(::zb::dcts::node::DeviceConfig)},
  { 25, -1, sizeof(::zb::dcts::node::LANConfig)},
  { 32, -1, sizeof(::zb::dcts::node::NodeConfig)},
  { 40, -1, sizeof(::zb::dcts::node::TaskMsgId)},
  { 48, -1, sizeof(::zb::dcts::node::AbnormalMsgRecord)},
  { 54, 61, sizeof(::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse)},
  { 63, -1, sizeof(::zb::dcts::node::ServerConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_NodeIdentity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_WANConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_DeviceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_LANConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_NodeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_TaskMsgId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_AbnormalMsgRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_ServerConfig_ServicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::_ServerConfig_default_instance_),
};

const char descriptor_table_protodef_node_2fnodeInternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027node/nodeInternal.proto\022\014zb.dcts.node\032"
  "\ndcts.proto\032\017node/node.proto\"k\n\014NodeIden"
  "tity\022\021\n\tnode_name\030\001 \001(\t\022 \n\002id\030\003 \001(\0132\024.zb"
  ".dcts.node.NodeId\022&\n\013default_pos\030\002 \001(\0132\021"
  ".zb.dcts.Position\"\245\001\n\tWANConfig\022&\n\006clien"
  "t\030\001 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022&\n\006sourc"
  "e\030\002 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022#\n\003pub\030\003"
  " \001(\0132\026.zb.dcts.ZeromqLinkCfg\022#\n\003sub\030\004 \001("
  "\0132\026.zb.dcts.ZeromqLinkCfg\"\201\001\n\014DeviceConf"
  "ig\022&\n\004type\030\001 \001(\0162\030.zb.dcts.node.DeviceTy"
  "pe\022%\n\007address\030\002 \001(\0132\024.zb.dcts.IPv4Addres"
  "s\022\"\n\002id\030\003 \001(\0132\026.zb.dcts.node.DeviceId\"r\n"
  "\tLANConfig\0220\n\014cluster_3900\030\001 \003(\0132\032.zb.dc"
  "ts.node.DeviceConfig\0223\n\017cluster_radarDF\030"
  "\002 \003(\0132\032.zb.dcts.node.DeviceConfig\"\220\001\n\nNo"
  "deConfig\022,\n\010identity\030\001 \001(\0132\032.zb.dcts.nod"
  "e.NodeIdentity\022)\n\010WAN_conf\030\002 \001(\0132\027.zb.dc"
  "ts.node.WANConfig\022)\n\010LAN_conf\030\003 \001(\0132\027.zb"
  ".dcts.node.LANConfig\"2\n\tTaskMsgId\022\013\n\003tid"
  "\030\001 \001(\r\022\013\n\003nid\030\002 \001(\r\022\013\n\003did\030\003 \001(\r\"A\n\021Abno"
  "rmalMsgRecord\022,\n\013task_msg_id\030\001 \003(\0132\027.zb."
  "dcts.node.TaskMsgId\"\251\002\n\014ServerConfig\022&\n\006"
  "server\030\001 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022$\n\004"
  "sink\030\002 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022#\n\003pu"
  "b\030\003 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022#\n\003sub\030\004"
  " \001(\0132\026.zb.dcts.ZeromqLinkCfg\022:\n\010services"
  "\030\005 \003(\0132(.zb.dcts.node.ServerConfig.Servi"
  "cesEntry\032E\n\rServicesEntry\022\013\n\003key\030\001 \001(\t\022#"
  "\n\005value\030\002 \001(\0132\024.zb.dcts.IPv4Address:\0028\001*"
  "0\n\007TaskCmd\022\013\n\007T_START\020\000\022\n\n\006T_STOP\020\001\022\014\n\010T"
  "_MODIFY\020\002*V\n\005CSTip\022\r\n\tNODE_TICK\020\000\022\017\n\013SER"
  "VER_TICK\020\001\022\020\n\014NODE_CONTROL\020\002\022\020\n\014TASK_REQ"
  "UEST\020\003\022\t\n\005REPLY\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fnodeInternal_2eproto_deps[2] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_node_2fnode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fnodeInternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fnodeInternal_2eproto = {
  false, false, 1305, descriptor_table_protodef_node_2fnodeInternal_2eproto, "node/nodeInternal.proto", 
  &descriptor_table_node_2fnodeInternal_2eproto_once, descriptor_table_node_2fnodeInternal_2eproto_deps, 2, 9,
  schemas, file_default_instances, TableStruct_node_2fnodeInternal_2eproto::offsets,
  file_level_metadata_node_2fnodeInternal_2eproto, file_level_enum_descriptors_node_2fnodeInternal_2eproto, file_level_service_descriptors_node_2fnodeInternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnodeInternal_2eproto);
  return descriptor_table_node_2fnodeInternal_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fnodeInternal_2eproto(&descriptor_table_node_2fnodeInternal_2eproto);
namespace zb {
namespace dcts {
namespace node {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskCmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnodeInternal_2eproto);
  return file_level_enum_descriptors_node_2fnodeInternal_2eproto[0];
}
bool TaskCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSTip_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fnodeInternal_2eproto);
  return file_level_enum_descriptors_node_2fnodeInternal_2eproto[1];
}
bool CSTip_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NodeIdentity::_Internal {
 public:
  static const ::zb::dcts::node::NodeId& id(const NodeIdentity* msg);
  static const ::zb::dcts::Position& default_pos(const NodeIdentity* msg);
};

const ::zb::dcts::node::NodeId&
NodeIdentity::_Internal::id(const NodeIdentity* msg) {
  return *msg->id_;
}
const ::zb::dcts::Position&
NodeIdentity::_Internal::default_pos(const NodeIdentity* msg) {
  return *msg->default_pos_;
}
void NodeIdentity::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void NodeIdentity::clear_default_pos() {
  if (GetArena() == nullptr && default_pos_ != nullptr) {
    delete default_pos_;
  }
  default_pos_ = nullptr;
}
NodeIdentity::NodeIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.NodeIdentity)
}
NodeIdentity::NodeIdentity(const NodeIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArena());
  }
  if (from._internal_has_default_pos()) {
    default_pos_ = new ::zb::dcts::Position(*from.default_pos_);
  } else {
    default_pos_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::node::NodeId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.NodeIdentity)
}

void NodeIdentity::SharedCtor() {
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&default_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&default_pos_)) + sizeof(id_));
}

NodeIdentity::~NodeIdentity() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.NodeIdentity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeIdentity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_pos_;
  if (this != internal_default_instance()) delete id_;
}

void NodeIdentity::ArenaDtor(void* object) {
  NodeIdentity* _this = reinterpret_cast< NodeIdentity* >(object);
  (void)_this;
}
void NodeIdentity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.NodeIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmpty();
  if (GetArena() == nullptr && default_pos_ != nullptr) {
    delete default_pos_;
  }
  default_pos_ = nullptr;
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeIdentity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.NodeIdentity.node_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position default_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.NodeId id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeIdentity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.NodeIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.NodeIdentity.node_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_name(), target);
  }

  // .zb.dcts.Position default_pos = 2;
  if (this->has_default_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::default_pos(this), target, stream);
  }

  // .zb.dcts.node.NodeId id = 3;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.NodeIdentity)
  return target;
}

size_t NodeIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.NodeIdentity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // .zb.dcts.Position default_pos = 2;
  if (this->has_default_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_pos_);
  }

  // .zb.dcts.node.NodeId id = 3;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeIdentity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.NodeIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeIdentity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeIdentity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.NodeIdentity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.NodeIdentity)
    MergeFrom(*source);
  }
}

void NodeIdentity::MergeFrom(const NodeIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.NodeIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (from.has_default_pos()) {
    _internal_mutable_default_pos()->::zb::dcts::Position::MergeFrom(from._internal_default_pos());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::node::NodeId::MergeFrom(from._internal_id());
  }
}

void NodeIdentity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.NodeIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeIdentity::CopyFrom(const NodeIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.NodeIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeIdentity::IsInitialized() const {
  return true;
}

void NodeIdentity::InternalSwap(NodeIdentity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeIdentity, id_)
      + sizeof(NodeIdentity::id_)
      - PROTOBUF_FIELD_OFFSET(NodeIdentity, default_pos_)>(
          reinterpret_cast<char*>(&default_pos_),
          reinterpret_cast<char*>(&other->default_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeIdentity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WANConfig::_Internal {
 public:
  static const ::zb::dcts::ZeromqLinkCfg& client(const WANConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& source(const WANConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& pub(const WANConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& sub(const WANConfig* msg);
};

const ::zb::dcts::ZeromqLinkCfg&
WANConfig::_Internal::client(const WANConfig* msg) {
  return *msg->client_;
}
const ::zb::dcts::ZeromqLinkCfg&
WANConfig::_Internal::source(const WANConfig* msg) {
  return *msg->source_;
}
const ::zb::dcts::ZeromqLinkCfg&
WANConfig::_Internal::pub(const WANConfig* msg) {
  return *msg->pub_;
}
const ::zb::dcts::ZeromqLinkCfg&
WANConfig::_Internal::sub(const WANConfig* msg) {
  return *msg->sub_;
}
void WANConfig::clear_client() {
  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
void WANConfig::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
void WANConfig::clear_pub() {
  if (GetArena() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
}
void WANConfig::clear_sub() {
  if (GetArena() == nullptr && sub_ != nullptr) {
    delete sub_;
  }
  sub_ = nullptr;
}
WANConfig::WANConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.WANConfig)
}
WANConfig::WANConfig(const WANConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client()) {
    client_ = new ::zb::dcts::ZeromqLinkCfg(*from.client_);
  } else {
    client_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::zb::dcts::ZeromqLinkCfg(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_pub()) {
    pub_ = new ::zb::dcts::ZeromqLinkCfg(*from.pub_);
  } else {
    pub_ = nullptr;
  }
  if (from._internal_has_sub()) {
    sub_ = new ::zb::dcts::ZeromqLinkCfg(*from.sub_);
  } else {
    sub_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.WANConfig)
}

void WANConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sub_) -
    reinterpret_cast<char*>(&client_)) + sizeof(sub_));
}

WANConfig::~WANConfig() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.WANConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WANConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete client_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete pub_;
  if (this != internal_default_instance()) delete sub_;
}

void WANConfig::ArenaDtor(void* object) {
  WANConfig* _this = reinterpret_cast< WANConfig* >(object);
  (void)_this;
}
void WANConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WANConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WANConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.WANConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
  if (GetArena() == nullptr && sub_ != nullptr) {
    delete sub_;
  }
  sub_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WANConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.ZeromqLinkCfg client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg pub = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg sub = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WANConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.WANConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.ZeromqLinkCfg client = 1;
  if (this->has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg source = 2;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  if (this->has_pub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pub(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  if (this->has_sub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sub(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.WANConfig)
  return target;
}

size_t WANConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.WANConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.ZeromqLinkCfg client = 1;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // .zb.dcts.ZeromqLinkCfg source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  if (this->has_pub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_);
  }

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  if (this->has_sub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WANConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.WANConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WANConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WANConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.WANConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.WANConfig)
    MergeFrom(*source);
  }
}

void WANConfig::MergeFrom(const WANConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.WANConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client()) {
    _internal_mutable_client()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_client());
  }
  if (from.has_source()) {
    _internal_mutable_source()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_source());
  }
  if (from.has_pub()) {
    _internal_mutable_pub()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_pub());
  }
  if (from.has_sub()) {
    _internal_mutable_sub()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_sub());
  }
}

void WANConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.WANConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WANConfig::CopyFrom(const WANConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.WANConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WANConfig::IsInitialized() const {
  return true;
}

void WANConfig::InternalSwap(WANConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WANConfig, sub_)
      + sizeof(WANConfig::sub_)
      - PROTOBUF_FIELD_OFFSET(WANConfig, client_)>(
          reinterpret_cast<char*>(&client_),
          reinterpret_cast<char*>(&other->client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WANConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceConfig::_Internal {
 public:
  static const ::zb::dcts::IPv4Address& address(const DeviceConfig* msg);
  static const ::zb::dcts::node::DeviceId& id(const DeviceConfig* msg);
};

const ::zb::dcts::IPv4Address&
DeviceConfig::_Internal::address(const DeviceConfig* msg) {
  return *msg->address_;
}
const ::zb::dcts::node::DeviceId&
DeviceConfig::_Internal::id(const DeviceConfig* msg) {
  return *msg->id_;
}
void DeviceConfig::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
void DeviceConfig::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
DeviceConfig::DeviceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.DeviceConfig)
}
DeviceConfig::DeviceConfig(const DeviceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new ::zb::dcts::IPv4Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::node::DeviceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.DeviceConfig)
}

void DeviceConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&address_)) + sizeof(type_));
}

DeviceConfig::~DeviceConfig() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.DeviceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete id_;
}

void DeviceConfig::ArenaDtor(void* object) {
  DeviceConfig* _this = reinterpret_cast< DeviceConfig* >(object);
  (void)_this;
}
void DeviceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.DeviceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.DeviceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::node::DeviceType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.IPv4Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.DeviceId id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.DeviceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.DeviceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .zb.dcts.IPv4Address address = 2;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::address(this), target, stream);
  }

  // .zb.dcts.node.DeviceId id = 3;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.DeviceConfig)
  return target;
}

size_t DeviceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.DeviceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.IPv4Address address = 2;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .zb.dcts.node.DeviceId id = 3;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .zb.dcts.node.DeviceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.DeviceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.DeviceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.DeviceConfig)
    MergeFrom(*source);
  }
}

void DeviceConfig::MergeFrom(const DeviceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.DeviceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _internal_mutable_address()->::zb::dcts::IPv4Address::MergeFrom(from._internal_address());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::node::DeviceId::MergeFrom(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DeviceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.DeviceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConfig::CopyFrom(const DeviceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.DeviceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfig::IsInitialized() const {
  return true;
}

void DeviceConfig::InternalSwap(DeviceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceConfig, type_)
      + sizeof(DeviceConfig::type_)
      - PROTOBUF_FIELD_OFFSET(DeviceConfig, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LANConfig::_Internal {
 public:
};

LANConfig::LANConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cluster_3900_(arena),
  cluster_radardf_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.LANConfig)
}
LANConfig::LANConfig(const LANConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cluster_3900_(from.cluster_3900_),
      cluster_radardf_(from.cluster_radardf_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.LANConfig)
}

void LANConfig::SharedCtor() {
}

LANConfig::~LANConfig() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.LANConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LANConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LANConfig::ArenaDtor(void* object) {
  LANConfig* _this = reinterpret_cast< LANConfig* >(object);
  (void)_this;
}
void LANConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LANConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LANConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.LANConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_3900_.Clear();
  cluster_radardf_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LANConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.DeviceConfig cluster_3900 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cluster_3900(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.DeviceConfig cluster_radarDF = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cluster_radardf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LANConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.LANConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.DeviceConfig cluster_3900 = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cluster_3900_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cluster_3900(i), target, stream);
  }

  // repeated .zb.dcts.node.DeviceConfig cluster_radarDF = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cluster_radardf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cluster_radardf(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.LANConfig)
  return target;
}

size_t LANConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.LANConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.DeviceConfig cluster_3900 = 1;
  total_size += 1UL * this->_internal_cluster_3900_size();
  for (const auto& msg : this->cluster_3900_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zb.dcts.node.DeviceConfig cluster_radarDF = 2;
  total_size += 1UL * this->_internal_cluster_radardf_size();
  for (const auto& msg : this->cluster_radardf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LANConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.LANConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LANConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LANConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.LANConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.LANConfig)
    MergeFrom(*source);
  }
}

void LANConfig::MergeFrom(const LANConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.LANConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cluster_3900_.MergeFrom(from.cluster_3900_);
  cluster_radardf_.MergeFrom(from.cluster_radardf_);
}

void LANConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.LANConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LANConfig::CopyFrom(const LANConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.LANConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LANConfig::IsInitialized() const {
  return true;
}

void LANConfig::InternalSwap(LANConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cluster_3900_.InternalSwap(&other->cluster_3900_);
  cluster_radardf_.InternalSwap(&other->cluster_radardf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LANConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeConfig::_Internal {
 public:
  static const ::zb::dcts::node::NodeIdentity& identity(const NodeConfig* msg);
  static const ::zb::dcts::node::WANConfig& wan_conf(const NodeConfig* msg);
  static const ::zb::dcts::node::LANConfig& lan_conf(const NodeConfig* msg);
};

const ::zb::dcts::node::NodeIdentity&
NodeConfig::_Internal::identity(const NodeConfig* msg) {
  return *msg->identity_;
}
const ::zb::dcts::node::WANConfig&
NodeConfig::_Internal::wan_conf(const NodeConfig* msg) {
  return *msg->wan_conf_;
}
const ::zb::dcts::node::LANConfig&
NodeConfig::_Internal::lan_conf(const NodeConfig* msg) {
  return *msg->lan_conf_;
}
NodeConfig::NodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.NodeConfig)
}
NodeConfig::NodeConfig(const NodeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identity()) {
    identity_ = new ::zb::dcts::node::NodeIdentity(*from.identity_);
  } else {
    identity_ = nullptr;
  }
  if (from._internal_has_wan_conf()) {
    wan_conf_ = new ::zb::dcts::node::WANConfig(*from.wan_conf_);
  } else {
    wan_conf_ = nullptr;
  }
  if (from._internal_has_lan_conf()) {
    lan_conf_ = new ::zb::dcts::node::LANConfig(*from.lan_conf_);
  } else {
    lan_conf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.NodeConfig)
}

void NodeConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lan_conf_) -
    reinterpret_cast<char*>(&identity_)) + sizeof(lan_conf_));
}

NodeConfig::~NodeConfig() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.NodeConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identity_;
  if (this != internal_default_instance()) delete wan_conf_;
  if (this != internal_default_instance()) delete lan_conf_;
}

void NodeConfig::ArenaDtor(void* object) {
  NodeConfig* _this = reinterpret_cast< NodeConfig* >(object);
  (void)_this;
}
void NodeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.NodeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && identity_ != nullptr) {
    delete identity_;
  }
  identity_ = nullptr;
  if (GetArena() == nullptr && wan_conf_ != nullptr) {
    delete wan_conf_;
  }
  wan_conf_ = nullptr;
  if (GetArena() == nullptr && lan_conf_ != nullptr) {
    delete lan_conf_;
  }
  lan_conf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.NodeIdentity identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.WANConfig WAN_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wan_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.LANConfig LAN_conf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lan_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.NodeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.NodeIdentity identity = 1;
  if (this->has_identity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identity(this), target, stream);
  }

  // .zb.dcts.node.WANConfig WAN_conf = 2;
  if (this->has_wan_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::wan_conf(this), target, stream);
  }

  // .zb.dcts.node.LANConfig LAN_conf = 3;
  if (this->has_lan_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lan_conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.NodeConfig)
  return target;
}

size_t NodeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.NodeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.NodeIdentity identity = 1;
  if (this->has_identity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_);
  }

  // .zb.dcts.node.WANConfig WAN_conf = 2;
  if (this->has_wan_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wan_conf_);
  }

  // .zb.dcts.node.LANConfig LAN_conf = 3;
  if (this->has_lan_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lan_conf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.NodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.NodeConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.NodeConfig)
    MergeFrom(*source);
  }
}

void NodeConfig::MergeFrom(const NodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.NodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_identity()) {
    _internal_mutable_identity()->::zb::dcts::node::NodeIdentity::MergeFrom(from._internal_identity());
  }
  if (from.has_wan_conf()) {
    _internal_mutable_wan_conf()->::zb::dcts::node::WANConfig::MergeFrom(from._internal_wan_conf());
  }
  if (from.has_lan_conf()) {
    _internal_mutable_lan_conf()->::zb::dcts::node::LANConfig::MergeFrom(from._internal_lan_conf());
  }
}

void NodeConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.NodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConfig::CopyFrom(const NodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.NodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConfig::IsInitialized() const {
  return true;
}

void NodeConfig::InternalSwap(NodeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeConfig, lan_conf_)
      + sizeof(NodeConfig::lan_conf_)
      - PROTOBUF_FIELD_OFFSET(NodeConfig, identity_)>(
          reinterpret_cast<char*>(&identity_),
          reinterpret_cast<char*>(&other->identity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskMsgId::_Internal {
 public:
};

TaskMsgId::TaskMsgId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.TaskMsgId)
}
TaskMsgId::TaskMsgId(const TaskMsgId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tid_, &from.tid_,
    static_cast<size_t>(reinterpret_cast<char*>(&did_) -
    reinterpret_cast<char*>(&tid_)) + sizeof(did_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.TaskMsgId)
}

void TaskMsgId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&did_) -
    reinterpret_cast<char*>(&tid_)) + sizeof(did_));
}

TaskMsgId::~TaskMsgId() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.TaskMsgId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskMsgId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskMsgId::ArenaDtor(void* object) {
  TaskMsgId* _this = reinterpret_cast< TaskMsgId* >(object);
  (void)_this;
}
void TaskMsgId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskMsgId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskMsgId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.TaskMsgId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&did_) -
      reinterpret_cast<char*>(&tid_)) + sizeof(did_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskMsgId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 did = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          did_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskMsgId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.TaskMsgId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tid = 1;
  if (this->tid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tid(), target);
  }

  // uint32 nid = 2;
  if (this->nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nid(), target);
  }

  // uint32 did = 3;
  if (this->did() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_did(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.TaskMsgId)
  return target;
}

size_t TaskMsgId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.TaskMsgId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tid = 1;
  if (this->tid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tid());
  }

  // uint32 nid = 2;
  if (this->nid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nid());
  }

  // uint32 did = 3;
  if (this->did() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_did());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskMsgId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.TaskMsgId)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskMsgId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskMsgId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.TaskMsgId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.TaskMsgId)
    MergeFrom(*source);
  }
}

void TaskMsgId::MergeFrom(const TaskMsgId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.TaskMsgId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tid() != 0) {
    _internal_set_tid(from._internal_tid());
  }
  if (from.nid() != 0) {
    _internal_set_nid(from._internal_nid());
  }
  if (from.did() != 0) {
    _internal_set_did(from._internal_did());
  }
}

void TaskMsgId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.TaskMsgId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskMsgId::CopyFrom(const TaskMsgId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.TaskMsgId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskMsgId::IsInitialized() const {
  return true;
}

void TaskMsgId::InternalSwap(TaskMsgId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskMsgId, did_)
      + sizeof(TaskMsgId::did_)
      - PROTOBUF_FIELD_OFFSET(TaskMsgId, tid_)>(
          reinterpret_cast<char*>(&tid_),
          reinterpret_cast<char*>(&other->tid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskMsgId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AbnormalMsgRecord::_Internal {
 public:
};

AbnormalMsgRecord::AbnormalMsgRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_msg_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.AbnormalMsgRecord)
}
AbnormalMsgRecord::AbnormalMsgRecord(const AbnormalMsgRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_msg_id_(from.task_msg_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.AbnormalMsgRecord)
}

void AbnormalMsgRecord::SharedCtor() {
}

AbnormalMsgRecord::~AbnormalMsgRecord() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.AbnormalMsgRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbnormalMsgRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AbnormalMsgRecord::ArenaDtor(void* object) {
  AbnormalMsgRecord* _this = reinterpret_cast< AbnormalMsgRecord* >(object);
  (void)_this;
}
void AbnormalMsgRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbnormalMsgRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AbnormalMsgRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.AbnormalMsgRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_msg_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbnormalMsgRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.TaskMsgId task_msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_msg_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbnormalMsgRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.AbnormalMsgRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.TaskMsgId task_msg_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_msg_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_task_msg_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.AbnormalMsgRecord)
  return target;
}

size_t AbnormalMsgRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.AbnormalMsgRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.TaskMsgId task_msg_id = 1;
  total_size += 1UL * this->_internal_task_msg_id_size();
  for (const auto& msg : this->task_msg_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbnormalMsgRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.AbnormalMsgRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const AbnormalMsgRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbnormalMsgRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.AbnormalMsgRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.AbnormalMsgRecord)
    MergeFrom(*source);
  }
}

void AbnormalMsgRecord::MergeFrom(const AbnormalMsgRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.AbnormalMsgRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_msg_id_.MergeFrom(from.task_msg_id_);
}

void AbnormalMsgRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.AbnormalMsgRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbnormalMsgRecord::CopyFrom(const AbnormalMsgRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.AbnormalMsgRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbnormalMsgRecord::IsInitialized() const {
  return true;
}

void AbnormalMsgRecord::InternalSwap(AbnormalMsgRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_msg_id_.InternalSwap(&other->task_msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbnormalMsgRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ServerConfig_ServicesEntry_DoNotUse::ServerConfig_ServicesEntry_DoNotUse() {}
ServerConfig_ServicesEntry_DoNotUse::ServerConfig_ServicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServerConfig_ServicesEntry_DoNotUse::MergeFrom(const ServerConfig_ServicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServerConfig_ServicesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ServerConfig_ServicesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ServerConfig::_Internal {
 public:
  static const ::zb::dcts::ZeromqLinkCfg& server(const ServerConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& sink(const ServerConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& pub(const ServerConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& sub(const ServerConfig* msg);
};

const ::zb::dcts::ZeromqLinkCfg&
ServerConfig::_Internal::server(const ServerConfig* msg) {
  return *msg->server_;
}
const ::zb::dcts::ZeromqLinkCfg&
ServerConfig::_Internal::sink(const ServerConfig* msg) {
  return *msg->sink_;
}
const ::zb::dcts::ZeromqLinkCfg&
ServerConfig::_Internal::pub(const ServerConfig* msg) {
  return *msg->pub_;
}
const ::zb::dcts::ZeromqLinkCfg&
ServerConfig::_Internal::sub(const ServerConfig* msg) {
  return *msg->sub_;
}
void ServerConfig::clear_server() {
  if (GetArena() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
void ServerConfig::clear_sink() {
  if (GetArena() == nullptr && sink_ != nullptr) {
    delete sink_;
  }
  sink_ = nullptr;
}
void ServerConfig::clear_pub() {
  if (GetArena() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
}
void ServerConfig::clear_sub() {
  if (GetArena() == nullptr && sub_ != nullptr) {
    delete sub_;
  }
  sub_ = nullptr;
}
void ServerConfig::clear_services() {
  services_.Clear();
}
ServerConfig::ServerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  services_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.ServerConfig)
}
ServerConfig::ServerConfig(const ServerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  services_.MergeFrom(from.services_);
  if (from._internal_has_server()) {
    server_ = new ::zb::dcts::ZeromqLinkCfg(*from.server_);
  } else {
    server_ = nullptr;
  }
  if (from._internal_has_sink()) {
    sink_ = new ::zb::dcts::ZeromqLinkCfg(*from.sink_);
  } else {
    sink_ = nullptr;
  }
  if (from._internal_has_pub()) {
    pub_ = new ::zb::dcts::ZeromqLinkCfg(*from.pub_);
  } else {
    pub_ = nullptr;
  }
  if (from._internal_has_sub()) {
    sub_ = new ::zb::dcts::ZeromqLinkCfg(*from.sub_);
  } else {
    sub_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.ServerConfig)
}

void ServerConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sub_) -
    reinterpret_cast<char*>(&server_)) + sizeof(sub_));
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.ServerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete sink_;
  if (this != internal_default_instance()) delete pub_;
  if (this != internal_default_instance()) delete sub_;
}

void ServerConfig::ArenaDtor(void* object) {
  ServerConfig* _this = reinterpret_cast< ServerConfig* >(object);
  (void)_this;
}
void ServerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.ServerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  if (GetArena() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  if (GetArena() == nullptr && sink_ != nullptr) {
    delete sink_;
  }
  sink_ = nullptr;
  if (GetArena() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
  if (GetArena() == nullptr && sub_ != nullptr) {
    delete sub_;
  }
  sub_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.ZeromqLinkCfg server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg sink = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sink(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg pub = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg sub = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .zb.dcts.IPv4Address> services = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&services_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.ServerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.ZeromqLinkCfg server = 1;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg sink = 2;
  if (this->has_sink()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sink(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  if (this->has_pub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pub(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  if (this->has_sub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sub(this), target, stream);
  }

  // map<string, .zb.dcts.IPv4Address> services = 5;
  if (!this->_internal_services().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.node.ServerConfig.ServicesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_services().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_services().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::const_iterator
          it = this->_internal_services().begin();
          it != this->_internal_services().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ServerConfig_ServicesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::const_iterator
          it = this->_internal_services().begin();
          it != this->_internal_services().end(); ++it) {
        target = ServerConfig_ServicesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.ServerConfig)
  return target;
}

size_t ServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.ServerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .zb.dcts.IPv4Address> services = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_services_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::const_iterator
      it = this->_internal_services().begin();
      it != this->_internal_services().end(); ++it) {
    total_size += ServerConfig_ServicesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.ZeromqLinkCfg server = 1;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  // .zb.dcts.ZeromqLinkCfg sink = 2;
  if (this->has_sink()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sink_);
  }

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  if (this->has_pub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_);
  }

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  if (this->has_sub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.ServerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.ServerConfig)
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.has_server()) {
    _internal_mutable_server()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_server());
  }
  if (from.has_sink()) {
    _internal_mutable_sink()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_sink());
  }
  if (from.has_pub()) {
    _internal_mutable_pub()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_pub());
  }
  if (from.has_sub()) {
    _internal_mutable_sub()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_sub());
  }
}

void ServerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  return true;
}

void ServerConfig::InternalSwap(ServerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  services_.Swap(&other->services_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfig, sub_)
      + sizeof(ServerConfig::sub_)
      - PROTOBUF_FIELD_OFFSET(ServerConfig, server_)>(
          reinterpret_cast<char*>(&server_),
          reinterpret_cast<char*>(&other->server_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::NodeIdentity* Arena::CreateMaybeMessage< ::zb::dcts::node::NodeIdentity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::NodeIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::WANConfig* Arena::CreateMaybeMessage< ::zb::dcts::node::WANConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::WANConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::DeviceConfig* Arena::CreateMaybeMessage< ::zb::dcts::node::DeviceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::DeviceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::LANConfig* Arena::CreateMaybeMessage< ::zb::dcts::node::LANConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::LANConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::NodeConfig* Arena::CreateMaybeMessage< ::zb::dcts::node::NodeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::NodeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::TaskMsgId* Arena::CreateMaybeMessage< ::zb::dcts::node::TaskMsgId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::TaskMsgId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::AbnormalMsgRecord* Arena::CreateMaybeMessage< ::zb::dcts::node::AbnormalMsgRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::AbnormalMsgRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::ServerConfig* Arena::CreateMaybeMessage< ::zb::dcts::node::ServerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::ServerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
