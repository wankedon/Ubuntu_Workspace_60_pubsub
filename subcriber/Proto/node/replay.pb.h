// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/replay.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2freplay_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2freplay_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/node.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2freplay_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2freplay_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2freplay_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2freplay_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace replay {
class AdjustOption;
struct AdjustOptionDefaultTypeInternal;
extern AdjustOptionDefaultTypeInternal _AdjustOption_default_instance_;
class AdjustRequest;
struct AdjustRequestDefaultTypeInternal;
extern AdjustRequestDefaultTypeInternal _AdjustRequest_default_instance_;
class CreateReplayTaskRequest;
struct CreateReplayTaskRequestDefaultTypeInternal;
extern CreateReplayTaskRequestDefaultTypeInternal _CreateReplayTaskRequest_default_instance_;
class ReplayId;
struct ReplayIdDefaultTypeInternal;
extern ReplayIdDefaultTypeInternal _ReplayId_default_instance_;
}  // namespace replay
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::replay::AdjustOption* Arena::CreateMaybeMessage<::zb::dcts::node::replay::AdjustOption>(Arena*);
template<> ::zb::dcts::node::replay::AdjustRequest* Arena::CreateMaybeMessage<::zb::dcts::node::replay::AdjustRequest>(Arena*);
template<> ::zb::dcts::node::replay::CreateReplayTaskRequest* Arena::CreateMaybeMessage<::zb::dcts::node::replay::CreateReplayTaskRequest>(Arena*);
template<> ::zb::dcts::node::replay::ReplayId* Arena::CreateMaybeMessage<::zb::dcts::node::replay::ReplayId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace replay {

// ===================================================================

class ReplayId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.replay.ReplayId) */ {
 public:
  inline ReplayId() : ReplayId(nullptr) {}
  virtual ~ReplayId();
  explicit constexpr ReplayId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplayId(const ReplayId& from);
  ReplayId(ReplayId&& from) noexcept
    : ReplayId() {
    *this = ::std::move(from);
  }

  inline ReplayId& operator=(const ReplayId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayId& operator=(ReplayId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplayId* internal_default_instance() {
    return reinterpret_cast<const ReplayId*>(
               &_ReplayId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReplayId& a, ReplayId& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayId* New() const final {
    return CreateMaybeMessage<ReplayId>(nullptr);
  }

  ReplayId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayId& from);
  void MergeFrom(const ReplayId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.replay.ReplayId";
  }
  protected:
  explicit ReplayId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2freplay_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // string record_id = 3;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.TaskId task_id = 1;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const ::zb::dcts::TaskId& task_id() const;
  ::zb::dcts::TaskId* release_task_id();
  ::zb::dcts::TaskId* mutable_task_id();
  void set_allocated_task_id(::zb::dcts::TaskId* task_id);
  private:
  const ::zb::dcts::TaskId& _internal_task_id() const;
  ::zb::dcts::TaskId* _internal_mutable_task_id();
  public:
  void unsafe_arena_set_allocated_task_id(
      ::zb::dcts::TaskId* task_id);
  ::zb::dcts::TaskId* unsafe_arena_release_task_id();

  // .zb.dcts.node.NodeId node_id = 2;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  const ::zb::dcts::node::NodeId& node_id() const;
  ::zb::dcts::node::NodeId* release_node_id();
  ::zb::dcts::node::NodeId* mutable_node_id();
  void set_allocated_node_id(::zb::dcts::node::NodeId* node_id);
  private:
  const ::zb::dcts::node::NodeId& _internal_node_id() const;
  ::zb::dcts::node::NodeId* _internal_mutable_node_id();
  public:
  void unsafe_arena_set_allocated_node_id(
      ::zb::dcts::node::NodeId* node_id);
  ::zb::dcts::node::NodeId* unsafe_arena_release_node_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.replay.ReplayId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::TaskId* task_id_;
  ::zb::dcts::node::NodeId* node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2freplay_2eproto;
};
// -------------------------------------------------------------------

class CreateReplayTaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.replay.CreateReplayTaskRequest) */ {
 public:
  inline CreateReplayTaskRequest() : CreateReplayTaskRequest(nullptr) {}
  virtual ~CreateReplayTaskRequest();
  explicit constexpr CreateReplayTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateReplayTaskRequest(const CreateReplayTaskRequest& from);
  CreateReplayTaskRequest(CreateReplayTaskRequest&& from) noexcept
    : CreateReplayTaskRequest() {
    *this = ::std::move(from);
  }

  inline CreateReplayTaskRequest& operator=(const CreateReplayTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReplayTaskRequest& operator=(CreateReplayTaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReplayTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateReplayTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CreateReplayTaskRequest*>(
               &_CreateReplayTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateReplayTaskRequest& a, CreateReplayTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReplayTaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReplayTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReplayTaskRequest* New() const final {
    return CreateMaybeMessage<CreateReplayTaskRequest>(nullptr);
  }

  CreateReplayTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReplayTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReplayTaskRequest& from);
  void MergeFrom(const CreateReplayTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReplayTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.replay.CreateReplayTaskRequest";
  }
  protected:
  explicit CreateReplayTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2freplay_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunnerFieldNumber = 1,
  };
  // repeated .zb.dcts.node.NodeDevice task_runner = 1;
  int task_runner_size() const;
  private:
  int _internal_task_runner_size() const;
  public:
  void clear_task_runner();
  ::zb::dcts::node::NodeDevice* mutable_task_runner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
      mutable_task_runner();
  private:
  const ::zb::dcts::node::NodeDevice& _internal_task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* _internal_add_task_runner();
  public:
  const ::zb::dcts::node::NodeDevice& task_runner(int index) const;
  ::zb::dcts::node::NodeDevice* add_task_runner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
      task_runner() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.node.replay.CreateReplayTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice > task_runner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2freplay_2eproto;
};
// -------------------------------------------------------------------

class AdjustOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.replay.AdjustOption) */ {
 public:
  inline AdjustOption() : AdjustOption(nullptr) {}
  virtual ~AdjustOption();
  explicit constexpr AdjustOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdjustOption(const AdjustOption& from);
  AdjustOption(AdjustOption&& from) noexcept
    : AdjustOption() {
    *this = ::std::move(from);
  }

  inline AdjustOption& operator=(const AdjustOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdjustOption& operator=(AdjustOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdjustOption& default_instance() {
    return *internal_default_instance();
  }
  enum OptionCase {
    kProgress = 1,
    kIntervalFactor = 2,
    kPauseResume = 3,
    OPTION_NOT_SET = 0,
  };

  static inline const AdjustOption* internal_default_instance() {
    return reinterpret_cast<const AdjustOption*>(
               &_AdjustOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AdjustOption& a, AdjustOption& b) {
    a.Swap(&b);
  }
  inline void Swap(AdjustOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdjustOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdjustOption* New() const final {
    return CreateMaybeMessage<AdjustOption>(nullptr);
  }

  AdjustOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdjustOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdjustOption& from);
  void MergeFrom(const AdjustOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdjustOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.replay.AdjustOption";
  }
  protected:
  explicit AdjustOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2freplay_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
    kIntervalFactorFieldNumber = 2,
    kPauseResumeFieldNumber = 3,
  };
  // .zb.dcts.RealNumber progress = 1;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::zb::dcts::RealNumber& progress() const;
  ::zb::dcts::RealNumber* release_progress();
  ::zb::dcts::RealNumber* mutable_progress();
  void set_allocated_progress(::zb::dcts::RealNumber* progress);
  private:
  const ::zb::dcts::RealNumber& _internal_progress() const;
  ::zb::dcts::RealNumber* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::zb::dcts::RealNumber* progress);
  ::zb::dcts::RealNumber* unsafe_arena_release_progress();

  // .zb.dcts.RealNumber interval_factor = 2;
  bool has_interval_factor() const;
  private:
  bool _internal_has_interval_factor() const;
  public:
  void clear_interval_factor();
  const ::zb::dcts::RealNumber& interval_factor() const;
  ::zb::dcts::RealNumber* release_interval_factor();
  ::zb::dcts::RealNumber* mutable_interval_factor();
  void set_allocated_interval_factor(::zb::dcts::RealNumber* interval_factor);
  private:
  const ::zb::dcts::RealNumber& _internal_interval_factor() const;
  ::zb::dcts::RealNumber* _internal_mutable_interval_factor();
  public:
  void unsafe_arena_set_allocated_interval_factor(
      ::zb::dcts::RealNumber* interval_factor);
  ::zb::dcts::RealNumber* unsafe_arena_release_interval_factor();

  // .zb.dcts.Boolean pause_resume = 3;
  bool has_pause_resume() const;
  private:
  bool _internal_has_pause_resume() const;
  public:
  void clear_pause_resume();
  const ::zb::dcts::Boolean& pause_resume() const;
  ::zb::dcts::Boolean* release_pause_resume();
  ::zb::dcts::Boolean* mutable_pause_resume();
  void set_allocated_pause_resume(::zb::dcts::Boolean* pause_resume);
  private:
  const ::zb::dcts::Boolean& _internal_pause_resume() const;
  ::zb::dcts::Boolean* _internal_mutable_pause_resume();
  public:
  void unsafe_arena_set_allocated_pause_resume(
      ::zb::dcts::Boolean* pause_resume);
  ::zb::dcts::Boolean* unsafe_arena_release_pause_resume();

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:zb.dcts.node.replay.AdjustOption)
 private:
  class _Internal;
  void set_has_progress();
  void set_has_interval_factor();
  void set_has_pause_resume();

  inline bool has_Option() const;
  inline void clear_has_Option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OptionUnion {
    constexpr OptionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::zb::dcts::RealNumber* progress_;
    ::zb::dcts::RealNumber* interval_factor_;
    ::zb::dcts::Boolean* pause_resume_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_node_2freplay_2eproto;
};
// -------------------------------------------------------------------

class AdjustRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.replay.AdjustRequest) */ {
 public:
  inline AdjustRequest() : AdjustRequest(nullptr) {}
  virtual ~AdjustRequest();
  explicit constexpr AdjustRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdjustRequest(const AdjustRequest& from);
  AdjustRequest(AdjustRequest&& from) noexcept
    : AdjustRequest() {
    *this = ::std::move(from);
  }

  inline AdjustRequest& operator=(const AdjustRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdjustRequest& operator=(AdjustRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdjustRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdjustRequest* internal_default_instance() {
    return reinterpret_cast<const AdjustRequest*>(
               &_AdjustRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AdjustRequest& a, AdjustRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdjustRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdjustRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdjustRequest* New() const final {
    return CreateMaybeMessage<AdjustRequest>(nullptr);
  }

  AdjustRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdjustRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdjustRequest& from);
  void MergeFrom(const AdjustRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdjustRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.replay.AdjustRequest";
  }
  protected:
  explicit AdjustRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2freplay_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplayIdFieldNumber = 1,
    kOptionFieldNumber = 2,
  };
  // .zb.dcts.node.replay.ReplayId replay_id = 1;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::zb::dcts::node::replay::ReplayId& replay_id() const;
  ::zb::dcts::node::replay::ReplayId* release_replay_id();
  ::zb::dcts::node::replay::ReplayId* mutable_replay_id();
  void set_allocated_replay_id(::zb::dcts::node::replay::ReplayId* replay_id);
  private:
  const ::zb::dcts::node::replay::ReplayId& _internal_replay_id() const;
  ::zb::dcts::node::replay::ReplayId* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::zb::dcts::node::replay::ReplayId* replay_id);
  ::zb::dcts::node::replay::ReplayId* unsafe_arena_release_replay_id();

  // .zb.dcts.node.replay.AdjustOption option = 2;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  const ::zb::dcts::node::replay::AdjustOption& option() const;
  ::zb::dcts::node::replay::AdjustOption* release_option();
  ::zb::dcts::node::replay::AdjustOption* mutable_option();
  void set_allocated_option(::zb::dcts::node::replay::AdjustOption* option);
  private:
  const ::zb::dcts::node::replay::AdjustOption& _internal_option() const;
  ::zb::dcts::node::replay::AdjustOption* _internal_mutable_option();
  public:
  void unsafe_arena_set_allocated_option(
      ::zb::dcts::node::replay::AdjustOption* option);
  ::zb::dcts::node::replay::AdjustOption* unsafe_arena_release_option();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.replay.AdjustRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::replay::ReplayId* replay_id_;
  ::zb::dcts::node::replay::AdjustOption* option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2freplay_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReplayId

// .zb.dcts.TaskId task_id = 1;
inline bool ReplayId::_internal_has_task_id() const {
  return this != internal_default_instance() && task_id_ != nullptr;
}
inline bool ReplayId::has_task_id() const {
  return _internal_has_task_id();
}
inline const ::zb::dcts::TaskId& ReplayId::_internal_task_id() const {
  const ::zb::dcts::TaskId* p = task_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::TaskId&>(
      ::zb::dcts::_TaskId_default_instance_);
}
inline const ::zb::dcts::TaskId& ReplayId::task_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.replay.ReplayId.task_id)
  return _internal_task_id();
}
inline void ReplayId::unsafe_arena_set_allocated_task_id(
    ::zb::dcts::TaskId* task_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  task_id_ = task_id;
  if (task_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.replay.ReplayId.task_id)
}
inline ::zb::dcts::TaskId* ReplayId::release_task_id() {
  
  ::zb::dcts::TaskId* temp = task_id_;
  task_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TaskId* ReplayId::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.replay.ReplayId.task_id)
  
  ::zb::dcts::TaskId* temp = task_id_;
  task_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::TaskId* ReplayId::_internal_mutable_task_id() {
  
  if (task_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TaskId>(GetArena());
    task_id_ = p;
  }
  return task_id_;
}
inline ::zb::dcts::TaskId* ReplayId::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.replay.ReplayId.task_id)
  return _internal_mutable_task_id();
}
inline void ReplayId::set_allocated_task_id(::zb::dcts::TaskId* task_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  if (task_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id)->GetArena();
    if (message_arena != submessage_arena) {
      task_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    
  } else {
    
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.replay.ReplayId.task_id)
}

// .zb.dcts.node.NodeId node_id = 2;
inline bool ReplayId::_internal_has_node_id() const {
  return this != internal_default_instance() && node_id_ != nullptr;
}
inline bool ReplayId::has_node_id() const {
  return _internal_has_node_id();
}
inline const ::zb::dcts::node::NodeId& ReplayId::_internal_node_id() const {
  const ::zb::dcts::node::NodeId* p = node_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeId&>(
      ::zb::dcts::node::_NodeId_default_instance_);
}
inline const ::zb::dcts::node::NodeId& ReplayId::node_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.replay.ReplayId.node_id)
  return _internal_node_id();
}
inline void ReplayId::unsafe_arena_set_allocated_node_id(
    ::zb::dcts::node::NodeId* node_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.replay.ReplayId.node_id)
}
inline ::zb::dcts::node::NodeId* ReplayId::release_node_id() {
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeId* ReplayId::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.replay.ReplayId.node_id)
  
  ::zb::dcts::node::NodeId* temp = node_id_;
  node_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeId* ReplayId::_internal_mutable_node_id() {
  
  if (node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeId>(GetArena());
    node_id_ = p;
  }
  return node_id_;
}
inline ::zb::dcts::node::NodeId* ReplayId::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.replay.ReplayId.node_id)
  return _internal_mutable_node_id();
}
inline void ReplayId::set_allocated_node_id(::zb::dcts::node::NodeId* node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  if (node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id)->GetArena();
    if (message_arena != submessage_arena) {
      node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_id, submessage_arena);
    }
    
  } else {
    
  }
  node_id_ = node_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.replay.ReplayId.node_id)
}

// string record_id = 3;
inline void ReplayId::clear_record_id() {
  record_id_.ClearToEmpty();
}
inline const std::string& ReplayId::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.replay.ReplayId.record_id)
  return _internal_record_id();
}
inline void ReplayId::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.replay.ReplayId.record_id)
}
inline std::string* ReplayId::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.replay.ReplayId.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& ReplayId::_internal_record_id() const {
  return record_id_.Get();
}
inline void ReplayId::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayId::set_record_id(std::string&& value) {
  
  record_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.replay.ReplayId.record_id)
}
inline void ReplayId::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.replay.ReplayId.record_id)
}
inline void ReplayId::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.replay.ReplayId.record_id)
}
inline std::string* ReplayId::_internal_mutable_record_id() {
  
  return record_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayId::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.replay.ReplayId.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayId::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.replay.ReplayId.record_id)
}

// -------------------------------------------------------------------

// CreateReplayTaskRequest

// repeated .zb.dcts.node.NodeDevice task_runner = 1;
inline int CreateReplayTaskRequest::_internal_task_runner_size() const {
  return task_runner_.size();
}
inline int CreateReplayTaskRequest::task_runner_size() const {
  return _internal_task_runner_size();
}
inline ::zb::dcts::node::NodeDevice* CreateReplayTaskRequest::mutable_task_runner(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.replay.CreateReplayTaskRequest.task_runner)
  return task_runner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >*
CreateReplayTaskRequest::mutable_task_runner() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.replay.CreateReplayTaskRequest.task_runner)
  return &task_runner_;
}
inline const ::zb::dcts::node::NodeDevice& CreateReplayTaskRequest::_internal_task_runner(int index) const {
  return task_runner_.Get(index);
}
inline const ::zb::dcts::node::NodeDevice& CreateReplayTaskRequest::task_runner(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.replay.CreateReplayTaskRequest.task_runner)
  return _internal_task_runner(index);
}
inline ::zb::dcts::node::NodeDevice* CreateReplayTaskRequest::_internal_add_task_runner() {
  return task_runner_.Add();
}
inline ::zb::dcts::node::NodeDevice* CreateReplayTaskRequest::add_task_runner() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.replay.CreateReplayTaskRequest.task_runner)
  return _internal_add_task_runner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::NodeDevice >&
CreateReplayTaskRequest::task_runner() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.replay.CreateReplayTaskRequest.task_runner)
  return task_runner_;
}

// -------------------------------------------------------------------

// AdjustOption

// .zb.dcts.RealNumber progress = 1;
inline bool AdjustOption::_internal_has_progress() const {
  return Option_case() == kProgress;
}
inline bool AdjustOption::has_progress() const {
  return _internal_has_progress();
}
inline void AdjustOption::set_has_progress() {
  _oneof_case_[0] = kProgress;
}
inline ::zb::dcts::RealNumber* AdjustOption::release_progress() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.replay.AdjustOption.progress)
  if (_internal_has_progress()) {
    clear_has_Option();
      ::zb::dcts::RealNumber* temp = Option_.progress_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Option_.progress_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zb::dcts::RealNumber& AdjustOption::_internal_progress() const {
  return _internal_has_progress()
      ? *Option_.progress_
      : reinterpret_cast< ::zb::dcts::RealNumber&>(::zb::dcts::_RealNumber_default_instance_);
}
inline const ::zb::dcts::RealNumber& AdjustOption::progress() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.replay.AdjustOption.progress)
  return _internal_progress();
}
inline ::zb::dcts::RealNumber* AdjustOption::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.node.replay.AdjustOption.progress)
  if (_internal_has_progress()) {
    clear_has_Option();
    ::zb::dcts::RealNumber* temp = Option_.progress_;
    Option_.progress_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AdjustOption::unsafe_arena_set_allocated_progress(::zb::dcts::RealNumber* progress) {
  clear_Option();
  if (progress) {
    set_has_progress();
    Option_.progress_ = progress;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.replay.AdjustOption.progress)
}
inline ::zb::dcts::RealNumber* AdjustOption::_internal_mutable_progress() {
  if (!_internal_has_progress()) {
    clear_Option();
    set_has_progress();
    Option_.progress_ = CreateMaybeMessage< ::zb::dcts::RealNumber >(GetArena());
  }
  return Option_.progress_;
}
inline ::zb::dcts::RealNumber* AdjustOption::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.replay.AdjustOption.progress)
  return _internal_mutable_progress();
}

// .zb.dcts.RealNumber interval_factor = 2;
inline bool AdjustOption::_internal_has_interval_factor() const {
  return Option_case() == kIntervalFactor;
}
inline bool AdjustOption::has_interval_factor() const {
  return _internal_has_interval_factor();
}
inline void AdjustOption::set_has_interval_factor() {
  _oneof_case_[0] = kIntervalFactor;
}
inline ::zb::dcts::RealNumber* AdjustOption::release_interval_factor() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.replay.AdjustOption.interval_factor)
  if (_internal_has_interval_factor()) {
    clear_has_Option();
      ::zb::dcts::RealNumber* temp = Option_.interval_factor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Option_.interval_factor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zb::dcts::RealNumber& AdjustOption::_internal_interval_factor() const {
  return _internal_has_interval_factor()
      ? *Option_.interval_factor_
      : reinterpret_cast< ::zb::dcts::RealNumber&>(::zb::dcts::_RealNumber_default_instance_);
}
inline const ::zb::dcts::RealNumber& AdjustOption::interval_factor() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.replay.AdjustOption.interval_factor)
  return _internal_interval_factor();
}
inline ::zb::dcts::RealNumber* AdjustOption::unsafe_arena_release_interval_factor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.node.replay.AdjustOption.interval_factor)
  if (_internal_has_interval_factor()) {
    clear_has_Option();
    ::zb::dcts::RealNumber* temp = Option_.interval_factor_;
    Option_.interval_factor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AdjustOption::unsafe_arena_set_allocated_interval_factor(::zb::dcts::RealNumber* interval_factor) {
  clear_Option();
  if (interval_factor) {
    set_has_interval_factor();
    Option_.interval_factor_ = interval_factor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.replay.AdjustOption.interval_factor)
}
inline ::zb::dcts::RealNumber* AdjustOption::_internal_mutable_interval_factor() {
  if (!_internal_has_interval_factor()) {
    clear_Option();
    set_has_interval_factor();
    Option_.interval_factor_ = CreateMaybeMessage< ::zb::dcts::RealNumber >(GetArena());
  }
  return Option_.interval_factor_;
}
inline ::zb::dcts::RealNumber* AdjustOption::mutable_interval_factor() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.replay.AdjustOption.interval_factor)
  return _internal_mutable_interval_factor();
}

// .zb.dcts.Boolean pause_resume = 3;
inline bool AdjustOption::_internal_has_pause_resume() const {
  return Option_case() == kPauseResume;
}
inline bool AdjustOption::has_pause_resume() const {
  return _internal_has_pause_resume();
}
inline void AdjustOption::set_has_pause_resume() {
  _oneof_case_[0] = kPauseResume;
}
inline ::zb::dcts::Boolean* AdjustOption::release_pause_resume() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.replay.AdjustOption.pause_resume)
  if (_internal_has_pause_resume()) {
    clear_has_Option();
      ::zb::dcts::Boolean* temp = Option_.pause_resume_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Option_.pause_resume_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zb::dcts::Boolean& AdjustOption::_internal_pause_resume() const {
  return _internal_has_pause_resume()
      ? *Option_.pause_resume_
      : reinterpret_cast< ::zb::dcts::Boolean&>(::zb::dcts::_Boolean_default_instance_);
}
inline const ::zb::dcts::Boolean& AdjustOption::pause_resume() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.replay.AdjustOption.pause_resume)
  return _internal_pause_resume();
}
inline ::zb::dcts::Boolean* AdjustOption::unsafe_arena_release_pause_resume() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.node.replay.AdjustOption.pause_resume)
  if (_internal_has_pause_resume()) {
    clear_has_Option();
    ::zb::dcts::Boolean* temp = Option_.pause_resume_;
    Option_.pause_resume_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AdjustOption::unsafe_arena_set_allocated_pause_resume(::zb::dcts::Boolean* pause_resume) {
  clear_Option();
  if (pause_resume) {
    set_has_pause_resume();
    Option_.pause_resume_ = pause_resume;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.replay.AdjustOption.pause_resume)
}
inline ::zb::dcts::Boolean* AdjustOption::_internal_mutable_pause_resume() {
  if (!_internal_has_pause_resume()) {
    clear_Option();
    set_has_pause_resume();
    Option_.pause_resume_ = CreateMaybeMessage< ::zb::dcts::Boolean >(GetArena());
  }
  return Option_.pause_resume_;
}
inline ::zb::dcts::Boolean* AdjustOption::mutable_pause_resume() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.replay.AdjustOption.pause_resume)
  return _internal_mutable_pause_resume();
}

inline bool AdjustOption::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void AdjustOption::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline AdjustOption::OptionCase AdjustOption::Option_case() const {
  return AdjustOption::OptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AdjustRequest

// .zb.dcts.node.replay.ReplayId replay_id = 1;
inline bool AdjustRequest::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool AdjustRequest::has_replay_id() const {
  return _internal_has_replay_id();
}
inline void AdjustRequest::clear_replay_id() {
  if (GetArena() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
inline const ::zb::dcts::node::replay::ReplayId& AdjustRequest::_internal_replay_id() const {
  const ::zb::dcts::node::replay::ReplayId* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::replay::ReplayId&>(
      ::zb::dcts::node::replay::_ReplayId_default_instance_);
}
inline const ::zb::dcts::node::replay::ReplayId& AdjustRequest::replay_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.replay.AdjustRequest.replay_id)
  return _internal_replay_id();
}
inline void AdjustRequest::unsafe_arena_set_allocated_replay_id(
    ::zb::dcts::node::replay::ReplayId* replay_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.replay.AdjustRequest.replay_id)
}
inline ::zb::dcts::node::replay::ReplayId* AdjustRequest::release_replay_id() {
  
  ::zb::dcts::node::replay::ReplayId* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::replay::ReplayId* AdjustRequest::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.replay.AdjustRequest.replay_id)
  
  ::zb::dcts::node::replay::ReplayId* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::replay::ReplayId* AdjustRequest::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::replay::ReplayId>(GetArena());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::zb::dcts::node::replay::ReplayId* AdjustRequest::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.replay.AdjustRequest.replay_id)
  return _internal_mutable_replay_id();
}
inline void AdjustRequest::set_allocated_replay_id(::zb::dcts::node::replay::ReplayId* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete replay_id_;
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_id);
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.replay.AdjustRequest.replay_id)
}

// .zb.dcts.node.replay.AdjustOption option = 2;
inline bool AdjustRequest::_internal_has_option() const {
  return this != internal_default_instance() && option_ != nullptr;
}
inline bool AdjustRequest::has_option() const {
  return _internal_has_option();
}
inline void AdjustRequest::clear_option() {
  if (GetArena() == nullptr && option_ != nullptr) {
    delete option_;
  }
  option_ = nullptr;
}
inline const ::zb::dcts::node::replay::AdjustOption& AdjustRequest::_internal_option() const {
  const ::zb::dcts::node::replay::AdjustOption* p = option_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::replay::AdjustOption&>(
      ::zb::dcts::node::replay::_AdjustOption_default_instance_);
}
inline const ::zb::dcts::node::replay::AdjustOption& AdjustRequest::option() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.replay.AdjustRequest.option)
  return _internal_option();
}
inline void AdjustRequest::unsafe_arena_set_allocated_option(
    ::zb::dcts::node::replay::AdjustOption* option) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(option_);
  }
  option_ = option;
  if (option) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.replay.AdjustRequest.option)
}
inline ::zb::dcts::node::replay::AdjustOption* AdjustRequest::release_option() {
  
  ::zb::dcts::node::replay::AdjustOption* temp = option_;
  option_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::replay::AdjustOption* AdjustRequest::unsafe_arena_release_option() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.replay.AdjustRequest.option)
  
  ::zb::dcts::node::replay::AdjustOption* temp = option_;
  option_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::replay::AdjustOption* AdjustRequest::_internal_mutable_option() {
  
  if (option_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::replay::AdjustOption>(GetArena());
    option_ = p;
  }
  return option_;
}
inline ::zb::dcts::node::replay::AdjustOption* AdjustRequest::mutable_option() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.replay.AdjustRequest.option)
  return _internal_mutable_option();
}
inline void AdjustRequest::set_allocated_option(::zb::dcts::node::replay::AdjustOption* option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete option_;
  }
  if (option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(option);
    if (message_arena != submessage_arena) {
      option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, option, submessage_arena);
    }
    
  } else {
    
  }
  option_ = option;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.replay.AdjustRequest.option)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace replay
}  // namespace node
}  // namespace dcts
}  // namespace zb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2freplay_2eproto
