// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node/nodeServer.proto

#include "node/nodeServer.pb.h"
#include "node/nodeServer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace node {
namespace server {

static const char* GeneralService_method_names[] = {
  "/zb.dcts.node.server.GeneralService/ListAllNodes",
  "/zb.dcts.node.server.GeneralService/GetNodeInfo",
  "/zb.dcts.node.server.GeneralService/PostNodeControl",
  "/zb.dcts.node.server.GeneralService/GetNodeControlLastReply",
  "/zb.dcts.node.server.GeneralService/ListAllTasks",
  "/zb.dcts.node.server.GeneralService/GetTaskSumary",
  "/zb.dcts.node.server.GeneralService/AbortOne",
  "/zb.dcts.node.server.GeneralService/AbortAll",
};

std::unique_ptr< GeneralService::Stub> GeneralService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GeneralService::Stub> stub(new GeneralService::Stub(channel));
  return stub;
}

GeneralService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListAllNodes_(GeneralService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodeInfo_(GeneralService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostNodeControl_(GeneralService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodeControlLastReply_(GeneralService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAllTasks_(GeneralService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskSumary_(GeneralService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AbortOne_(GeneralService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AbortAll_(GeneralService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GeneralService::Stub::ListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::node::NodesInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::zb::dcts::node::NodesInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListAllNodes_, context, request, response);
}

void GeneralService::Stub::experimental_async::ListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::NodesInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::zb::dcts::node::NodesInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAllNodes_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::ListAllNodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::NodesInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAllNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodesInfo>* GeneralService::Stub::PrepareAsyncListAllNodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListAllNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodesInfo>* GeneralService::Stub::AsyncListAllNodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListAllNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeneralService::Stub::GetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::zb::dcts::node::NodeInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::NodeId, ::zb::dcts::node::NodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNodeInfo_, context, request, response);
}

void GeneralService::Stub::experimental_async::GetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::NodeInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::NodeId, ::zb::dcts::node::NodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::GetNodeInfo(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::NodeInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeInfo>* GeneralService::Stub::PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::NodeInfo, ::zb::dcts::node::NodeId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNodeInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::NodeInfo>* GeneralService::Stub::AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodeInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeneralService::Stub::PostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::server::NodeControl, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PostNodeControl_, context, request, response);
}

void GeneralService::Stub::experimental_async::PostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::server::NodeControl, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostNodeControl_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::PostNodeControl(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostNodeControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::PrepareAsyncPostNodeControlRaw(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::zb::dcts::node::server::NodeControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PostNodeControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::AsyncPostNodeControlRaw(::grpc::ClientContext* context, const ::zb::dcts::node::server::NodeControl& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPostNodeControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeneralService::Stub::GetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::zb::dcts::node::server::NodeControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::node::NodeId, ::zb::dcts::node::server::NodeControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNodeControlLastReply_, context, request, response);
}

void GeneralService::Stub::experimental_async::GetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::server::NodeControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::node::NodeId, ::zb::dcts::node::server::NodeControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeControlLastReply_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::GetNodeControlLastReply(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::server::NodeControl* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeControlLastReply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::NodeControl>* GeneralService::Stub::PrepareAsyncGetNodeControlLastReplyRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::server::NodeControl, ::zb::dcts::node::NodeId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNodeControlLastReply_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::NodeControl>* GeneralService::Stub::AsyncGetNodeControlLastReplyRaw(::grpc::ClientContext* context, const ::zb::dcts::node::NodeId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodeControlLastReplyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeneralService::Stub::ListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::node::server::ServerTasksInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::zb::dcts::node::server::ServerTasksInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListAllTasks_, context, request, response);
}

void GeneralService::Stub::experimental_async::ListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::server::ServerTasksInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::zb::dcts::node::server::ServerTasksInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAllTasks_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::ListAllTasks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::server::ServerTasksInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAllTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTasksInfo>* GeneralService::Stub::PrepareAsyncListAllTasksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::server::ServerTasksInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListAllTasks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTasksInfo>* GeneralService::Stub::AsyncListAllTasksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListAllTasksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeneralService::Stub::GetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::zb::dcts::node::server::ServerTaskSummary* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::server::ServerTaskSummary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTaskSumary_, context, request, response);
}

void GeneralService::Stub::experimental_async::GetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::server::ServerTaskSummary* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::zb::dcts::node::server::ServerTaskSummary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTaskSumary_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::GetTaskSumary(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::server::ServerTaskSummary* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTaskSumary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTaskSummary>* GeneralService::Stub::PrepareAsyncGetTaskSumaryRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zb::dcts::node::server::ServerTaskSummary, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTaskSumary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::node::server::ServerTaskSummary>* GeneralService::Stub::AsyncGetTaskSumaryRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTaskSumaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeneralService::Stub::AbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zb::dcts::TaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AbortOne_, context, request, response);
}

void GeneralService::Stub::experimental_async::AbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zb::dcts::TaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AbortOne_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::AbortOne(::grpc::ClientContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AbortOne_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::PrepareAsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::zb::dcts::TaskId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AbortOne_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::AsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::TaskId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAbortOneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GeneralService::Stub::AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AbortAll_, context, request, response);
}

void GeneralService::Stub::experimental_async::AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AbortAll_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AbortAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::PrepareAsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AbortAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::AsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAbortAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

GeneralService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::google::protobuf::Empty, ::zb::dcts::node::NodesInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeneralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::zb::dcts::node::NodesInfo* resp) {
               return service->ListAllNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::zb::dcts::node::NodeId, ::zb::dcts::node::NodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeneralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::NodeId* req,
             ::zb::dcts::node::NodeInfo* resp) {
               return service->GetNodeInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::zb::dcts::node::server::NodeControl, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeneralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::server::NodeControl* req,
             ::google::protobuf::Empty* resp) {
               return service->PostNodeControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::zb::dcts::node::NodeId, ::zb::dcts::node::server::NodeControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeneralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::node::NodeId* req,
             ::zb::dcts::node::server::NodeControl* resp) {
               return service->GetNodeControlLastReply(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::google::protobuf::Empty, ::zb::dcts::node::server::ServerTasksInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeneralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::zb::dcts::node::server::ServerTasksInfo* resp) {
               return service->ListAllTasks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::zb::dcts::TaskId, ::zb::dcts::node::server::ServerTaskSummary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeneralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::zb::dcts::node::server::ServerTaskSummary* resp) {
               return service->GetTaskSumary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::zb::dcts::TaskId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeneralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zb::dcts::TaskId* req,
             ::google::protobuf::Empty* resp) {
               return service->AbortOne(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GeneralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->AbortAll(ctx, req, resp);
             }, this)));
}

GeneralService::Service::~Service() {
}

::grpc::Status GeneralService::Service::ListAllNodes(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::NodesInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::GetNodeInfo(::grpc::ServerContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::NodeInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::PostNodeControl(::grpc::ServerContext* context, const ::zb::dcts::node::server::NodeControl* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::GetNodeControlLastReply(::grpc::ServerContext* context, const ::zb::dcts::node::NodeId* request, ::zb::dcts::node::server::NodeControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::ListAllTasks(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::node::server::ServerTasksInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::GetTaskSumary(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::zb::dcts::node::server::ServerTaskSummary* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::AbortOne(::grpc::ServerContext* context, const ::zb::dcts::TaskId* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::AbortAll(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace node
}  // namespace server

