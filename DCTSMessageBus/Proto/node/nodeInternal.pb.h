// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/nodeInternal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fnodeInternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fnodeInternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "node/node.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fnodeInternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fnodeInternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fnodeInternal_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
class AbnormalMsgRecord;
struct AbnormalMsgRecordDefaultTypeInternal;
extern AbnormalMsgRecordDefaultTypeInternal _AbnormalMsgRecord_default_instance_;
class DeviceConfig;
struct DeviceConfigDefaultTypeInternal;
extern DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
class LANConfig;
struct LANConfigDefaultTypeInternal;
extern LANConfigDefaultTypeInternal _LANConfig_default_instance_;
class NodeConfig;
struct NodeConfigDefaultTypeInternal;
extern NodeConfigDefaultTypeInternal _NodeConfig_default_instance_;
class NodeIdentity;
struct NodeIdentityDefaultTypeInternal;
extern NodeIdentityDefaultTypeInternal _NodeIdentity_default_instance_;
class ServerConfig;
struct ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
class ServerConfig_ServicesEntry_DoNotUse;
struct ServerConfig_ServicesEntry_DoNotUseDefaultTypeInternal;
extern ServerConfig_ServicesEntry_DoNotUseDefaultTypeInternal _ServerConfig_ServicesEntry_DoNotUse_default_instance_;
class TaskMsgId;
struct TaskMsgIdDefaultTypeInternal;
extern TaskMsgIdDefaultTypeInternal _TaskMsgId_default_instance_;
class WANConfig;
struct WANConfigDefaultTypeInternal;
extern WANConfigDefaultTypeInternal _WANConfig_default_instance_;
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::AbnormalMsgRecord* Arena::CreateMaybeMessage<::zb::dcts::node::AbnormalMsgRecord>(Arena*);
template<> ::zb::dcts::node::DeviceConfig* Arena::CreateMaybeMessage<::zb::dcts::node::DeviceConfig>(Arena*);
template<> ::zb::dcts::node::LANConfig* Arena::CreateMaybeMessage<::zb::dcts::node::LANConfig>(Arena*);
template<> ::zb::dcts::node::NodeConfig* Arena::CreateMaybeMessage<::zb::dcts::node::NodeConfig>(Arena*);
template<> ::zb::dcts::node::NodeIdentity* Arena::CreateMaybeMessage<::zb::dcts::node::NodeIdentity>(Arena*);
template<> ::zb::dcts::node::ServerConfig* Arena::CreateMaybeMessage<::zb::dcts::node::ServerConfig>(Arena*);
template<> ::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse* Arena::CreateMaybeMessage<::zb::dcts::node::ServerConfig_ServicesEntry_DoNotUse>(Arena*);
template<> ::zb::dcts::node::TaskMsgId* Arena::CreateMaybeMessage<::zb::dcts::node::TaskMsgId>(Arena*);
template<> ::zb::dcts::node::WANConfig* Arena::CreateMaybeMessage<::zb::dcts::node::WANConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {

enum TaskCmd : int {
  T_START = 0,
  T_STOP = 1,
  T_MODIFY = 2,
  TaskCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskCmd_IsValid(int value);
constexpr TaskCmd TaskCmd_MIN = T_START;
constexpr TaskCmd TaskCmd_MAX = T_MODIFY;
constexpr int TaskCmd_ARRAYSIZE = TaskCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskCmd_descriptor();
template<typename T>
inline const std::string& TaskCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskCmd_descriptor(), enum_t_value);
}
inline bool TaskCmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskCmd>(
    TaskCmd_descriptor(), name, value);
}
enum CSTip : int {
  NODE_TICK = 0,
  SERVER_TICK = 1,
  NODE_CONTROL = 2,
  TASK_REQUEST = 3,
  REPLY = 4,
  CSTip_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CSTip_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CSTip_IsValid(int value);
constexpr CSTip CSTip_MIN = NODE_TICK;
constexpr CSTip CSTip_MAX = REPLY;
constexpr int CSTip_ARRAYSIZE = CSTip_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSTip_descriptor();
template<typename T>
inline const std::string& CSTip_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSTip>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSTip_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSTip_descriptor(), enum_t_value);
}
inline bool CSTip_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSTip* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSTip>(
    CSTip_descriptor(), name, value);
}
// ===================================================================

class NodeIdentity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.NodeIdentity) */ {
 public:
  inline NodeIdentity() : NodeIdentity(nullptr) {}
  virtual ~NodeIdentity();
  explicit constexpr NodeIdentity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeIdentity(const NodeIdentity& from);
  NodeIdentity(NodeIdentity&& from) noexcept
    : NodeIdentity() {
    *this = ::std::move(from);
  }

  inline NodeIdentity& operator=(const NodeIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeIdentity& operator=(NodeIdentity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeIdentity& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeIdentity* internal_default_instance() {
    return reinterpret_cast<const NodeIdentity*>(
               &_NodeIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeIdentity& a, NodeIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeIdentity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeIdentity* New() const final {
    return CreateMaybeMessage<NodeIdentity>(nullptr);
  }

  NodeIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeIdentity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeIdentity& from);
  void MergeFrom(const NodeIdentity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeIdentity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.NodeIdentity";
  }
  protected:
  explicit NodeIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kDefaultPosFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string node_name = 1;
  void clear_node_name();
  const std::string& node_name() const;
  void set_node_name(const std::string& value);
  void set_node_name(std::string&& value);
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // .zb.dcts.Position default_pos = 2;
  bool has_default_pos() const;
  private:
  bool _internal_has_default_pos() const;
  public:
  void clear_default_pos();
  const ::zb::dcts::Position& default_pos() const;
  ::zb::dcts::Position* release_default_pos();
  ::zb::dcts::Position* mutable_default_pos();
  void set_allocated_default_pos(::zb::dcts::Position* default_pos);
  private:
  const ::zb::dcts::Position& _internal_default_pos() const;
  ::zb::dcts::Position* _internal_mutable_default_pos();
  public:
  void unsafe_arena_set_allocated_default_pos(
      ::zb::dcts::Position* default_pos);
  ::zb::dcts::Position* unsafe_arena_release_default_pos();

  // .zb.dcts.node.NodeId id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::node::NodeId& id() const;
  ::zb::dcts::node::NodeId* release_id();
  ::zb::dcts::node::NodeId* mutable_id();
  void set_allocated_id(::zb::dcts::node::NodeId* id);
  private:
  const ::zb::dcts::node::NodeId& _internal_id() const;
  ::zb::dcts::node::NodeId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::node::NodeId* id);
  ::zb::dcts::node::NodeId* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.NodeIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::zb::dcts::Position* default_pos_;
  ::zb::dcts::node::NodeId* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeInternal_2eproto;
};
// -------------------------------------------------------------------

class WANConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.WANConfig) */ {
 public:
  inline WANConfig() : WANConfig(nullptr) {}
  virtual ~WANConfig();
  explicit constexpr WANConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WANConfig(const WANConfig& from);
  WANConfig(WANConfig&& from) noexcept
    : WANConfig() {
    *this = ::std::move(from);
  }

  inline WANConfig& operator=(const WANConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WANConfig& operator=(WANConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WANConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WANConfig* internal_default_instance() {
    return reinterpret_cast<const WANConfig*>(
               &_WANConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WANConfig& a, WANConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WANConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WANConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WANConfig* New() const final {
    return CreateMaybeMessage<WANConfig>(nullptr);
  }

  WANConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WANConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WANConfig& from);
  void MergeFrom(const WANConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WANConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.WANConfig";
  }
  protected:
  explicit WANConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kSourceFieldNumber = 2,
    kPubFieldNumber = 3,
    kSubFieldNumber = 4,
  };
  // .zb.dcts.ZeromqLinkCfg client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::zb::dcts::ZeromqLinkCfg& client() const;
  ::zb::dcts::ZeromqLinkCfg* release_client();
  ::zb::dcts::ZeromqLinkCfg* mutable_client();
  void set_allocated_client(::zb::dcts::ZeromqLinkCfg* client);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_client() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::zb::dcts::ZeromqLinkCfg* client);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_client();

  // .zb.dcts.ZeromqLinkCfg source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::zb::dcts::ZeromqLinkCfg& source() const;
  ::zb::dcts::ZeromqLinkCfg* release_source();
  ::zb::dcts::ZeromqLinkCfg* mutable_source();
  void set_allocated_source(::zb::dcts::ZeromqLinkCfg* source);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_source() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::zb::dcts::ZeromqLinkCfg* source);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_source();

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  bool has_pub() const;
  private:
  bool _internal_has_pub() const;
  public:
  void clear_pub();
  const ::zb::dcts::ZeromqLinkCfg& pub() const;
  ::zb::dcts::ZeromqLinkCfg* release_pub();
  ::zb::dcts::ZeromqLinkCfg* mutable_pub();
  void set_allocated_pub(::zb::dcts::ZeromqLinkCfg* pub);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_pub() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_pub();
  public:
  void unsafe_arena_set_allocated_pub(
      ::zb::dcts::ZeromqLinkCfg* pub);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_pub();

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  bool has_sub() const;
  private:
  bool _internal_has_sub() const;
  public:
  void clear_sub();
  const ::zb::dcts::ZeromqLinkCfg& sub() const;
  ::zb::dcts::ZeromqLinkCfg* release_sub();
  ::zb::dcts::ZeromqLinkCfg* mutable_sub();
  void set_allocated_sub(::zb::dcts::ZeromqLinkCfg* sub);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_sub() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_sub();
  public:
  void unsafe_arena_set_allocated_sub(
      ::zb::dcts::ZeromqLinkCfg* sub);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_sub();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.WANConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::ZeromqLinkCfg* client_;
  ::zb::dcts::ZeromqLinkCfg* source_;
  ::zb::dcts::ZeromqLinkCfg* pub_;
  ::zb::dcts::ZeromqLinkCfg* sub_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeInternal_2eproto;
};
// -------------------------------------------------------------------

class DeviceConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.DeviceConfig) */ {
 public:
  inline DeviceConfig() : DeviceConfig(nullptr) {}
  virtual ~DeviceConfig();
  explicit constexpr DeviceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceConfig(const DeviceConfig& from);
  DeviceConfig(DeviceConfig&& from) noexcept
    : DeviceConfig() {
    *this = ::std::move(from);
  }

  inline DeviceConfig& operator=(const DeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConfig& operator=(DeviceConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceConfig*>(
               &_DeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceConfig& a, DeviceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceConfig* New() const final {
    return CreateMaybeMessage<DeviceConfig>(nullptr);
  }

  DeviceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceConfig& from);
  void MergeFrom(const DeviceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.DeviceConfig";
  }
  protected:
  explicit DeviceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .zb.dcts.IPv4Address address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::zb::dcts::IPv4Address& address() const;
  ::zb::dcts::IPv4Address* release_address();
  ::zb::dcts::IPv4Address* mutable_address();
  void set_allocated_address(::zb::dcts::IPv4Address* address);
  private:
  const ::zb::dcts::IPv4Address& _internal_address() const;
  ::zb::dcts::IPv4Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::zb::dcts::IPv4Address* address);
  ::zb::dcts::IPv4Address* unsafe_arena_release_address();

  // .zb.dcts.node.DeviceId id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::node::DeviceId& id() const;
  ::zb::dcts::node::DeviceId* release_id();
  ::zb::dcts::node::DeviceId* mutable_id();
  void set_allocated_id(::zb::dcts::node::DeviceId* id);
  private:
  const ::zb::dcts::node::DeviceId& _internal_id() const;
  ::zb::dcts::node::DeviceId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::node::DeviceId* id);
  ::zb::dcts::node::DeviceId* unsafe_arena_release_id();

  // .zb.dcts.node.DeviceType type = 1;
  void clear_type();
  ::zb::dcts::node::DeviceType type() const;
  void set_type(::zb::dcts::node::DeviceType value);
  private:
  ::zb::dcts::node::DeviceType _internal_type() const;
  void _internal_set_type(::zb::dcts::node::DeviceType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.DeviceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::IPv4Address* address_;
  ::zb::dcts::node::DeviceId* id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeInternal_2eproto;
};
// -------------------------------------------------------------------

class LANConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.LANConfig) */ {
 public:
  inline LANConfig() : LANConfig(nullptr) {}
  virtual ~LANConfig();
  explicit constexpr LANConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LANConfig(const LANConfig& from);
  LANConfig(LANConfig&& from) noexcept
    : LANConfig() {
    *this = ::std::move(from);
  }

  inline LANConfig& operator=(const LANConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LANConfig& operator=(LANConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LANConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LANConfig* internal_default_instance() {
    return reinterpret_cast<const LANConfig*>(
               &_LANConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LANConfig& a, LANConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LANConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LANConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LANConfig* New() const final {
    return CreateMaybeMessage<LANConfig>(nullptr);
  }

  LANConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LANConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LANConfig& from);
  void MergeFrom(const LANConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LANConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.LANConfig";
  }
  protected:
  explicit LANConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCluster3900FieldNumber = 1,
    kClusterRadarDFFieldNumber = 2,
  };
  // repeated .zb.dcts.node.DeviceConfig cluster_3900 = 1;
  int cluster_3900_size() const;
  private:
  int _internal_cluster_3900_size() const;
  public:
  void clear_cluster_3900();
  ::zb::dcts::node::DeviceConfig* mutable_cluster_3900(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig >*
      mutable_cluster_3900();
  private:
  const ::zb::dcts::node::DeviceConfig& _internal_cluster_3900(int index) const;
  ::zb::dcts::node::DeviceConfig* _internal_add_cluster_3900();
  public:
  const ::zb::dcts::node::DeviceConfig& cluster_3900(int index) const;
  ::zb::dcts::node::DeviceConfig* add_cluster_3900();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig >&
      cluster_3900() const;

  // repeated .zb.dcts.node.DeviceConfig cluster_radarDF = 2;
  int cluster_radardf_size() const;
  private:
  int _internal_cluster_radardf_size() const;
  public:
  void clear_cluster_radardf();
  ::zb::dcts::node::DeviceConfig* mutable_cluster_radardf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig >*
      mutable_cluster_radardf();
  private:
  const ::zb::dcts::node::DeviceConfig& _internal_cluster_radardf(int index) const;
  ::zb::dcts::node::DeviceConfig* _internal_add_cluster_radardf();
  public:
  const ::zb::dcts::node::DeviceConfig& cluster_radardf(int index) const;
  ::zb::dcts::node::DeviceConfig* add_cluster_radardf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig >&
      cluster_radardf() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.node.LANConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig > cluster_3900_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig > cluster_radardf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeInternal_2eproto;
};
// -------------------------------------------------------------------

class NodeConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.NodeConfig) */ {
 public:
  inline NodeConfig() : NodeConfig(nullptr) {}
  virtual ~NodeConfig();
  explicit constexpr NodeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeConfig(const NodeConfig& from);
  NodeConfig(NodeConfig&& from) noexcept
    : NodeConfig() {
    *this = ::std::move(from);
  }

  inline NodeConfig& operator=(const NodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeConfig& operator=(NodeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeConfig* internal_default_instance() {
    return reinterpret_cast<const NodeConfig*>(
               &_NodeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NodeConfig& a, NodeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeConfig* New() const final {
    return CreateMaybeMessage<NodeConfig>(nullptr);
  }

  NodeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeConfig& from);
  void MergeFrom(const NodeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.NodeConfig";
  }
  protected:
  explicit NodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kWANConfFieldNumber = 2,
    kLANConfFieldNumber = 3,
  };
  // .zb.dcts.node.NodeIdentity identity = 1;
  bool has_identity() const;
  private:
  bool _internal_has_identity() const;
  public:
  void clear_identity();
  const ::zb::dcts::node::NodeIdentity& identity() const;
  ::zb::dcts::node::NodeIdentity* release_identity();
  ::zb::dcts::node::NodeIdentity* mutable_identity();
  void set_allocated_identity(::zb::dcts::node::NodeIdentity* identity);
  private:
  const ::zb::dcts::node::NodeIdentity& _internal_identity() const;
  ::zb::dcts::node::NodeIdentity* _internal_mutable_identity();
  public:
  void unsafe_arena_set_allocated_identity(
      ::zb::dcts::node::NodeIdentity* identity);
  ::zb::dcts::node::NodeIdentity* unsafe_arena_release_identity();

  // .zb.dcts.node.WANConfig WAN_conf = 2;
  bool has_wan_conf() const;
  private:
  bool _internal_has_wan_conf() const;
  public:
  void clear_wan_conf();
  const ::zb::dcts::node::WANConfig& wan_conf() const;
  ::zb::dcts::node::WANConfig* release_wan_conf();
  ::zb::dcts::node::WANConfig* mutable_wan_conf();
  void set_allocated_wan_conf(::zb::dcts::node::WANConfig* wan_conf);
  private:
  const ::zb::dcts::node::WANConfig& _internal_wan_conf() const;
  ::zb::dcts::node::WANConfig* _internal_mutable_wan_conf();
  public:
  void unsafe_arena_set_allocated_wan_conf(
      ::zb::dcts::node::WANConfig* wan_conf);
  ::zb::dcts::node::WANConfig* unsafe_arena_release_wan_conf();

  // .zb.dcts.node.LANConfig LAN_conf = 3;
  bool has_lan_conf() const;
  private:
  bool _internal_has_lan_conf() const;
  public:
  void clear_lan_conf();
  const ::zb::dcts::node::LANConfig& lan_conf() const;
  ::zb::dcts::node::LANConfig* release_lan_conf();
  ::zb::dcts::node::LANConfig* mutable_lan_conf();
  void set_allocated_lan_conf(::zb::dcts::node::LANConfig* lan_conf);
  private:
  const ::zb::dcts::node::LANConfig& _internal_lan_conf() const;
  ::zb::dcts::node::LANConfig* _internal_mutable_lan_conf();
  public:
  void unsafe_arena_set_allocated_lan_conf(
      ::zb::dcts::node::LANConfig* lan_conf);
  ::zb::dcts::node::LANConfig* unsafe_arena_release_lan_conf();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.NodeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::NodeIdentity* identity_;
  ::zb::dcts::node::WANConfig* wan_conf_;
  ::zb::dcts::node::LANConfig* lan_conf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeInternal_2eproto;
};
// -------------------------------------------------------------------

class TaskMsgId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.TaskMsgId) */ {
 public:
  inline TaskMsgId() : TaskMsgId(nullptr) {}
  virtual ~TaskMsgId();
  explicit constexpr TaskMsgId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskMsgId(const TaskMsgId& from);
  TaskMsgId(TaskMsgId&& from) noexcept
    : TaskMsgId() {
    *this = ::std::move(from);
  }

  inline TaskMsgId& operator=(const TaskMsgId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskMsgId& operator=(TaskMsgId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskMsgId& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskMsgId* internal_default_instance() {
    return reinterpret_cast<const TaskMsgId*>(
               &_TaskMsgId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TaskMsgId& a, TaskMsgId& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskMsgId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskMsgId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskMsgId* New() const final {
    return CreateMaybeMessage<TaskMsgId>(nullptr);
  }

  TaskMsgId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskMsgId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskMsgId& from);
  void MergeFrom(const TaskMsgId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskMsgId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.TaskMsgId";
  }
  protected:
  explicit TaskMsgId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
    kNidFieldNumber = 2,
    kDidFieldNumber = 3,
  };
  // uint32 tid = 1;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tid() const;
  void _internal_set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nid = 2;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nid() const;
  void _internal_set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 did = 3;
  void clear_did();
  ::PROTOBUF_NAMESPACE_ID::uint32 did() const;
  void set_did(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_did() const;
  void _internal_set_did(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.TaskMsgId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 did_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeInternal_2eproto;
};
// -------------------------------------------------------------------

class AbnormalMsgRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.AbnormalMsgRecord) */ {
 public:
  inline AbnormalMsgRecord() : AbnormalMsgRecord(nullptr) {}
  virtual ~AbnormalMsgRecord();
  explicit constexpr AbnormalMsgRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbnormalMsgRecord(const AbnormalMsgRecord& from);
  AbnormalMsgRecord(AbnormalMsgRecord&& from) noexcept
    : AbnormalMsgRecord() {
    *this = ::std::move(from);
  }

  inline AbnormalMsgRecord& operator=(const AbnormalMsgRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbnormalMsgRecord& operator=(AbnormalMsgRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AbnormalMsgRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbnormalMsgRecord* internal_default_instance() {
    return reinterpret_cast<const AbnormalMsgRecord*>(
               &_AbnormalMsgRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AbnormalMsgRecord& a, AbnormalMsgRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AbnormalMsgRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbnormalMsgRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AbnormalMsgRecord* New() const final {
    return CreateMaybeMessage<AbnormalMsgRecord>(nullptr);
  }

  AbnormalMsgRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbnormalMsgRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbnormalMsgRecord& from);
  void MergeFrom(const AbnormalMsgRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbnormalMsgRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.AbnormalMsgRecord";
  }
  protected:
  explicit AbnormalMsgRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskMsgIdFieldNumber = 1,
  };
  // repeated .zb.dcts.node.TaskMsgId task_msg_id = 1;
  int task_msg_id_size() const;
  private:
  int _internal_task_msg_id_size() const;
  public:
  void clear_task_msg_id();
  ::zb::dcts::node::TaskMsgId* mutable_task_msg_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::TaskMsgId >*
      mutable_task_msg_id();
  private:
  const ::zb::dcts::node::TaskMsgId& _internal_task_msg_id(int index) const;
  ::zb::dcts::node::TaskMsgId* _internal_add_task_msg_id();
  public:
  const ::zb::dcts::node::TaskMsgId& task_msg_id(int index) const;
  ::zb::dcts::node::TaskMsgId* add_task_msg_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::TaskMsgId >&
      task_msg_id() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.node.AbnormalMsgRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::TaskMsgId > task_msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeInternal_2eproto;
};
// -------------------------------------------------------------------

class ServerConfig_ServicesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerConfig_ServicesEntry_DoNotUse, 
    std::string, ::zb::dcts::IPv4Address,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerConfig_ServicesEntry_DoNotUse, 
    std::string, ::zb::dcts::IPv4Address,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ServerConfig_ServicesEntry_DoNotUse();
  explicit constexpr ServerConfig_ServicesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ServerConfig_ServicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ServerConfig_ServicesEntry_DoNotUse& other);
  static const ServerConfig_ServicesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServerConfig_ServicesEntry_DoNotUse*>(&_ServerConfig_ServicesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.node.ServerConfig.ServicesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2fnodeInternal_2eproto);
    return ::descriptor_table_node_2fnodeInternal_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class ServerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.ServerConfig) */ {
 public:
  inline ServerConfig() : ServerConfig(nullptr) {}
  virtual ~ServerConfig();
  explicit constexpr ServerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerConfig(const ServerConfig& from);
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const final {
    return CreateMaybeMessage<ServerConfig>(nullptr);
  }

  ServerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.ServerConfig";
  }
  protected:
  explicit ServerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fnodeInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 5,
    kServerFieldNumber = 1,
    kSinkFieldNumber = 2,
    kPubFieldNumber = 3,
    kSubFieldNumber = 4,
  };
  // map<string, .zb.dcts.IPv4Address> services = 5;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >&
      _internal_services() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >*
      _internal_mutable_services();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >&
      services() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >*
      mutable_services();

  // .zb.dcts.ZeromqLinkCfg server = 1;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::zb::dcts::ZeromqLinkCfg& server() const;
  ::zb::dcts::ZeromqLinkCfg* release_server();
  ::zb::dcts::ZeromqLinkCfg* mutable_server();
  void set_allocated_server(::zb::dcts::ZeromqLinkCfg* server);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_server() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_server();
  public:
  void unsafe_arena_set_allocated_server(
      ::zb::dcts::ZeromqLinkCfg* server);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_server();

  // .zb.dcts.ZeromqLinkCfg sink = 2;
  bool has_sink() const;
  private:
  bool _internal_has_sink() const;
  public:
  void clear_sink();
  const ::zb::dcts::ZeromqLinkCfg& sink() const;
  ::zb::dcts::ZeromqLinkCfg* release_sink();
  ::zb::dcts::ZeromqLinkCfg* mutable_sink();
  void set_allocated_sink(::zb::dcts::ZeromqLinkCfg* sink);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_sink() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_sink();
  public:
  void unsafe_arena_set_allocated_sink(
      ::zb::dcts::ZeromqLinkCfg* sink);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_sink();

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  bool has_pub() const;
  private:
  bool _internal_has_pub() const;
  public:
  void clear_pub();
  const ::zb::dcts::ZeromqLinkCfg& pub() const;
  ::zb::dcts::ZeromqLinkCfg* release_pub();
  ::zb::dcts::ZeromqLinkCfg* mutable_pub();
  void set_allocated_pub(::zb::dcts::ZeromqLinkCfg* pub);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_pub() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_pub();
  public:
  void unsafe_arena_set_allocated_pub(
      ::zb::dcts::ZeromqLinkCfg* pub);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_pub();

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  bool has_sub() const;
  private:
  bool _internal_has_sub() const;
  public:
  void clear_sub();
  const ::zb::dcts::ZeromqLinkCfg& sub() const;
  ::zb::dcts::ZeromqLinkCfg* release_sub();
  ::zb::dcts::ZeromqLinkCfg* mutable_sub();
  void set_allocated_sub(::zb::dcts::ZeromqLinkCfg* sub);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_sub() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_sub();
  public:
  void unsafe_arena_set_allocated_sub(
      ::zb::dcts::ZeromqLinkCfg* sub);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_sub();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.ServerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ServerConfig_ServicesEntry_DoNotUse,
      std::string, ::zb::dcts::IPv4Address,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> services_;
  ::zb::dcts::ZeromqLinkCfg* server_;
  ::zb::dcts::ZeromqLinkCfg* sink_;
  ::zb::dcts::ZeromqLinkCfg* pub_;
  ::zb::dcts::ZeromqLinkCfg* sub_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fnodeInternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeIdentity

// string node_name = 1;
inline void NodeIdentity::clear_node_name() {
  node_name_.ClearToEmpty();
}
inline const std::string& NodeIdentity::node_name() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.NodeIdentity.node_name)
  return _internal_node_name();
}
inline void NodeIdentity::set_node_name(const std::string& value) {
  _internal_set_node_name(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.NodeIdentity.node_name)
}
inline std::string* NodeIdentity::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.NodeIdentity.node_name)
  return _internal_mutable_node_name();
}
inline const std::string& NodeIdentity::_internal_node_name() const {
  return node_name_.Get();
}
inline void NodeIdentity::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeIdentity::set_node_name(std::string&& value) {
  
  node_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.NodeIdentity.node_name)
}
inline void NodeIdentity::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.NodeIdentity.node_name)
}
inline void NodeIdentity::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.NodeIdentity.node_name)
}
inline std::string* NodeIdentity::_internal_mutable_node_name() {
  
  return node_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeIdentity::release_node_name() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.NodeIdentity.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeIdentity::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.NodeIdentity.node_name)
}

// .zb.dcts.node.NodeId id = 3;
inline bool NodeIdentity::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NodeIdentity::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::node::NodeId& NodeIdentity::_internal_id() const {
  const ::zb::dcts::node::NodeId* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeId&>(
      ::zb::dcts::node::_NodeId_default_instance_);
}
inline const ::zb::dcts::node::NodeId& NodeIdentity::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.NodeIdentity.id)
  return _internal_id();
}
inline void NodeIdentity::unsafe_arena_set_allocated_id(
    ::zb::dcts::node::NodeId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.NodeIdentity.id)
}
inline ::zb::dcts::node::NodeId* NodeIdentity::release_id() {
  
  ::zb::dcts::node::NodeId* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeId* NodeIdentity::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.NodeIdentity.id)
  
  ::zb::dcts::node::NodeId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeId* NodeIdentity::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::node::NodeId* NodeIdentity::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.NodeIdentity.id)
  return _internal_mutable_id();
}
inline void NodeIdentity::set_allocated_id(::zb::dcts::node::NodeId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.NodeIdentity.id)
}

// .zb.dcts.Position default_pos = 2;
inline bool NodeIdentity::_internal_has_default_pos() const {
  return this != internal_default_instance() && default_pos_ != nullptr;
}
inline bool NodeIdentity::has_default_pos() const {
  return _internal_has_default_pos();
}
inline const ::zb::dcts::Position& NodeIdentity::_internal_default_pos() const {
  const ::zb::dcts::Position* p = default_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::Position&>(
      ::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& NodeIdentity::default_pos() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.NodeIdentity.default_pos)
  return _internal_default_pos();
}
inline void NodeIdentity::unsafe_arena_set_allocated_default_pos(
    ::zb::dcts::Position* default_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_pos_);
  }
  default_pos_ = default_pos;
  if (default_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.NodeIdentity.default_pos)
}
inline ::zb::dcts::Position* NodeIdentity::release_default_pos() {
  
  ::zb::dcts::Position* temp = default_pos_;
  default_pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* NodeIdentity::unsafe_arena_release_default_pos() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.NodeIdentity.default_pos)
  
  ::zb::dcts::Position* temp = default_pos_;
  default_pos_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* NodeIdentity::_internal_mutable_default_pos() {
  
  if (default_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    default_pos_ = p;
  }
  return default_pos_;
}
inline ::zb::dcts::Position* NodeIdentity::mutable_default_pos() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.NodeIdentity.default_pos)
  return _internal_mutable_default_pos();
}
inline void NodeIdentity::set_allocated_default_pos(::zb::dcts::Position* default_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_pos_);
  }
  if (default_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_pos)->GetArena();
    if (message_arena != submessage_arena) {
      default_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_pos, submessage_arena);
    }
    
  } else {
    
  }
  default_pos_ = default_pos;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.NodeIdentity.default_pos)
}

// -------------------------------------------------------------------

// WANConfig

// .zb.dcts.ZeromqLinkCfg client = 1;
inline bool WANConfig::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool WANConfig::has_client() const {
  return _internal_has_client();
}
inline const ::zb::dcts::ZeromqLinkCfg& WANConfig::_internal_client() const {
  const ::zb::dcts::ZeromqLinkCfg* p = client_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg&>(
      ::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& WANConfig::client() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.WANConfig.client)
  return _internal_client();
}
inline void WANConfig::unsafe_arena_set_allocated_client(
    ::zb::dcts::ZeromqLinkCfg* client) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.WANConfig.client)
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::release_client() {
  
  ::zb::dcts::ZeromqLinkCfg* temp = client_;
  client_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.WANConfig.client)
  
  ::zb::dcts::ZeromqLinkCfg* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    client_ = p;
  }
  return client_;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::mutable_client() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.WANConfig.client)
  return _internal_mutable_client();
}
inline void WANConfig::set_allocated_client(::zb::dcts::ZeromqLinkCfg* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client)->GetArena();
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.WANConfig.client)
}

// .zb.dcts.ZeromqLinkCfg source = 2;
inline bool WANConfig::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool WANConfig::has_source() const {
  return _internal_has_source();
}
inline const ::zb::dcts::ZeromqLinkCfg& WANConfig::_internal_source() const {
  const ::zb::dcts::ZeromqLinkCfg* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg&>(
      ::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& WANConfig::source() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.WANConfig.source)
  return _internal_source();
}
inline void WANConfig::unsafe_arena_set_allocated_source(
    ::zb::dcts::ZeromqLinkCfg* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.WANConfig.source)
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::release_source() {
  
  ::zb::dcts::ZeromqLinkCfg* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.WANConfig.source)
  
  ::zb::dcts::ZeromqLinkCfg* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::mutable_source() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.WANConfig.source)
  return _internal_mutable_source();
}
inline void WANConfig::set_allocated_source(::zb::dcts::ZeromqLinkCfg* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source)->GetArena();
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.WANConfig.source)
}

// .zb.dcts.ZeromqLinkCfg pub = 3;
inline bool WANConfig::_internal_has_pub() const {
  return this != internal_default_instance() && pub_ != nullptr;
}
inline bool WANConfig::has_pub() const {
  return _internal_has_pub();
}
inline const ::zb::dcts::ZeromqLinkCfg& WANConfig::_internal_pub() const {
  const ::zb::dcts::ZeromqLinkCfg* p = pub_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg&>(
      ::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& WANConfig::pub() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.WANConfig.pub)
  return _internal_pub();
}
inline void WANConfig::unsafe_arena_set_allocated_pub(
    ::zb::dcts::ZeromqLinkCfg* pub) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_);
  }
  pub_ = pub;
  if (pub) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.WANConfig.pub)
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::release_pub() {
  
  ::zb::dcts::ZeromqLinkCfg* temp = pub_;
  pub_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::unsafe_arena_release_pub() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.WANConfig.pub)
  
  ::zb::dcts::ZeromqLinkCfg* temp = pub_;
  pub_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::_internal_mutable_pub() {
  
  if (pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    pub_ = p;
  }
  return pub_;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::mutable_pub() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.WANConfig.pub)
  return _internal_mutable_pub();
}
inline void WANConfig::set_allocated_pub(::zb::dcts::ZeromqLinkCfg* pub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_);
  }
  if (pub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub)->GetArena();
    if (message_arena != submessage_arena) {
      pub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub, submessage_arena);
    }
    
  } else {
    
  }
  pub_ = pub;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.WANConfig.pub)
}

// .zb.dcts.ZeromqLinkCfg sub = 4;
inline bool WANConfig::_internal_has_sub() const {
  return this != internal_default_instance() && sub_ != nullptr;
}
inline bool WANConfig::has_sub() const {
  return _internal_has_sub();
}
inline const ::zb::dcts::ZeromqLinkCfg& WANConfig::_internal_sub() const {
  const ::zb::dcts::ZeromqLinkCfg* p = sub_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg&>(
      ::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& WANConfig::sub() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.WANConfig.sub)
  return _internal_sub();
}
inline void WANConfig::unsafe_arena_set_allocated_sub(
    ::zb::dcts::ZeromqLinkCfg* sub) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_);
  }
  sub_ = sub;
  if (sub) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.WANConfig.sub)
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::release_sub() {
  
  ::zb::dcts::ZeromqLinkCfg* temp = sub_;
  sub_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::unsafe_arena_release_sub() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.WANConfig.sub)
  
  ::zb::dcts::ZeromqLinkCfg* temp = sub_;
  sub_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::_internal_mutable_sub() {
  
  if (sub_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    sub_ = p;
  }
  return sub_;
}
inline ::zb::dcts::ZeromqLinkCfg* WANConfig::mutable_sub() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.WANConfig.sub)
  return _internal_mutable_sub();
}
inline void WANConfig::set_allocated_sub(::zb::dcts::ZeromqLinkCfg* sub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_);
  }
  if (sub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub)->GetArena();
    if (message_arena != submessage_arena) {
      sub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub, submessage_arena);
    }
    
  } else {
    
  }
  sub_ = sub;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.WANConfig.sub)
}

// -------------------------------------------------------------------

// DeviceConfig

// .zb.dcts.node.DeviceType type = 1;
inline void DeviceConfig::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::node::DeviceType DeviceConfig::_internal_type() const {
  return static_cast< ::zb::dcts::node::DeviceType >(type_);
}
inline ::zb::dcts::node::DeviceType DeviceConfig::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.DeviceConfig.type)
  return _internal_type();
}
inline void DeviceConfig::_internal_set_type(::zb::dcts::node::DeviceType value) {
  
  type_ = value;
}
inline void DeviceConfig::set_type(::zb::dcts::node::DeviceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.DeviceConfig.type)
}

// .zb.dcts.IPv4Address address = 2;
inline bool DeviceConfig::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool DeviceConfig::has_address() const {
  return _internal_has_address();
}
inline const ::zb::dcts::IPv4Address& DeviceConfig::_internal_address() const {
  const ::zb::dcts::IPv4Address* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::IPv4Address&>(
      ::zb::dcts::_IPv4Address_default_instance_);
}
inline const ::zb::dcts::IPv4Address& DeviceConfig::address() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.DeviceConfig.address)
  return _internal_address();
}
inline void DeviceConfig::unsafe_arena_set_allocated_address(
    ::zb::dcts::IPv4Address* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.DeviceConfig.address)
}
inline ::zb::dcts::IPv4Address* DeviceConfig::release_address() {
  
  ::zb::dcts::IPv4Address* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::IPv4Address* DeviceConfig::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.DeviceConfig.address)
  
  ::zb::dcts::IPv4Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::zb::dcts::IPv4Address* DeviceConfig::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::IPv4Address>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::zb::dcts::IPv4Address* DeviceConfig::mutable_address() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.DeviceConfig.address)
  return _internal_mutable_address();
}
inline void DeviceConfig::set_allocated_address(::zb::dcts::IPv4Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.DeviceConfig.address)
}

// .zb.dcts.node.DeviceId id = 3;
inline bool DeviceConfig::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool DeviceConfig::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::node::DeviceId& DeviceConfig::_internal_id() const {
  const ::zb::dcts::node::DeviceId* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::DeviceId&>(
      ::zb::dcts::node::_DeviceId_default_instance_);
}
inline const ::zb::dcts::node::DeviceId& DeviceConfig::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.DeviceConfig.id)
  return _internal_id();
}
inline void DeviceConfig::unsafe_arena_set_allocated_id(
    ::zb::dcts::node::DeviceId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.DeviceConfig.id)
}
inline ::zb::dcts::node::DeviceId* DeviceConfig::release_id() {
  
  ::zb::dcts::node::DeviceId* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::DeviceId* DeviceConfig::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.DeviceConfig.id)
  
  ::zb::dcts::node::DeviceId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::DeviceId* DeviceConfig::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::DeviceId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::node::DeviceId* DeviceConfig::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.DeviceConfig.id)
  return _internal_mutable_id();
}
inline void DeviceConfig::set_allocated_id(::zb::dcts::node::DeviceId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.DeviceConfig.id)
}

// -------------------------------------------------------------------

// LANConfig

// repeated .zb.dcts.node.DeviceConfig cluster_3900 = 1;
inline int LANConfig::_internal_cluster_3900_size() const {
  return cluster_3900_.size();
}
inline int LANConfig::cluster_3900_size() const {
  return _internal_cluster_3900_size();
}
inline void LANConfig::clear_cluster_3900() {
  cluster_3900_.Clear();
}
inline ::zb::dcts::node::DeviceConfig* LANConfig::mutable_cluster_3900(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.LANConfig.cluster_3900)
  return cluster_3900_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig >*
LANConfig::mutable_cluster_3900() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.LANConfig.cluster_3900)
  return &cluster_3900_;
}
inline const ::zb::dcts::node::DeviceConfig& LANConfig::_internal_cluster_3900(int index) const {
  return cluster_3900_.Get(index);
}
inline const ::zb::dcts::node::DeviceConfig& LANConfig::cluster_3900(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.LANConfig.cluster_3900)
  return _internal_cluster_3900(index);
}
inline ::zb::dcts::node::DeviceConfig* LANConfig::_internal_add_cluster_3900() {
  return cluster_3900_.Add();
}
inline ::zb::dcts::node::DeviceConfig* LANConfig::add_cluster_3900() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.LANConfig.cluster_3900)
  return _internal_add_cluster_3900();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig >&
LANConfig::cluster_3900() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.LANConfig.cluster_3900)
  return cluster_3900_;
}

// repeated .zb.dcts.node.DeviceConfig cluster_radarDF = 2;
inline int LANConfig::_internal_cluster_radardf_size() const {
  return cluster_radardf_.size();
}
inline int LANConfig::cluster_radardf_size() const {
  return _internal_cluster_radardf_size();
}
inline void LANConfig::clear_cluster_radardf() {
  cluster_radardf_.Clear();
}
inline ::zb::dcts::node::DeviceConfig* LANConfig::mutable_cluster_radardf(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.LANConfig.cluster_radarDF)
  return cluster_radardf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig >*
LANConfig::mutable_cluster_radardf() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.LANConfig.cluster_radarDF)
  return &cluster_radardf_;
}
inline const ::zb::dcts::node::DeviceConfig& LANConfig::_internal_cluster_radardf(int index) const {
  return cluster_radardf_.Get(index);
}
inline const ::zb::dcts::node::DeviceConfig& LANConfig::cluster_radardf(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.LANConfig.cluster_radarDF)
  return _internal_cluster_radardf(index);
}
inline ::zb::dcts::node::DeviceConfig* LANConfig::_internal_add_cluster_radardf() {
  return cluster_radardf_.Add();
}
inline ::zb::dcts::node::DeviceConfig* LANConfig::add_cluster_radardf() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.LANConfig.cluster_radarDF)
  return _internal_add_cluster_radardf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::DeviceConfig >&
LANConfig::cluster_radardf() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.LANConfig.cluster_radarDF)
  return cluster_radardf_;
}

// -------------------------------------------------------------------

// NodeConfig

// .zb.dcts.node.NodeIdentity identity = 1;
inline bool NodeConfig::_internal_has_identity() const {
  return this != internal_default_instance() && identity_ != nullptr;
}
inline bool NodeConfig::has_identity() const {
  return _internal_has_identity();
}
inline void NodeConfig::clear_identity() {
  if (GetArena() == nullptr && identity_ != nullptr) {
    delete identity_;
  }
  identity_ = nullptr;
}
inline const ::zb::dcts::node::NodeIdentity& NodeConfig::_internal_identity() const {
  const ::zb::dcts::node::NodeIdentity* p = identity_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::NodeIdentity&>(
      ::zb::dcts::node::_NodeIdentity_default_instance_);
}
inline const ::zb::dcts::node::NodeIdentity& NodeConfig::identity() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.NodeConfig.identity)
  return _internal_identity();
}
inline void NodeConfig::unsafe_arena_set_allocated_identity(
    ::zb::dcts::node::NodeIdentity* identity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_);
  }
  identity_ = identity;
  if (identity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.NodeConfig.identity)
}
inline ::zb::dcts::node::NodeIdentity* NodeConfig::release_identity() {
  
  ::zb::dcts::node::NodeIdentity* temp = identity_;
  identity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::NodeIdentity* NodeConfig::unsafe_arena_release_identity() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.NodeConfig.identity)
  
  ::zb::dcts::node::NodeIdentity* temp = identity_;
  identity_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::NodeIdentity* NodeConfig::_internal_mutable_identity() {
  
  if (identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::NodeIdentity>(GetArena());
    identity_ = p;
  }
  return identity_;
}
inline ::zb::dcts::node::NodeIdentity* NodeConfig::mutable_identity() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.NodeConfig.identity)
  return _internal_mutable_identity();
}
inline void NodeConfig::set_allocated_identity(::zb::dcts::node::NodeIdentity* identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete identity_;
  }
  if (identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(identity);
    if (message_arena != submessage_arena) {
      identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    
  } else {
    
  }
  identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.NodeConfig.identity)
}

// .zb.dcts.node.WANConfig WAN_conf = 2;
inline bool NodeConfig::_internal_has_wan_conf() const {
  return this != internal_default_instance() && wan_conf_ != nullptr;
}
inline bool NodeConfig::has_wan_conf() const {
  return _internal_has_wan_conf();
}
inline void NodeConfig::clear_wan_conf() {
  if (GetArena() == nullptr && wan_conf_ != nullptr) {
    delete wan_conf_;
  }
  wan_conf_ = nullptr;
}
inline const ::zb::dcts::node::WANConfig& NodeConfig::_internal_wan_conf() const {
  const ::zb::dcts::node::WANConfig* p = wan_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::WANConfig&>(
      ::zb::dcts::node::_WANConfig_default_instance_);
}
inline const ::zb::dcts::node::WANConfig& NodeConfig::wan_conf() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.NodeConfig.WAN_conf)
  return _internal_wan_conf();
}
inline void NodeConfig::unsafe_arena_set_allocated_wan_conf(
    ::zb::dcts::node::WANConfig* wan_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wan_conf_);
  }
  wan_conf_ = wan_conf;
  if (wan_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.NodeConfig.WAN_conf)
}
inline ::zb::dcts::node::WANConfig* NodeConfig::release_wan_conf() {
  
  ::zb::dcts::node::WANConfig* temp = wan_conf_;
  wan_conf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::WANConfig* NodeConfig::unsafe_arena_release_wan_conf() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.NodeConfig.WAN_conf)
  
  ::zb::dcts::node::WANConfig* temp = wan_conf_;
  wan_conf_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::WANConfig* NodeConfig::_internal_mutable_wan_conf() {
  
  if (wan_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::WANConfig>(GetArena());
    wan_conf_ = p;
  }
  return wan_conf_;
}
inline ::zb::dcts::node::WANConfig* NodeConfig::mutable_wan_conf() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.NodeConfig.WAN_conf)
  return _internal_mutable_wan_conf();
}
inline void NodeConfig::set_allocated_wan_conf(::zb::dcts::node::WANConfig* wan_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wan_conf_;
  }
  if (wan_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wan_conf);
    if (message_arena != submessage_arena) {
      wan_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wan_conf, submessage_arena);
    }
    
  } else {
    
  }
  wan_conf_ = wan_conf;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.NodeConfig.WAN_conf)
}

// .zb.dcts.node.LANConfig LAN_conf = 3;
inline bool NodeConfig::_internal_has_lan_conf() const {
  return this != internal_default_instance() && lan_conf_ != nullptr;
}
inline bool NodeConfig::has_lan_conf() const {
  return _internal_has_lan_conf();
}
inline void NodeConfig::clear_lan_conf() {
  if (GetArena() == nullptr && lan_conf_ != nullptr) {
    delete lan_conf_;
  }
  lan_conf_ = nullptr;
}
inline const ::zb::dcts::node::LANConfig& NodeConfig::_internal_lan_conf() const {
  const ::zb::dcts::node::LANConfig* p = lan_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::LANConfig&>(
      ::zb::dcts::node::_LANConfig_default_instance_);
}
inline const ::zb::dcts::node::LANConfig& NodeConfig::lan_conf() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.NodeConfig.LAN_conf)
  return _internal_lan_conf();
}
inline void NodeConfig::unsafe_arena_set_allocated_lan_conf(
    ::zb::dcts::node::LANConfig* lan_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lan_conf_);
  }
  lan_conf_ = lan_conf;
  if (lan_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.NodeConfig.LAN_conf)
}
inline ::zb::dcts::node::LANConfig* NodeConfig::release_lan_conf() {
  
  ::zb::dcts::node::LANConfig* temp = lan_conf_;
  lan_conf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::LANConfig* NodeConfig::unsafe_arena_release_lan_conf() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.NodeConfig.LAN_conf)
  
  ::zb::dcts::node::LANConfig* temp = lan_conf_;
  lan_conf_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::LANConfig* NodeConfig::_internal_mutable_lan_conf() {
  
  if (lan_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::LANConfig>(GetArena());
    lan_conf_ = p;
  }
  return lan_conf_;
}
inline ::zb::dcts::node::LANConfig* NodeConfig::mutable_lan_conf() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.NodeConfig.LAN_conf)
  return _internal_mutable_lan_conf();
}
inline void NodeConfig::set_allocated_lan_conf(::zb::dcts::node::LANConfig* lan_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lan_conf_;
  }
  if (lan_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lan_conf);
    if (message_arena != submessage_arena) {
      lan_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lan_conf, submessage_arena);
    }
    
  } else {
    
  }
  lan_conf_ = lan_conf;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.NodeConfig.LAN_conf)
}

// -------------------------------------------------------------------

// TaskMsgId

// uint32 tid = 1;
inline void TaskMsgId::clear_tid() {
  tid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskMsgId::_internal_tid() const {
  return tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskMsgId::tid() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.TaskMsgId.tid)
  return _internal_tid();
}
inline void TaskMsgId::_internal_set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tid_ = value;
}
inline void TaskMsgId::set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.TaskMsgId.tid)
}

// uint32 nid = 2;
inline void TaskMsgId::clear_nid() {
  nid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskMsgId::_internal_nid() const {
  return nid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskMsgId::nid() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.TaskMsgId.nid)
  return _internal_nid();
}
inline void TaskMsgId::_internal_set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nid_ = value;
}
inline void TaskMsgId::set_nid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.TaskMsgId.nid)
}

// uint32 did = 3;
inline void TaskMsgId::clear_did() {
  did_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskMsgId::_internal_did() const {
  return did_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskMsgId::did() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.TaskMsgId.did)
  return _internal_did();
}
inline void TaskMsgId::_internal_set_did(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  did_ = value;
}
inline void TaskMsgId::set_did(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.TaskMsgId.did)
}

// -------------------------------------------------------------------

// AbnormalMsgRecord

// repeated .zb.dcts.node.TaskMsgId task_msg_id = 1;
inline int AbnormalMsgRecord::_internal_task_msg_id_size() const {
  return task_msg_id_.size();
}
inline int AbnormalMsgRecord::task_msg_id_size() const {
  return _internal_task_msg_id_size();
}
inline void AbnormalMsgRecord::clear_task_msg_id() {
  task_msg_id_.Clear();
}
inline ::zb::dcts::node::TaskMsgId* AbnormalMsgRecord::mutable_task_msg_id(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.AbnormalMsgRecord.task_msg_id)
  return task_msg_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::TaskMsgId >*
AbnormalMsgRecord::mutable_task_msg_id() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.AbnormalMsgRecord.task_msg_id)
  return &task_msg_id_;
}
inline const ::zb::dcts::node::TaskMsgId& AbnormalMsgRecord::_internal_task_msg_id(int index) const {
  return task_msg_id_.Get(index);
}
inline const ::zb::dcts::node::TaskMsgId& AbnormalMsgRecord::task_msg_id(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.AbnormalMsgRecord.task_msg_id)
  return _internal_task_msg_id(index);
}
inline ::zb::dcts::node::TaskMsgId* AbnormalMsgRecord::_internal_add_task_msg_id() {
  return task_msg_id_.Add();
}
inline ::zb::dcts::node::TaskMsgId* AbnormalMsgRecord::add_task_msg_id() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.AbnormalMsgRecord.task_msg_id)
  return _internal_add_task_msg_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::TaskMsgId >&
AbnormalMsgRecord::task_msg_id() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.AbnormalMsgRecord.task_msg_id)
  return task_msg_id_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServerConfig

// .zb.dcts.ZeromqLinkCfg server = 1;
inline bool ServerConfig::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool ServerConfig::has_server() const {
  return _internal_has_server();
}
inline const ::zb::dcts::ZeromqLinkCfg& ServerConfig::_internal_server() const {
  const ::zb::dcts::ZeromqLinkCfg* p = server_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg&>(
      ::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& ServerConfig::server() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.ServerConfig.server)
  return _internal_server();
}
inline void ServerConfig::unsafe_arena_set_allocated_server(
    ::zb::dcts::ZeromqLinkCfg* server) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.ServerConfig.server)
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::release_server() {
  
  ::zb::dcts::ZeromqLinkCfg* temp = server_;
  server_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.ServerConfig.server)
  
  ::zb::dcts::ZeromqLinkCfg* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    server_ = p;
  }
  return server_;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::mutable_server() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.ServerConfig.server)
  return _internal_mutable_server();
}
inline void ServerConfig::set_allocated_server(::zb::dcts::ZeromqLinkCfg* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server)->GetArena();
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.ServerConfig.server)
}

// .zb.dcts.ZeromqLinkCfg sink = 2;
inline bool ServerConfig::_internal_has_sink() const {
  return this != internal_default_instance() && sink_ != nullptr;
}
inline bool ServerConfig::has_sink() const {
  return _internal_has_sink();
}
inline const ::zb::dcts::ZeromqLinkCfg& ServerConfig::_internal_sink() const {
  const ::zb::dcts::ZeromqLinkCfg* p = sink_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg&>(
      ::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& ServerConfig::sink() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.ServerConfig.sink)
  return _internal_sink();
}
inline void ServerConfig::unsafe_arena_set_allocated_sink(
    ::zb::dcts::ZeromqLinkCfg* sink) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sink_);
  }
  sink_ = sink;
  if (sink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.ServerConfig.sink)
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::release_sink() {
  
  ::zb::dcts::ZeromqLinkCfg* temp = sink_;
  sink_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::unsafe_arena_release_sink() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.ServerConfig.sink)
  
  ::zb::dcts::ZeromqLinkCfg* temp = sink_;
  sink_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::_internal_mutable_sink() {
  
  if (sink_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    sink_ = p;
  }
  return sink_;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::mutable_sink() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.ServerConfig.sink)
  return _internal_mutable_sink();
}
inline void ServerConfig::set_allocated_sink(::zb::dcts::ZeromqLinkCfg* sink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sink_);
  }
  if (sink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sink)->GetArena();
    if (message_arena != submessage_arena) {
      sink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sink, submessage_arena);
    }
    
  } else {
    
  }
  sink_ = sink;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.ServerConfig.sink)
}

// .zb.dcts.ZeromqLinkCfg pub = 3;
inline bool ServerConfig::_internal_has_pub() const {
  return this != internal_default_instance() && pub_ != nullptr;
}
inline bool ServerConfig::has_pub() const {
  return _internal_has_pub();
}
inline const ::zb::dcts::ZeromqLinkCfg& ServerConfig::_internal_pub() const {
  const ::zb::dcts::ZeromqLinkCfg* p = pub_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg&>(
      ::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& ServerConfig::pub() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.ServerConfig.pub)
  return _internal_pub();
}
inline void ServerConfig::unsafe_arena_set_allocated_pub(
    ::zb::dcts::ZeromqLinkCfg* pub) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_);
  }
  pub_ = pub;
  if (pub) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.ServerConfig.pub)
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::release_pub() {
  
  ::zb::dcts::ZeromqLinkCfg* temp = pub_;
  pub_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::unsafe_arena_release_pub() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.ServerConfig.pub)
  
  ::zb::dcts::ZeromqLinkCfg* temp = pub_;
  pub_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::_internal_mutable_pub() {
  
  if (pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    pub_ = p;
  }
  return pub_;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::mutable_pub() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.ServerConfig.pub)
  return _internal_mutable_pub();
}
inline void ServerConfig::set_allocated_pub(::zb::dcts::ZeromqLinkCfg* pub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_);
  }
  if (pub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub)->GetArena();
    if (message_arena != submessage_arena) {
      pub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub, submessage_arena);
    }
    
  } else {
    
  }
  pub_ = pub;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.ServerConfig.pub)
}

// .zb.dcts.ZeromqLinkCfg sub = 4;
inline bool ServerConfig::_internal_has_sub() const {
  return this != internal_default_instance() && sub_ != nullptr;
}
inline bool ServerConfig::has_sub() const {
  return _internal_has_sub();
}
inline const ::zb::dcts::ZeromqLinkCfg& ServerConfig::_internal_sub() const {
  const ::zb::dcts::ZeromqLinkCfg* p = sub_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg&>(
      ::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& ServerConfig::sub() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.ServerConfig.sub)
  return _internal_sub();
}
inline void ServerConfig::unsafe_arena_set_allocated_sub(
    ::zb::dcts::ZeromqLinkCfg* sub) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_);
  }
  sub_ = sub;
  if (sub) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.ServerConfig.sub)
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::release_sub() {
  
  ::zb::dcts::ZeromqLinkCfg* temp = sub_;
  sub_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::unsafe_arena_release_sub() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.ServerConfig.sub)
  
  ::zb::dcts::ZeromqLinkCfg* temp = sub_;
  sub_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::_internal_mutable_sub() {
  
  if (sub_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    sub_ = p;
  }
  return sub_;
}
inline ::zb::dcts::ZeromqLinkCfg* ServerConfig::mutable_sub() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.ServerConfig.sub)
  return _internal_mutable_sub();
}
inline void ServerConfig::set_allocated_sub(::zb::dcts::ZeromqLinkCfg* sub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_);
  }
  if (sub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub)->GetArena();
    if (message_arena != submessage_arena) {
      sub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub, submessage_arena);
    }
    
  } else {
    
  }
  sub_ = sub;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.ServerConfig.sub)
}

// map<string, .zb.dcts.IPv4Address> services = 5;
inline int ServerConfig::_internal_services_size() const {
  return services_.size();
}
inline int ServerConfig::services_size() const {
  return _internal_services_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >&
ServerConfig::_internal_services() const {
  return services_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >&
ServerConfig::services() const {
  // @@protoc_insertion_point(field_map:zb.dcts.node.ServerConfig.services)
  return _internal_services();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >*
ServerConfig::_internal_mutable_services() {
  return services_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >*
ServerConfig::mutable_services() {
  // @@protoc_insertion_point(field_mutable_map:zb.dcts.node.ServerConfig.services)
  return _internal_mutable_services();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace node
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::node::TaskCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::TaskCmd>() {
  return ::zb::dcts::node::TaskCmd_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::node::CSTip> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::CSTip>() {
  return ::zb::dcts::node::CSTip_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fnodeInternal_2eproto
